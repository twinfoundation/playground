{
	"openapi": "3.1.1",
	"info": {
		"title": "TWIN Playground Node",
		"description": "REST API for TWIN - API Server.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://playground-api.twindev.org"
		}
	],
	"tags": [
		{
			"name": "Info",
			"description": "Information endpoints for the REST server."
		},
		{
			"name": "Authentication",
			"description": "Authentication endpoints for the REST server."
		},
		{
			"name": "Identity",
			"description": "Service to provide all features related to digital identity."
		},
		{
			"name": "Identity Profile",
			"description": "Service to provide all features related to digital identity profiles."
		},
		{
			"name": "Blob Storage",
			"description": "Endpoints which are modelled to access a blob storage contract."
		},
		{
			"name": "Telemetry",
			"description": "Endpoints which are modelled to access a telemetry contract."
		},
		{
			"name": "Logging",
			"description": "Endpoints which are modelled to access a logging contract."
		},
		{
			"name": "NFT",
			"description": "Endpoints which are modelled to access an NFT contract."
		},
		{
			"name": "Attestation",
			"description": "Endpoints which are modelled to access an attestation contract."
		},
		{
			"name": "VerifiableStorage",
			"description": "Endpoints which are modelled to access a verifiable storage."
		},
		{
			"name": "Immutable Proof",
			"description": "Endpoints which are modelled to access an immutable proof contract."
		},
		{
			"name": "Data Processing",
			"description": "Endpoints which are modelled to access a data processing contract."
		},
		{
			"name": "Document Management",
			"description": "Endpoints which are modelled to access a document management contract."
		},
		{
			"name": "Auditable Item Graph",
			"description": "Endpoints which are modelled to access an auditable item graph contract."
		},
		{
			"name": "Auditable Item Stream",
			"description": "Endpoints which are modelled to access an auditable item stream contract."
		},
		{
			"name": "Federated Catalogue",
			"description": "Endpoints to access a Federated Catalogue."
		}
	],
	"paths": {
		"/info": {
			"get": {
				"operationId": "serverInformation",
				"summary": "Get the information for the server",
				"tags": [
					"Info"
				],
				"responses": {
					"200": {
						"description": "The information about the server.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServerInfo"
								},
								"examples": {
									"informationResponse": {
										"summary": "The response for the information request.",
										"value": {
											"name": "API Server",
											"version": "1.0.0"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/health": {
			"get": {
				"operationId": "serverHealth",
				"summary": "Get the health for the server",
				"tags": [
					"Info"
				],
				"responses": {
					"200": {
						"description": "The health of the server.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthInfo"
								},
								"examples": {
									"healthResponseOK": {
										"summary": "The response for the health request.",
										"value": {
											"status": "ok",
											"components": [
												{
													"name": "Database",
													"status": "ok"
												},
												{
													"name": "Storage",
													"status": "ok"
												}
											]
										}
									},
									"healthResponseWarning": {
										"summary": "The response for the health request with warnings.",
										"value": {
											"status": "warning",
											"components": [
												{
													"name": "Database",
													"status": "warning",
													"details": "The database is running slow."
												},
												{
													"name": "Storage",
													"status": "ok"
												}
											]
										}
									},
									"healthResponseError": {
										"summary": "The response for the health request with errors.",
										"value": {
											"status": "error",
											"components": [
												{
													"name": "Database",
													"status": "ok"
												},
												{
													"name": "Storage",
													"status": "error",
													"details": "The storage is full."
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/spec": {
			"get": {
				"operationId": "serverSpec",
				"summary": "Get the OpenAPI specification for the endpoints",
				"tags": [
					"Info"
				],
				"responses": {
					"200": {
						"description": "The OpenAPI spec for the endpoints.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServerSpecResponse"
								},
								"examples": {
									"specResponse": {
										"summary": "The response for the spec request.",
										"value": {
											"openapi": "3.1.0",
											"info": {},
											"paths": {}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/login": {
			"post": {
				"operationId": "authenticationLogin",
				"summary": "Login to the server",
				"tags": [
					"Authentication"
				],
				"requestBody": {
					"description": "Perform a login on the server.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							},
							"examples": {
								"loginRequestExample": {
									"summary": "The request to login to the server.",
									"value": {
										"email": "user@example.com",
										"password": "MyPassword123!"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response from a login on the server.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								},
								"examples": {
									"loginResponseExample": {
										"summary": "The response for the login request.",
										"value": {
											"token": "eyJhbGciOiJIU...sw5c",
											"expiry": 1722514341067
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/logout": {
			"get": {
				"operationId": "authenticationLogout",
				"summary": "Logout from the server",
				"tags": [
					"Authentication"
				],
				"parameters": [
					{
						"name": "token",
						"description": "The token to logout, if it uses a mechanism with public access.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJhbGciOiJIU...sw5c"
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/refresh": {
			"get": {
				"operationId": "authenticationRefreshToken",
				"summary": "Refresh an authentication token",
				"tags": [
					"Authentication"
				],
				"parameters": [
					{
						"name": "token",
						"description": "The token to refresh, if it uses a mechanism with public access.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJhbGciOiJIU...sw5c"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response from a refresh on the auth token.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RefreshTokenResponse"
								},
								"examples": {
									"refreshTokenResponseExample": {
										"summary": "The response for the refresh token request.",
										"value": {
											"token": "eyJhbGciOiJIU...sw5c",
											"expiry": 1722514341067
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/{email}/password": {
			"put": {
				"operationId": "authenticationUpdatePassword",
				"summary": "Update the user's password",
				"tags": [
					"Authentication"
				],
				"parameters": [
					{
						"name": "email",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "john:example.com"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}": {
			"get": {
				"operationId": "identityResolve",
				"summary": "Resolve an identity",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"responses": {
					"200": {
						"description": "Response to resolving an identity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidDocument"
								},
								"examples": {
									"identityResolveResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/did/v1",
											"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a",
											"service": [
												{
													"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a#revocation",
													"type": "RevocationBitmap2022",
													"serviceEndpoint": "data:application/octet-stream;base64,eJyzMmAAAwABr"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity": {
			"post": {
				"operationId": "identityCreate",
				"summary": "Create an identity",
				"tags": [
					"Identity"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an identity.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityCreateRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating an identity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidDocument"
								},
								"examples": {
									"identityCreateResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/did/v1",
											"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a",
											"service": [
												{
													"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a#revocation",
													"type": "RevocationBitmap2022",
													"serviceEndpoint": "data:application/octet-stream;base64,eJyzMmAAAwABr"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verification-method": {
			"post": {
				"operationId": "identityVerificationMethodCreate",
				"summary": "Create an identity verification method",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification method for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verification method.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerificationMethodCreateRequest"
							},
							"examples": {
								"identityVerificationMethodCreateRequestExample": {
									"value": {
										"verificationMethodType": "assertionMethod",
										"verificationMethodId": "my-assertion"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verification method.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidDocumentVerificationMethod"
								},
								"examples": {
									"identityVerificationMethodCreateResponseExample": {
										"value": {
											"id": "did:iota:tst:0x70ce5abe69e7c56dd69684dd6da65812b9758b03a0081331ca560b34d73d5ff0#my-assertion",
											"controller": "did:iota:tst:0x70ce5abe69e7c56dd69684dd6da65812b9758b03a0081331ca560b34d73d5ff0",
											"type": "JsonWebKey2020",
											"publicKeyJwk": {
												"kty": "OKP",
												"alg": "EdDSA",
												"kid": "f_fj3rGsZFSYvnS_xv5MgyIBlExq-lgDciu0YQ--S3s",
												"crv": "Ed25519",
												"x": "SFm32z7y9C17olpaTeocG25WV2CNTUl5MhM679Z4bok"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verification-method/{verificationMethodId}": {
			"delete": {
				"operationId": "identityVerificationMethodRemove",
				"summary": "Remove an identity verification method",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to remove the verification method from.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					},
					{
						"name": "verificationMethodId",
						"description": "The verification method to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-assertion"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/service": {
			"post": {
				"operationId": "identityServiceCreate",
				"summary": "Create an identity service",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the service for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a service.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityServiceCreateRequest"
							},
							"examples": {
								"identityServiceCreateRequestExample": {
									"value": {
										"serviceId": "did:example:123#linked-domain",
										"type": "LinkedDomains",
										"endpoint": "https://bar.example.com"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a service.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidService"
								},
								"examples": {
									"identityServiceCreateResponseExample": {
										"value": {
											"id": "did:example:123#linked-domain",
											"type": "LinkedDomains",
											"serviceEndpoint": "https://bar.example.com"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/service/{serviceId}": {
			"delete": {
				"operationId": "identityServiceRemove",
				"summary": "Remove an identity service",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to remove the service from.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					},
					{
						"name": "serviceId",
						"description": "The service to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:example:123#linked-domain"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential": {
			"post": {
				"operationId": "identityVerifiableCredentialCreate",
				"summary": "Create an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verifiable credential.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerifiableCredentialCreateRequest"
							},
							"examples": {
								"identityVerifiableCredentialCreateRequestExample": {
									"value": {
										"credentialId": "https://example.com/credentials/3732",
										"subject": {
											"@context": "https://schema.org",
											"@type": "Person",
											"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
											"name": "Jane Doe"
										},
										"revocationIndex": 5
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verifiable credential.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiableCredentialCreateResponse"
								},
								"examples": {
									"identityVerifiableCredentialCreateResponseExample": {
										"value": {
											"verifiableCredential": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "https://example.com/credentials/3732",
												"type": [
													"VerifiableCredential",
													"Person"
												],
												"credentialSubject": {
													"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
													"name": "Jane Doe"
												},
												"issuer": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a",
												"issuanceDate": "2025-01-24T09:21:51.500Z",
												"credentialStatus": {
													"id": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a#revocation",
													"type": "BitstringStatusList",
													"revocationBitmapIndex": "5"
												}
											},
											"jwt": "eyJraWQiOi...D1Z3AQ"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/verifiable-credential/verify": {
			"get": {
				"operationId": "identityVerifiableCredentialVerify",
				"summary": "Verify an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "jwt",
						"description": "The jwt to verify.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJraWQiOi...D1Z3AQ"
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying a verifiable credential.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiableCredentialVerifyResponse"
								},
								"examples": {
									"identityVerifiableCredentialVerifyResponseExample": {
										"value": {
											"revoked": false,
											"verifiableCredential": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "https://example.com/credentials/3732",
												"type": [
													"VerifiableCredential",
													"Person"
												],
												"credentialSubject": {
													"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
													"name": "Jane Doe"
												},
												"issuer": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a",
												"issuanceDate": "2025-01-24T09:21:51.500Z",
												"credentialStatus": {
													"id": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a#revocation",
													"type": "BitstringStatusList",
													"revocationBitmapIndex": "5"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential/revoke/{revocationIndex}": {
			"get": {
				"operationId": "identityVerifiableCredentialRevoke",
				"summary": "Revoke an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to revoke the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					},
					{
						"name": "revocationIndex",
						"description": "The revocation index to revoke.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "number"
						},
						"style": "simple",
						"example": 5
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential/unrevoke/{revocationIndex}": {
			"get": {
				"operationId": "identityVerifiableCredentialUnrevoke",
				"summary": "Unrevoke an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to unrevoke the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					},
					{
						"name": "revocationIndex",
						"description": "The revocation index to unrevoke.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "number"
						},
						"style": "simple",
						"example": 5
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-presentation": {
			"post": {
				"operationId": "identityVerifiablePresentationCreate",
				"summary": "Create an identity verifiable presentation",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification presentation for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verifiable presentation.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerifiablePresentationCreateRequest"
							},
							"examples": {
								"identityVerifiablePresentationCreateRequestExample": {
									"value": {
										"presentationId": "https://example.com/presentation/3732",
										"verifiableCredentials": [
											"eyJraWQiOi...D1Z3AQ"
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verifiable presentation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiablePresentationCreateResponse"
								},
								"examples": {
									"IIdentityVerifiablePresentationCreateResponseExample": {
										"value": {
											"verifiablePresentation": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "presentationId",
												"type": [
													"VerifiablePresentation",
													"Person"
												],
												"verifiableCredential": [
													"eyJraWQiOi...D1Z3AQ"
												],
												"holder": "did:entity-storage:0xcea318e06e89f3fb4048160770effd84d0cfa5801fee13dfa6f9413a00429cec"
											},
											"jwt": "eyJraWQiOi...D1Z3AQ"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/verifiable-presentation/verify": {
			"get": {
				"operationId": "identityVerifiablePresentationVerify",
				"summary": "Verify an identity verifiable presentation",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "jwt",
						"description": "The jwt to verify.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJraWQiOi...D1Z3AQ"
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying a verifiable presentation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiablePresentationVerifyResponse"
								},
								"examples": {
									"identityVerifiablePresentationVerifyResponseExample": {
										"value": {
											"revoked": false,
											"verifiablePresentation": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "presentationId",
												"type": [
													"VerifiablePresentation",
													"Person"
												],
												"verifiableCredential": [
													"eyJraWQiOi...D1Z3AQ"
												],
												"holder": "did:entity-storage:0xcea318e06e89f3fb4048160770effd84d0cfa5801fee13dfa6f9413a00429cec"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/proof": {
			"post": {
				"operationId": "identityProofCreate",
				"summary": "Create an identity proof",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the proof for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0xda2df3ebc91ee0d5229d6532ffd0f4426952a94f34988b0ca906694dfd366a6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProofCreateRequest"
							},
							"examples": {
								"identityProofCreateRequestExample": {
									"value": {
										"proofType": "DataIntegrityProof",
										"document": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
											"type": [
												"VerifiableCredential",
												"AlumniCredential"
											],
											"name": "Alumni Credential",
											"description": "A minimum viable example of an Alumni Credential.",
											"issuer": "https://vc.example/issuers/5678",
											"validFrom": "2023-01-01T00:00:00Z",
											"credentialSubject": {
												"id": "did:example:abcdefgh",
												"alumniOf": "The School of Examples"
											}
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/Proof"
								},
								"examples": {
									"identityProofCreateResponseExample": {
										"value": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"type": "DataIntegrityProof",
											"cryptosuite": "eddsa-jcs-2022",
											"created": "2024-01-31T16:00:45.490Z",
											"verificationMethod": "did:entity-storage:0x0101010101010101010101010101010101010101010101010101010101010101#my-verification-id",
											"proofPurpose": "assertionMethod",
											"proofValue": "z2zGoejwpX6HH2T11BZaniEVZrqRKDpwbQSvPcL7eL9M7hV5P9zQQZxs85n6qyDzkkXCL8aFUWfwQD5bxVGqDK1fa"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/proof/verify": {
			"post": {
				"operationId": "identityProofVerify",
				"summary": "Verify an identity proof",
				"tags": [
					"Identity"
				],
				"requestBody": {
					"description": "Request to verify a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProofVerifyRequest"
							},
							"examples": {
								"identityProofVerifyRequestExample": {
									"value": {
										"document": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
											"type": [
												"VerifiableCredential",
												"AlumniCredential"
											],
											"name": "Alumni Credential",
											"description": "A minimum viable example of an Alumni Credential.",
											"issuer": "https://vc.example/issuers/5678",
											"validFrom": "2023-01-01T00:00:00Z",
											"credentialSubject": {
												"id": "did:example:abcdefgh",
												"alumniOf": "The School of Examples"
											}
										},
										"proof": {
											"@context": "https://www.w3.org/ns/credentials/v2",
											"type": "DataIntegrityProof",
											"cryptosuite": "eddsa-jcs-2022",
											"created": "2025-01-24T11:32:13.106Z",
											"verificationMethod": "did:entity-storage:0xda2df3ebc91ee0d5229d6532ffd0f4426952a94f34988b0ca906694dfd366a6a#my-verification-id",
											"proofPurpose": "assertionMethod",
											"proofValue": "2fVLgANruCBoRPBCJavi54mZtkQdyMz6T2N4XVyB96asawiriKrVWoktcSQ7dMGrBTiemBBDpcLE2HfiTBCGuBmq"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to verifying a proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProofVerifyResponse"
								},
								"examples": {
									"identityProofVerifyResponseExample": {
										"value": {
											"verified": true
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile": {
			"post": {
				"operationId": "identityProfileCreate",
				"summary": "Create an identity profile",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an identity profile.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProfileCreateRequest"
							},
							"examples": {
								"identityProfileCreateRequestExample": {
									"value": {
										"publicProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										},
										"privateProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"telephone": "(425) 123-4567",
											"url": "http://www.janedoe.com"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "The request resulted in a conflicting operation, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConflictResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "ConflictError",
											"message": "component.error",
											"properties": {
												"conflicts": [
													"1"
												]
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "identityProfileGet",
				"summary": "Get the identity profile properties",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "publicPropertyNames",
						"description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "name,jobTitle"
					},
					{
						"name": "privatePropertyNames",
						"description": "The private properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an identity details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProfileGetResponse"
								},
								"examples": {
									"identityGetResponseExample": {
										"value": {
											"identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"publicProfile": {
												"@context": "https://schema.org",
												"@type": "Person",
												"jobTitle": "Professor",
												"name": "Jane Doe"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "identityProfileUpdate",
				"summary": "Update an identity profile properties",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update an identity profile.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProfileUpdateRequest"
							},
							"examples": {
								"identityProfileUpdateRequestExample": {
									"value": {
										"publicProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										},
										"privateProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"telephone": "(425) 123-4567",
											"url": "http://www.janedoe.com"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "identityProfileRemove",
				"summary": "Remove an identity profile",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile/{identity}/public": {
			"get": {
				"operationId": "identityProfileGetPublic",
				"summary": "Get the identity profile public properties",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to get the profile for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					},
					{
						"name": "propertyNames",
						"description": "The properties to get for the public profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "role,email,name"
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an identity public profile.",
						"content": {
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
								},
								"examples": {
									"identityGetPublicResponseExample": {
										"value": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile/query": {
			"get": {
				"operationId": "identitiesProfileList",
				"summary": "Get the list of profile data for identities",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "publicFilters",
						"description": "The public filters to apply to the list, comma separated list with color between key and value for each pair e.g. prop1:value1,prop2:value2.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "publicPropertyNames",
						"description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The cursor for paged requests.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "Number of items to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a list of identities.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProfileListResponse"
								},
								"examples": {
									"identitiesProfileListResponseExample": {
										"value": {
											"items": [
												{
													"identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"publicProfile": {
														"@context": "https://schema.org",
														"@type": "Person",
														"jobTitle": "Professor",
														"name": "Jane Doe"
													}
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/blob-storage": {
			"post": {
				"operationId": "blobStorageCreate",
				"summary": "Create an entry in blob storage",
				"tags": [
					"Blob Storage"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an entry in blob storage.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlobStorageCreateRequest"
							},
							"examples": {
								"blobStorageCreateRequestExample": {
									"value": {
										"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw==",
										"metadata": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "blobStorageQuery",
				"summary": "Query the items from blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "conditions",
						"description": "The condition for the query as JSON version of EntityCondition type.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"description": "The order for the results, default to created.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"dateCreated",
								"dateModified"
							]
						}
					},
					{
						"name": "orderByDirection",
						"description": "The direction for the order, defaults to desc.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "pageSize",
						"description": "The number of entries to return per page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The cursor to get next chunk of data, returned in previous response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting the list of entries from a query.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntryList"
								},
								"examples": {
									"blobStorageListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/blob-storage/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "BlobStorageEntry",
													"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"dateCreated": "2024-01-01T00:00:00Z",
													"encodingFormat": "application/pdf",
													"blobSize": 42,
													"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"fileExtension": "pdf",
													"metadata": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntryList"
								},
								"examples": {
									"blobStorageListResponseJsonLdExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/blob-storage/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "BlobStorageEntry",
													"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"dateCreated": "2024-01-01T00:00:00Z",
													"encodingFormat": "application/pdf",
													"blobSize": 42,
													"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"fileExtension": "pdf",
													"metadata": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/blob-storage/{id}": {
			"get": {
				"operationId": "blobStorageGet",
				"summary": "Get the metadata for an item from blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the blob to get in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					},
					{
						"name": "includeContent",
						"description": "Include the content in the response, otherwise only metadata is returned.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						},
						"example": "true"
					},
					{
						"name": "decompress",
						"description": "If the content should be decompressed, if it was compressed when stored, defaults to true.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "overrideVaultKeyId",
						"description": "Use a different vault key id for decryption, if not provided the default vault key id will be used.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an entry from blob storage.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntry"
								},
								"examples": {
									"blobStorageGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "BlobStorageEntry",
											"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"dateCreated": "2024-01-01T00:00:00Z",
											"encodingFormat": "application/pdf",
											"blobSize": 42,
											"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"fileExtension": "pdf",
											"metadata": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntry"
								},
								"examples": {
									"blobStorageGetResponseJsonLdExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "BlobStorageEntry",
											"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"dateCreated": "2024-01-01T00:00:00Z",
											"encodingFormat": "application/pdf",
											"blobSize": 42,
											"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"fileExtension": "pdf",
											"metadata": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "blobStorageUpdate",
				"summary": "Update the metadata for an item in blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the blob to get in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update a blob entry.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlobStorageUpdateRequest"
							},
							"examples": {
								"blobStorageUpdateRequestExample": {
									"value": {
										"metadata": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "blobStorageRemove",
				"summary": "Remove an item from blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the blob to remove in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/blob-storage/{id}/content": {
			"get": {
				"operationId": "blobStorageGetContent",
				"summary": "Get the content for an item in blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The content of the blob, which will be a specific mime type if one can be detected from the content (or set as encodingFormat in the entry), or defaults to application/octet-stream.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"type": "string",
									"format": "binary"
								},
								"examples": {
									"blobStorageGetContentResponseExample": {
										"summary": "Binary Data",
										"value": ""
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/telemetry/metric": {
			"post": {
				"operationId": "telemetryCreateMetric",
				"summary": "Create a telemetry metric",
				"tags": [
					"Telemetry"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create a new telemetry metric.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TelemetryMetric"
							},
							"examples": {
								"telemetryCreateMetricRequestExample": {
									"value": {
										"id": "my-counter",
										"label": "My Counter",
										"description": "This is my counter",
										"type": 0,
										"unit": "KG"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. my-counter"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "telemetryListEntries",
				"summary": "Get a list of the telemetry metrics",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "type",
						"description": "The type of the metric.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/MetricType"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for telemetry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TelemetryListResponse"
								},
								"examples": {
									"telemetryListResponseExample": {
										"value": {
											"entities": [
												{
													"id": "my-counter",
													"label": "My Counter",
													"type": 0,
													"unit": "KG"
												},
												{
													"id": "my-counter-2",
													"label": "My Counter 2",
													"type": 1,
													"unit": "M"
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/telemetry/metric/{id}": {
			"get": {
				"operationId": "telemetryGetMetric",
				"summary": "Get a telemetry metric and it's most recent value",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Get a telemetry metric response.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TelemetryGetMetricResponse"
								},
								"examples": {
									"telemetryGetMetricResponseExample": {
										"value": {
											"metric": {
												"id": "my-counter",
												"label": "My Counter",
												"description": "This is my counter",
												"type": 0,
												"unit": "KG"
											},
											"value": {
												"id": "aabbccdd11223445566",
												"ts": 1715252922273,
												"value": 10
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "telemetryUpdateMetric",
				"summary": "Update a telemetry metric",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update a telemetry metric.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TelemetryUpdateMetricRequest"
							},
							"examples": {
								"telemetryUpdateMetricRequestExample": {
									"value": {
										"label": "My New Label"
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "telemetryRemoveMetric",
				"summary": "Remove a telemetry metric and it's values.",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/telemetry/metric/{id}/value": {
			"post": {
				"operationId": "telemetryAddMetricValue",
				"summary": "Add a telemetry metric value",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Add a telemetry metric value.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TelemetryAddMetricValueRequest"
							},
							"examples": {
								"telemetryAddMetricValueRequestExample": {
									"value": {
										"value": 10
									}
								},
								"telemetryAddMetricValueIncRequestExample": {
									"value": {
										"value": "inc"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. aabbccdd11223445566"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "telemetryValuesListEntries",
				"summary": "Get a list of the values for a telemetry metric",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					},
					{
						"name": "timeStart",
						"description": "The start time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "timeEnd",
						"description": "The end time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for telemetry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TelemetryValuesListResponse"
								},
								"examples": {
									"telemetryValuesListResponseExample": {
										"value": {
											"metric": {
												"id": "my-counter",
												"label": "My Counter",
												"type": 0,
												"unit": "KG"
											},
											"entities": [
												{
													"id": "aabbccdd11223445566",
													"ts": 1715252922273,
													"value": 10
												},
												{
													"id": "aabbccdd11223445566",
													"ts": 1715252922274,
													"value": 11
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/logging": {
			"post": {
				"operationId": "loggingEntryCreate",
				"summary": "Create a log entry",
				"tags": [
					"Logging"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create a new log entry.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogEntry"
							},
							"examples": {
								"loggingEntryCreateInfoExample": {
									"value": {
										"level": "info",
										"message": "This is an information message",
										"source": "source",
										"ts": 1715252922273
									}
								},
								"loggingEntryCreateErrorExample": {
									"value": {
										"level": "info",
										"message": "This is an error message",
										"source": "source",
										"ts": 1715252922273,
										"error": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "loggingListEntries",
				"summary": "Get a list of the log entries",
				"tags": [
					"Logging"
				],
				"parameters": [
					{
						"name": "level",
						"description": "The level of the log entries to retrieve.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/LogLevel"
						},
						"example": "info"
					},
					{
						"name": "source",
						"description": "The source of the log entries to retrieve.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "timeStart",
						"description": "The start time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "timeEnd",
						"description": "The end time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for log entry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoggingListResponse"
								},
								"examples": {
									"listResponseExample": {
										"value": {
											"entities": [
												{
													"level": "info",
													"message": "This is an information message",
													"source": "source",
													"ts": 1715252922273
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/nft": {
			"post": {
				"operationId": "nftMint",
				"summary": "Mint an NFT",
				"tags": [
					"NFT"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Mint the data and return the NFT id.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NftMintRequest"
							},
							"examples": {
								"nftMintExample": {
									"value": {
										"tag": "MY-NFT",
										"immutableMetadata": {
											"docName": "bill-of-lading",
											"mimeType": "application/pdf",
											"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
										},
										"metadata": {
											"data": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/nft/{id}": {
			"get": {
				"operationId": "nftResolve",
				"summary": "Resolve an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to resolving the NFT.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NftResolveResponse"
								},
								"examples": {
									"nftResolveResponseExample": {
										"value": {
											"issuer": "did:iota:tst:0x85ef62ea94fc4eeeeeddf6acc3b566e988e613081d0b93cc54ed831ed4c18d44",
											"owner": "did:iota:tst:0x85ef62ea94fc4eeeeeddf6acc3b566e988e613081d0b93cc54ed831ed4c18d44",
											"tag": "MY-NFT",
											"immutableMetadata": {
												"docName": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"metadata": {
												"data": "AAAAA"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "nftBurn",
				"summary": "Burn an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to burn.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "nftUpdate",
				"summary": "Update an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to transfer in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update the mutable data for the NFT.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NftUpdateRequest"
							},
							"examples": {
								"nftUpdateExample": {
									"value": {
										"metadata": {
											"data": "AAAAA"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/nft/{id}/transfer": {
			"post": {
				"operationId": "nftTransfer",
				"summary": "Transfer an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to transfer in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Transfer the NFT and update the metadata.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NftTransferRequest"
							},
							"examples": {
								"nftTransferExample": {
									"value": {
										"recipientIdentity": "did:iota:tst:0x85ef62ea94fc4eeeeeddf6acc3b566e988e613081d0b93cc54ed831ed4c18d44",
										"recipientAddress": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv",
										"metadata": {
											"data": "AAAAA"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/attestation": {
			"post": {
				"operationId": "attestationCreate",
				"summary": "Attest a JSON-LD object",
				"tags": [
					"Attestation"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Attest the data and return the id of the attestation.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AttestationCreateRequest"
							},
							"examples": {
								"attestationCreateRequestExample": {
									"value": {
										"attestationObject": {
											"@context": "https://schema.org",
											"type": "DigitalDocument",
											"name": "bill-of-lading",
											"mimeType": "application/pdf",
											"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/attestation/{id}": {
			"get": {
				"operationId": "attestationGet",
				"summary": "Get an attestation",
				"tags": [
					"Attestation"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The attestation id to verify.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"responses": {
					"200": {
						"description": "The response to verifying the attestation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/attestation/AttestationInformation"
								},
								"examples": {
									"attestationGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": true
										}
									},
									"attestationVerifyResponseFailExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": false,
											"verificationFailure": "proofFailed"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/attestation/AttestationInformation"
								},
								"examples": {
									"attestationGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": true
										}
									},
									"attestationVerifyResponseFailExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": false,
											"verificationFailure": "proofFailed"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "attestationDestroy",
				"summary": "Destroy an attestation",
				"tags": [
					"Attestation"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The attestation id to destroy.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/attestation/{id}/transfer": {
			"put": {
				"operationId": "attestationTransfer",
				"summary": "Transfer an attestation",
				"tags": [
					"Attestation"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The attestation id to transfer.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Transfer the attestation to a new holder.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AttestationTransferRequest"
							},
							"examples": {
								"attestationTransferRequestExample": {
									"value": {
										"holderIdentity": "did:iota:tst:0x06ae1034f9f4af1b408a0b54e877bb476259666a14f221400d3746aecefa7105",
										"holderAddress": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv"
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/verifiable": {
			"post": {
				"operationId": "verifiableStorageCreate",
				"summary": "Create an item in verifiable storage",
				"tags": [
					"VerifiableStorage"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Store the data and return the verifiable storage item id.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifiableStorageCreateRequest"
							},
							"examples": {
								"verifiableStorageCreateRequestExample": {
									"value": {
										"data": "SGVsbG8gd29ybGQ="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to storing the verifiable storage item.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerifiableStorageCreateResponse"
								},
								"examples": {
									"verifiableStorageCreateResponseExample": {
										"value": {
											"receipt": {
												"@context": "https://schema.twindev.org/verifiable-storage/",
												"type": "VerifiableStorageIotaReceipt"
											},
											"id": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
										}
									}
								}
							}
						},
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/verifiable/{id}": {
			"put": {
				"operationId": "verifiableStorageUpdate",
				"summary": "Update an item in verifiable storage",
				"tags": [
					"VerifiableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the verifiable storage item to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update the data and return the receipt.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifiableStorageUpdateRequest"
							},
							"examples": {
								"verifiableStorageUpdateRequestExample": {
									"value": {
										"data": "SGVsbG8gd29ybGQ="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to updating the verifiable storage item.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
								},
								"examples": {
									"verifiableStorageUpdateResponseExample": {
										"value": {
											"@context": "https://schema.twindev.org/verifiable-storage/",
											"type": "VerifiableStorageIotaReceipt"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "verifiableStorageGet",
				"summary": "Get an verifiable storage item",
				"tags": [
					"VerifiableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the verifiable storage item to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Get the verifiable storage item.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifiableStorageGetRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to getting the verifiable storage item.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerifiableStorageGetResponse"
								},
								"examples": {
									"verifiableStorageGetResponseExample": {
										"value": {
											"data": "SGVsbG8gd29ybGQ=",
											"receipt": {
												"@context": "https://www.w3.org/ns/activitystreams",
												"type": "Create",
												"actor": "https://example.org/actor",
												"object": "https://example.org/object"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "verifiableStorageRemove",
				"summary": "Remove an item from verifiable storage",
				"tags": [
					"VerifiableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the verifiable storage item to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/immutable-proof": {
			"post": {
				"operationId": "immutableProofCreate",
				"summary": "Create a proof",
				"tags": [
					"Immutable Proof"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImmutableProofCreateRequest"
							},
							"examples": {
								"immutableProofCreateRequestExample": {
									"value": {
										"document": {
											"@context": "https://schema.org",
											"type": "Person",
											"name": "John Smith"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. test:1234567890"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/immutable-proof/{id}": {
			"get": {
				"operationId": "immutableProofGet",
				"summary": "Get a proof",
				"tags": [
					"Immutable Proof"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the immutable proof to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "application/json"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an immutable proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/immutable-proof/ImmutableProof"
								},
								"examples": {
									"immutableProofGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/immutable-proof/",
												"https://schema.twindev.org/common/"
											],
											"type": "ImmutableProof",
											"id": "ais:1234567890",
											"nodeIdentity": "node-1",
											"userIdentity": "user-1",
											"proofObjectId": "test:1234567890",
											"proofObjectHash": "EAOKyDN0mYQbBh91eMdVeroxQx1H4GfnRbmt6n/2L/Y=",
											"proof": {
												"@context": "https://www.w3.org/ns/credentials/v2",
												"type": "DataIntegrityProof",
												"cryptosuite": "eddsa-jcs-2022",
												"created": "2024-08-22T11:56:56.272Z",
												"proofPurpose": "assertionMethod",
												"proofValue": "7DdiPPYtxLjCD3wA1po2rv..."
											}
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/immutable-proof/ImmutableProof"
								},
								"examples": {
									"immutableProofJsonLdGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/immutable-proof/",
												"https://schema.twindev.org/common/"
											],
											"type": "ImmutableProof",
											"id": "ais:1234567890",
											"nodeIdentity": "node-1",
											"userIdentity": "user-1",
											"proofObjectId": "test:1234567890",
											"proofObjectHash": "EAOKyDN0mYQbBh91eMdVeroxQx1H4GfnRbmt6n/2L/Y=",
											"proof": {
												"@context": "https://www.w3.org/ns/credentials/v2",
												"type": "DataIntegrityProof",
												"cryptosuite": "eddsa-jcs-2022",
												"created": "2024-08-22T11:56:56.272Z",
												"proofPurpose": "assertionMethod",
												"proofValue": "7DdiPPYtxLjCD3wA1po2rv..."
											}
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/immutable-proof/{id}/verify": {
			"get": {
				"operationId": "immutableProofVerify",
				"summary": "Verify a proof",
				"tags": [
					"Immutable Proof"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the immutable proof to verify.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying an immutable proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/immutable-proof/ImmutableProofVerification"
								},
								"examples": {
									"immutableProofVerifyResponseExample": {
										"value": {
											"@context": "https://schema.twindev.org/immutable-proof/",
											"type": "ImmutableProofVerification",
											"verified": true
										}
									},
									"immutableProofVerifyResponseFailExample": {
										"value": {
											"@context": "https://schema.twindev.org/immutable-proof/",
											"type": "ImmutableProofVerification",
											"verified": false,
											"failure": "proofTypeMismatch"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/rule-group/{id}": {
			"put": {
				"operationId": "dataProcessingSetRuleGroup",
				"summary": "Store a rule group for extraction.",
				"tags": [
					"Data Processing"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The rule id to set.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-rule-group"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Set a rule group.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataProcessingRuleGroupSetRequest"
							},
							"examples": {
								"dataProcessingRuleGroupSetRequestExample": {
									"value": {
										"label": "My Rule Group",
										"rules": [
											{
												"source": "$.foo",
												"target": "goo",
												"coerce": "bigint"
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "dataProcessingGetRuleGroup",
				"summary": "Get a rule group for extraction.",
				"tags": [
					"Data Processing"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The rule id to set.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-rule-group"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Get a rule group response.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RuleGroup"
								},
								"examples": {
									"dataProcessingRuleGroupSetResponseExample": {
										"value": {
											"id": "my-rule-group",
											"label": "My Rule Group",
											"rules": [
												{
													"source": "$.foo",
													"target": "goo",
													"coerce": "bigint"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "dataProcessingRemoveRuleGroup",
				"summary": "Remove an extraction rule group.",
				"tags": [
					"Data Processing"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The rule id to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-rule-group"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/extract": {
			"post": {
				"operationId": "dataProcessingExtract",
				"summary": "Extract data from a binary source using the specified rule group.",
				"tags": [
					"Data Processing"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Perform an extraction on the data with the specified ruleset.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataProcessingExtractRequest"
							},
							"examples": {
								"dataProcessingExtractRequestExample": {
									"value": {
										"ruleGroupId": "my-rule-group",
										"data": "eyJmb28iOiAiYmFyIn0="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to extracting data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProcessingExtractResponse"
								},
								"examples": {
									"dataProcessingExtractResponseExample": {
										"value": {
											"foo": "bar"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/convert": {
			"post": {
				"operationId": "dataProcessingConvert",
				"summary": "Convert data from a binary source and return structured object.",
				"tags": [
					"Data Processing"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Perform a conversion on the data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataProcessingConvertRequest"
							},
							"examples": {
								"dataProcessingConvertRequestExample": {
									"value": {
										"data": "eyJmb28iOiAiYmFyIn0="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to converting data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProcessingConvertResponse"
								},
								"examples": {
									"dataProcessingConvertResponseExample": {
										"value": {
											"foo": "bar"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/rule-group": {
			"get": {
				"operationId": "dataProcessingListRuleGroup",
				"summary": "Get a list with rule groups for extraction.",
				"tags": [
					"Data Processing"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for rule group entry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProcessingRuleGroupListResponse"
								},
								"examples": {
									"ruleGroupListResponseExample": {
										"value": {
											"entities": [
												{
													"id": "my-rule-group",
													"label": "My Rule Group",
													"rules": [
														{
															"source": "$.foo",
															"target": "goo",
															"coerce": "bigint"
														}
													]
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management": {
			"post": {
				"operationId": "DocumentManagementSet",
				"summary": "Store a document in an auditable item graph vertex and add its content to blob storage.",
				"tags": [
					"Document Management"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a document as an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DocumentManagementCreateRequest"
							},
							"examples": {
								"DocumentManagementCreateRequestExample": {
									"value": {
										"documentId": "2721000",
										"documentIdFormat": "bol",
										"documentCode": "unece:DocumentCodeList#705",
										"blob": "SGVsbG8gV29ybGQ=",
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										},
										"createAttestation": true
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. aig:123456"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "DocumentManagementQuery",
				"summary": "Query the items from an auditable item graph vertex",
				"tags": [
					"Document Management"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to query the documents from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
								},
								"examples": {
									"DocumentManagementQueryResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/aig/"
											],
											"type": [
												"ItemList",
												"AuditableItemGraphVertexList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/"
													],
													"id": "aig:c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7",
													"type": "AuditableItemGraphVertex",
													"dateCreated": "2024-08-22T04:13:20.000Z",
													"aliases": [
														{
															"@context": [
																"https://schema.twindev.org/aig/"
															],
															"id": "test-id-0",
															"type": "AuditableItemGraphAlias",
															"dateCreated": "2024-08-22T04:13:20.000Z"
														}
													],
													"resources": [
														{
															"@context": "https://schema.twindev.org/aig/",
															"type": "AuditableItemGraphResource",
															"dateCreated": "2024-08-22T04:13:20.000Z",
															"resourceObject": {
																"@context": [
																	"https://schema.twindev.org/documents/",
																	"https://schema.twindev.org/common/",
																	"https://schema.org"
																],
																"type": "Document",
																"id": "test-id-0:0",
																"documentId": "test-id-0",
																"documentCode": "unece:DocumentCodeList#705",
																"documentRevision": 0,
																"annotationObject": {
																	"@context": "https://schema.org",
																	"type": "DigitalDocument",
																	"name": "bill-of-lading"
																},
																"blobHash": "sha256:E3Duqrp6bHojSx+CzDttAToAiP1eFkCDAPBbKLABVGM=",
																"blobStorageId": "blob:memory:1370eeaaba7a6c7a234b1f82cc3b6d013a0088fd5e16408300f05b28b0015463",
																"dateCreated": "2024-08-22T04:13:20.000Z",
																"nodeIdentity": "did:entity-storage:0x0101010101010101010101010101010101010101010101010101010101010101",
																"userIdentity": "did:entity-storage:0x0404040404040404040404040404040404040404040404040404040404040404"
															}
														}
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management/{auditableItemGraphDocumentId}": {
			"put": {
				"operationId": "DocumentManagementUpdate",
				"summary": "Update a document in an auditable item graph vertex and add its content to blob storage.",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update a document as an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DocumentManagementUpdateRequest"
							},
							"examples": {
								"DocumentManagementUpdateRequestExample": {
									"value": {
										"blob": "SGVsbG8gV29ybGQ=",
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "DocumentManagementGet",
				"summary": "Get the data for a document from document management",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a document and optionally revisions from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/DocumentList"
								},
								"examples": {
									"DocumentManagementGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/documents/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "Document",
													"id": "2721000:0",
													"documentId": "2721000",
													"documentIdFormat": "bol",
													"documentCode": "unece:DocumentCodeList#705",
													"documentRevision": 0,
													"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"blobHash": "sha256:123456",
													"dateCreated": "2024-01-01T00:00:00Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
													"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/DocumentList"
								},
								"examples": {
									"DocumentManagementGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/documents/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "Document",
													"id": "2721000:0",
													"documentId": "2721000",
													"documentIdFormat": "bol",
													"documentCode": "unece:DocumentCodeList#705",
													"documentRevision": 0,
													"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"blobHash": "sha256:123456",
													"dateCreated": "2024-01-01T00:00:00Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
													"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management/{auditableItemGraphDocumentId}/{revision}": {
			"get": {
				"operationId": "DocumentManagementGetRevision",
				"summary": "Get the data for a document revision from document management",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					},
					{
						"name": "revision",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a document revision from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/Document"
								},
								"examples": {
									"DocumentManagementGetRevisionResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Document",
											"id": "2721000:0",
											"documentId": "2721000",
											"documentIdFormat": "bol",
											"documentCode": "unece:DocumentCodeList#705",
											"documentRevision": 1,
											"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"blobHash": "sha256:123456",
											"dateCreated": "2024-01-01T00:00:00Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
											"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/Document"
								},
								"examples": {
									"DocumentManagementGetRevisionResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Document",
											"id": "2721000:0",
											"documentId": "2721000",
											"documentIdFormat": "bol",
											"documentCode": "unece:DocumentCodeList#705",
											"documentRevision": 1,
											"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"blobHash": "sha256:123456",
											"dateCreated": "2024-01-01T00:00:00Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
											"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DocumentManagementRemove",
				"summary": "Remove an document from an auditable item graph vertex",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:1234"
					},
					{
						"name": "revision",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/aig": {
			"post": {
				"operationId": "auditableItemGraphCreate",
				"summary": "Create a new graph vertex",
				"tags": [
					"Auditable Item Graph"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemGraphCreateRequest"
							},
							"examples": {
								"auditableItemGraphCreateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										},
										"aliases": [
											{
												"id": "bar456",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "foo321",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"resources": [
											{
												"id": "resource1",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "resource2",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"edges": [
											{
												"id": "edge1",
												"edgeRelationships": [
													"frenemy"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "edge2",
												"edgeRelationships": [
													"end"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. aig:1234567890"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "auditableItemGraphList",
				"summary": "Query graph vertices by id or alias",
				"tags": [
					"Auditable Item Graph"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id or alias to try and find.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "idMode",
						"description": "Which field to look in with the id, defaults to both.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"id",
								"alias",
								"both"
							]
						}
					},
					{
						"name": "resourceTypes",
						"description": "Include vertices with specific resource types, comma separated.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "conditions",
						"description": "The conditions to filter the streams, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"description": "The order for the results, default to dateCreated.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"dateCreated",
								"dateModified"
							]
						}
					},
					{
						"name": "orderByDirection",
						"description": "The direction for the order, defaults to desc.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "properties",
						"description": "The properties to return as a comma separated list, defaults to \"id,dateCreated,aliases,annotationObject\".",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response to getting the a list of the vertices with matching ids or aliases.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
								},
								"examples": {
									"auditableItemGraphListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemGraphVertexList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphVertex",
													"id": "0101010101010101010101010101010101010101010101010101010101010101",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"aliases": [
														{
															"@context": [
																"https://schema.twindev.org/aig/",
																"https://schema.twindev.org/common/",
																"https://schema.org"
															],
															"type": "AuditableItemGraphAlias",
															"id": "foo4",
															"dateCreated": "2024-08-22T11:55:16.271Z"
														}
													]
												}
											],
											"nextItem": "1"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
								},
								"examples": {
									"auditableItemGraphJsonLdListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemGraphVertexList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphVertex",
													"id": "0101010101010101010101010101010101010101010101010101010101010101",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"aliases": [
														{
															"@context": [
																"https://schema.twindev.org/aig/",
																"https://schema.twindev.org/common/",
																"https://schema.org"
															],
															"type": "AuditableItemGraphAlias",
															"id": "foo4",
															"dateCreated": "2024-08-22T11:55:16.271Z"
														}
													]
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/aig/{id}": {
			"get": {
				"operationId": "auditableItemGraphGet",
				"summary": "Get a graph vertex",
				"tags": [
					"Auditable Item Graph"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the vertex to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:1234567890"
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted aliases, resource, edges, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "includeChangesets",
						"description": "Whether to include the changesets of the vertex, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifySignatureDepth",
						"description": "How many signatures to verify, none, current or all, defaults to \"none\".",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/VerifyDepth"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "application/json"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertex"
								},
								"examples": {
									"auditableItemGraphGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "AuditableItemGraphVertex",
											"id": "aig:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"aliases": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphAlias",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z"
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertex"
								},
								"examples": {
									"auditableItemGraphJsonLdGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "AuditableItemGraphVertex",
											"id": "aig:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"aliases": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphAlias",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"id": "tst:1234567890"
												}
											]
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "auditableItemGraphUpdate",
				"summary": "Update a graph vertex",
				"tags": [
					"Auditable Item Graph"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the vertex to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemGraphUpdateRequest"
							},
							"examples": {
								"auditableItemGraphUpdateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										},
										"aliases": [
											{
												"id": "bar456",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "foo321",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"resources": [
											{
												"id": "resource1",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "resource2",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"edges": [
											{
												"id": "edge1",
												"edgeRelationships": [
													"frenemy"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "edge2",
												"edgeRelationships": [
													"end"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais": {
			"post": {
				"operationId": "auditableItemStreamCreate",
				"summary": "Create a new stream",
				"tags": [
					"Auditable Item Stream"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create an auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamCreateRequest"
							},
							"examples": {
								"auditableItemStreamCreateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										},
										"entries": [
											{
												"entryObject": {
													"@context": "https://schema.org",
													"@type": "Event",
													"startDate": "2011-04-09T20:00:00Z",
													"description": "A description of the event"
												}
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. ais:1234567890"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "auditableItemStreamList",
				"summary": "Query streams",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "conditions",
						"description": "The conditions to filter the streams, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"description": "The order for the results, default to created.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"dateCreated",
								"dateModified"
							]
						}
					},
					{
						"name": "orderByDirection",
						"description": "The direction for the order, defaults to desc.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "properties",
						"description": "The properties to return as a comma separated list, defaults to \"id,object\".",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response to getting the a list of the streams.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamList"
								},
								"examples": {
									"auditableItemStreamListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStream",
													"id": "ais:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"dateModified": "2024-08-22T11:55:16.271Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "Note",
														"content": "This is a simple note"
													},
													"nodeIdentity": "tst:1234567890",
													"userIdentity": "tst:1234567890",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"immutableInterval": 10
												}
											],
											"nextItem": "1"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamList"
								},
								"examples": {
									"auditableItemStreamJsonLdListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStream",
													"id": "ais:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"dateModified": "2024-08-22T11:55:16.271Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "Note",
														"content": "This is a simple note"
													},
													"nodeIdentity": "tst:1234567890",
													"userIdentity": "tst:1234567890",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"immutableInterval": 10
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}": {
			"get": {
				"operationId": "auditableItemStreamGet",
				"summary": "Get a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "includeEntries",
						"description": "Whether to include the entries, defaults to false. The entries will be limited to the first page of entries in date descending order. If you want to get more entries you can use the returned cursor with the get entries method.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted entries, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifyStream",
						"description": "Should the stream be verified, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifyEntries",
						"description": "Should the entries be verified, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "application/json"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStream"
								},
								"examples": {
									"auditableItemStreamGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStream",
											"id": "ais:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"nodeIdentity": "tst:1234567890",
											"userIdentity": "tst:1234567890",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"immutableInterval": 10,
											"entries": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStream"
								},
								"examples": {
									"auditableItemStreamJsonLdGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStream",
											"id": "ais:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"nodeIdentity": "tst:1234567890",
											"userIdentity": "tst:1234567890",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"immutableInterval": 10,
											"entries": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											]
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "auditableItemStreamUpdate",
				"summary": "Update a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update an auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamUpdateRequest"
							},
							"examples": {
								"auditableItemStreamUpdateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "auditableItemStreamDelete",
				"summary": "Delete a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "auditableItemStreamCreateEntry",
				"summary": "Create a new stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to create the entry in.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Append to an auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamCreateEntryRequest"
							},
							"examples": {
								"auditableItemStreamCreateEntryRequestExample": {
									"value": {
										"entryObject": {
											"@context": "https://schema.org",
											"@type": "Event",
											"startDate": "2011-04-09T20:00:00Z",
											"description": "A description of the event"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. ais:1234567890:01010101010"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/{entryId}": {
			"get": {
				"operationId": "auditableItemStreamGetEntry",
				"summary": "Get a stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to update the get in.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "The id of the entry to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					},
					{
						"name": "verifyEntry",
						"description": "Verify the entry, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entry.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntry"
								},
								"examples": {
									"auditableItemStreamGetEntryResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStreamEntry",
											"id": "tst:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"index": 0,
											"entryObject": {
												"@context": "https://schema.org",
												"@type": "Event",
												"startDate": "2011-04-09T20:00:00Z",
												"description": "A description of the event"
											}
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntry"
								},
								"examples": {
									"auditableItemStreamJsonLdGetEntryResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStreamEntry",
											"id": "tst:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"index": 0,
											"entryObject": {
												"@context": "https://schema.org",
												"@type": "Event",
												"startDate": "2011-04-09T20:00:00Z",
												"description": "A description of the event"
											}
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "auditableItemStreamDeleteEntry",
				"summary": "Delete an entry from the stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "auditableItemStreamUpdateEntry",
				"summary": "Update a stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to update the entry in.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "The id of the entry to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update an entry in the auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamUpdateEntryRequest"
							},
							"examples": {
								"auditableItemStreamUpdateRequestExample": {
									"value": {
										"entryObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/{entryId}/object": {
			"get": {
				"operationId": "auditableItemStreamGetEntryObject",
				"summary": "Get a stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entry object.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
								},
								"examples": {
									"auditableItemStreamGetEntryObjectResponseExample": {
										"value": {
											"@context": "https://schema.org",
											"@type": "Event",
											"startDate": "2011-04-09T20:00:00Z",
											"description": "A description of the event"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/entries": {
			"get": {
				"operationId": "auditableItemStreamListEntries",
				"summary": "Get the entry objects in a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "conditions",
						"description": "The conditions to filter the stream, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted entries, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifyEntries",
						"description": "Should the entries be verified, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "order",
						"description": "Retrieve the entries in ascending/descending time order, defaults to Ascending.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "pageSize",
						"description": "How many entries to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "Cursor to use for next chunk of data.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entries.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryList"
								},
								"examples": {
									"auditableItemStreamListEntriesResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamEntryList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											],
											"nextItem": "1"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryList"
								},
								"examples": {
									"auditableItemStreamJsonLdListEntriesResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamEntryList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/entries/objects": {
			"get": {
				"operationId": "auditableItemStreamListEntryObjects",
				"summary": "Get the entry objects in a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "conditions",
						"description": "The conditions to filter the stream, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted entries, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "order",
						"description": "Retrieve the entries in ascending/descending time order, defaults to Ascending.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "pageSize",
						"description": "How many entries to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "Cursor to use for next chunk of data.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entries objects.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryObjectList"
								},
								"examples": {
									"auditableItemStreamListEntryObjectsResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamEntryObjectList"
											],
											"itemListElement": [
												{
													"@context": "https://schema.org",
													"@type": "Event",
													"startDate": "2011-04-09T20:00:00Z",
													"description": "A description of the event"
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participant-credentials": {
			"post": {
				"operationId": "compliancePresentationRequest",
				"summary": "Present a Compliance Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"compliancePresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offering-credentials": {
			"post": {
				"operationId": "serviceOfferingPresentationRequest",
				"summary": "Present a Service Offering Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"serviceOfferingPresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resource-credentials": {
			"post": {
				"operationId": "dataResourcePresentationRequest",
				"summary": "Present a Data Resource Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"dataResourcePresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connector-credentials": {
			"post": {
				"operationId": "dataSpaceConnectorPresentationRequest",
				"summary": "Present a Data Space Connector Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"dataSpaceConnectorPresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participants": {
			"get": {
				"operationId": "federatedCatalogueListParticipants",
				"summary": "Get a list of the participant entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The participant Id.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "registrationNumber",
						"description": "The legal registration number.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "abc"
					},
					{
						"name": "lrnType",
						"description": "The legal registration number type.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for participant list query",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ParticipantList"
								},
								"examples": {
									"participantListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "did:iota:xxx",
													"type": "LegalPerson",
													"registrationNumber": {
														"type": "LocalRegistrationNumber",
														"local": "P1234567"
													},
													"legalName": "A Inc.",
													"issuer": "did:iota:zzz",
													"legalAddress": {
														"type": "Address",
														"countryCode": "KE"
													},
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participants/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetParticipant",
				"summary": "Get a participant",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the entry (Participant, Service, etc.) to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:123456"
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for a Participant Entry.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ParticipantEntry"
								},
								"examples": {
									"participantGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "did:iota:xxx",
											"type": "LegalPerson",
											"registrationNumber": {
												"type": "LocalRegistrationNumber",
												"local": "P1234567"
											},
											"legalName": "A Inc.",
											"issuer": "did:iota:zzz",
											"legalAddress": {
												"type": "Address",
												"countryCode": "KE"
											},
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offerings": {
			"get": {
				"operationId": "federatedCatalogueListServices",
				"summary": "Get a list of the service entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The Service Offering Id.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "providedBy",
						"description": "The service provider.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for Service Offering list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ServiceOfferingList"
								},
								"examples": {
									"serviceOfferingListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "http://example.org/is123456",
													"name": "Service 1",
													"type": "ServiceOffering",
													"servicePolicy": [
														{
															"@context": [
																"https://www.w3.org/ns/odrl/2/",
																{
																	"twin": "https://schema.twindev.org/w3c-odrl/",
																	"jsonPathSelector": "twin:jsonPathSelector"
																}
															],
															"@type": "Agreement",
															"uid": "http://example.com/policy:1010",
															"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
															"assignee": "did:iota:testnet:0x119adb64d01d3b0fa0d308c67db90ab1c6e0df6aebe5b7e0250783f57cd10c21",
															"permission": [
																{
																	"target": {
																		"type": "https://vocabulary.uncefact.org/Document",
																		"refinement": {
																			"leftOperand": {
																				"@id": "https://w3id.org/twin/odrl/propertyValue",
																				"jsonPathSelector": ".documentTypeCode"
																			},
																			"operator": "eq",
																			"rightOperand": "https://vocabulary.uncefact.org/DocumentCodeList#331"
																		}
																	},
																	"action": "extract"
																}
															]
														}
													],
													"endpoint": {
														"type": "Endpoint",
														"endpointURL": "https://endpoint.example.org/api"
													},
													"issuer": "did:iota:7890",
													"providedBy": "did:iota:1234567",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offerings/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetService",
				"summary": "Get a Service Offering entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://my-services.example.org/service1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ServiceOfferingEntry"
								},
								"examples": {
									"serviceOfferingGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "http://example.org/is123456",
											"name": "Service 1",
											"type": "ServiceOffering",
											"servicePolicy": [
												{
													"@context": [
														"https://www.w3.org/ns/odrl/2/",
														{
															"twin": "https://schema.twindev.org/w3c-odrl/",
															"jsonPathSelector": "twin:jsonPathSelector"
														}
													],
													"@type": "Agreement",
													"uid": "http://example.com/policy:1010",
													"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
													"assignee": "did:iota:testnet:0x119adb64d01d3b0fa0d308c67db90ab1c6e0df6aebe5b7e0250783f57cd10c21",
													"permission": [
														{
															"target": {
																"type": "https://vocabulary.uncefact.org/Document",
																"refinement": {
																	"leftOperand": {
																		"@id": "https://w3id.org/twin/odrl/propertyValue",
																		"jsonPathSelector": ".documentTypeCode"
																	},
																	"operator": "eq",
																	"rightOperand": "https://vocabulary.uncefact.org/DocumentCodeList#331"
																}
															},
															"action": "extract"
														}
													]
												}
											],
											"endpoint": {
												"type": "Endpoint",
												"endpointURL": "https://endpoint.example.org/api"
											},
											"issuer": "did:iota:7890",
											"providedBy": "did:iota:1234567",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resources": {
			"get": {
				"operationId": "federatedCatalogueListResources",
				"summary": "Get a list of the data resource entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The Id of the Data Resource.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "producedBy",
						"description": "The service provider.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response fo data resource list.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataResourceList"
								},
								"examples": {
									"dataResourceListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "http://example.org/is123456",
													"name": "Data Resource 1",
													"type": "DataResource",
													"copyrightOwnedBy": "did:iota:1234",
													"license": "http://licenses.example.org/12345",
													"resourcePolicy": [
														{
															"@context": "https://www.w3.org/ns/odrl/2/",
															"@type": "Offer",
															"uid": "http://example.com/policy:1010",
															"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
															"permission": [
																{
																	"target": {
																		"type": "https://vocabulary.uncefact.org/Document"
																	},
																	"action": "extract"
																}
															]
														}
													],
													"exposedThrough": "https://ds-connectors.example.org/ds1",
													"producedBy": "did:iota:1234567",
													"issuer": "did:iota:987654",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resources/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetDataResource",
				"summary": "Get a Data Resource entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://data-resources.example.org/drs1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataResourceEntry"
								},
								"examples": {
									"dataResourceGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "http://example.org/is123456",
											"name": "Data Resource 1",
											"type": "DataResource",
											"copyrightOwnedBy": "did:iota:1234",
											"license": "http://licenses.example.org/12345",
											"resourcePolicy": [
												{
													"@context": "https://www.w3.org/ns/odrl/2/",
													"@type": "Offer",
													"uid": "http://example.com/policy:1010",
													"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
													"permission": [
														{
															"target": {
																"type": "https://vocabulary.uncefact.org/Document"
															},
															"action": "extract"
														}
													]
												}
											],
											"exposedThrough": "https://ds-connectors.example.org/ds1",
											"producedBy": "did:iota:1234567",
											"issuer": "did:iota:987654",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connectors": {
			"get": {
				"operationId": "federatedCatalogueListDataSpaceConnectors",
				"summary": "Get a list of the Data Space connectors entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the Data Space Connector.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "maintainedBy",
						"description": "The maintainer",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for Data Space Connector list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataSpaceConnectorList"
								},
								"examples": {
									"dataSpaceConnectorListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "https://my-ds-connectors.example.org/ds-connector-ABCD",
													"type": [
														"DataExchangeComponent",
														"DataSpaceConnector"
													],
													"identity": "did:iota:testnet:123456",
													"defaultEndpoint": {
														"type": "Endpoint",
														"endpointURL": "https://my-twin-node.example.org:9000/twin-ds-connector"
													},
													"subscriptionActivityEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/subscriptions"
													},
													"pushActivityEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/notify"
													},
													"pullDataEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/data"
													},
													"maintainer": "did:iota:99999",
													"offeredResource": [
														"https://my-data-resource.example.org"
													],
													"issuer": "did:iota:987654",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connectors/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetDataSpaceConnector",
				"summary": "Get a Data Space Connector entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://ds-connectors.example.org/ds1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataSpaceConnectorEntry"
								},
								"examples": {
									"dataSpaceConnectorGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "https://my-ds-connectors.example.org/ds-connector-ABCD",
											"type": [
												"DataExchangeComponent",
												"DataSpaceConnector"
											],
											"identity": "did:iota:testnet:123456",
											"defaultEndpoint": {
												"type": "Endpoint",
												"endpointURL": "https://my-twin-node.example.org:9000/twin-ds-connector"
											},
											"subscriptionActivityEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/subscriptions"
											},
											"pushActivityEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/notify"
											},
											"pullDataEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/data"
											},
											"maintainer": "did:iota:99999",
											"offeredResource": [
												"https://my-data-resource.example.org"
											],
											"issuer": "did:iota:987654",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"AttestationCreateRequest": {
				"type": "object",
				"properties": {
					"attestationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"namespace": {
						"type": "string",
						"description": "The namespace of the connector to use for the attestation, defaults to component configured namespace."
					}
				},
				"required": [
					"attestationObject"
				],
				"additionalProperties": false,
				"description": "The data to be used in the signing."
			},
			"AttestationTransferRequest": {
				"type": "object",
				"properties": {
					"holderIdentity": {
						"type": "string",
						"description": "The new holder identity."
					},
					"holderAddress": {
						"type": "string",
						"description": "The new holder address."
					}
				},
				"required": [
					"holderIdentity",
					"holderAddress"
				],
				"additionalProperties": false,
				"description": "The parameters to be used in the transfer."
			},
			"AuditableItemGraphCreateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"aliases": {
						"type": "array",
						"items": false,
						"description": "Alternative aliases that can be used to identify the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"aliasFormat": {
										"type": "string"
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					},
					"resources": {
						"type": "array",
						"items": false,
						"description": "The resources attached to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"resourceObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"additionalProperties": false
							}
						]
					},
					"edges": {
						"type": "array",
						"items": false,
						"description": "The edges connected to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"edgeRelationships": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id",
									"edgeRelationships"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the vertex."
			},
			"AuditableItemGraphUpdateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"aliases": {
						"type": "array",
						"items": false,
						"description": "Alternative aliases that can be used to identify the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"aliasFormat": {
										"type": "string"
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					},
					"resources": {
						"type": "array",
						"items": false,
						"description": "The resources attached to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"resourceObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"additionalProperties": false
							}
						]
					},
					"edges": {
						"type": "array",
						"items": false,
						"description": "The edges connected to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"edgeRelationships": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id",
									"edgeRelationships"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the vertex."
			},
			"AuditableItemStreamCreateEntryRequest": {
				"type": "object",
				"properties": {
					"entryObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"entryObject"
				],
				"additionalProperties": false,
				"description": "The data to be used in the stream."
			},
			"AuditableItemStreamCreateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"entries": {
						"type": "array",
						"items": false,
						"description": "The entries for the stream.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"entryObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"entryObject"
								],
								"additionalProperties": false
							}
						]
					},
					"immutableInterval": {
						"type": "number",
						"description": "After how many entries do we add immutable checks, defaults to service configured value. A value of 0 will disable immutable checks, 1 will be every item, or any other integer for an interval."
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the stream."
			},
			"AuditableItemStreamUpdateEntryRequest": {
				"type": "object",
				"properties": {
					"entryObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"entryObject"
				],
				"additionalProperties": false,
				"description": "The data to be used in the entry."
			},
			"AuditableItemStreamUpdateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the stream."
			},
			"BlobStorageCreateRequest": {
				"type": "object",
				"properties": {
					"blob": {
						"type": "string",
						"description": "The data to store in base64 encoding."
					},
					"encodingFormat": {
						"type": "string",
						"description": "The mime type of the blob, will be detected if left undefined."
					},
					"fileExtension": {
						"type": "string",
						"description": "The extension of the blob, will be detected if left undefined."
					},
					"metadata": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"disableEncryption": {
						"type": "boolean",
						"description": "Disables encryption if enabled by default.",
						"default": false
					},
					"compress": {
						"$ref": "https://schema.twindev.org/blob-storage/BlobStorageCompressionType"
					},
					"overrideVaultKeyId": {
						"type": "string",
						"description": "Use a different vault key id for encryption, if not provided the default vault key id will be used.",
						"default": "undefined"
					},
					"namespace": {
						"type": "string",
						"description": "The namespace to store the data in, defaults to component configured namespace."
					}
				},
				"required": [
					"blob"
				],
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"BlobStorageUpdateRequest": {
				"type": "object",
				"properties": {
					"encodingFormat": {
						"type": "string",
						"description": "The mime type of the blob, will be detected if left undefined."
					},
					"fileExtension": {
						"type": "string",
						"description": "The extension of the blob, will be detected if left undefined."
					},
					"metadata": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"CoerceType": {
				"anyOf": [
					{
						"type": "string",
						"const": "string",
						"description": "String."
					},
					{
						"type": "string",
						"const": "number",
						"description": "Number."
					},
					{
						"type": "string",
						"const": "integer",
						"description": "Integer."
					},
					{
						"type": "string",
						"const": "boolean",
						"description": "Boolean."
					},
					{
						"type": "string",
						"const": "bigint",
						"description": "Big Integer."
					},
					{
						"type": "string",
						"const": "date",
						"description": "Date."
					},
					{
						"type": "string",
						"const": "datetime",
						"description": "Date Time."
					},
					{
						"type": "string",
						"const": "time",
						"description": "Time."
					},
					{
						"type": "string",
						"const": "object",
						"description": "Object."
					},
					{
						"type": "string",
						"const": "uint8array",
						"description": "Uint8Array."
					}
				],
				"description": "The types the extracted data can be coerced to."
			},
			"CompliancePresentationRequest": {
				"type": "string",
				"description": "The data to be used in the create."
			},
			"ConflictResponse": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"conflicts": {
						"type": "array",
						"items": false,
						"description": "The conflicting items.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"conflicts",
					"message",
					"name"
				],
				"description": "The body which contains the error."
			},
			"DataProcessingConvertRequest": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string",
						"description": "The binary data to convert in base64."
					},
					"overrideMimeType": {
						"type": "string",
						"description": "Use the specified mime type for conversion, will auto detect if undefined."
					}
				},
				"required": [
					"data"
				],
				"additionalProperties": false,
				"description": "The params for the convert."
			},
			"DataProcessingConvertResponse": {
				"description": "The converted data as an object."
			},
			"DataProcessingExtractRequest": {
				"type": "object",
				"properties": {
					"ruleGroupId": {
						"type": "string",
						"description": "The rule group id to use for the extraction."
					},
					"data": {
						"type": "string",
						"description": "The binary data to extract from in base64."
					},
					"overrideExtractorType": {
						"type": "string",
						"description": "The default extractor connector will be used if not specified."
					},
					"overrideMimeType": {
						"type": "string",
						"description": "An optional override for the mime type for conversion, will auto detect if not provided."
					}
				},
				"required": [
					"ruleGroupId",
					"data"
				],
				"additionalProperties": false,
				"description": "The params for the extract."
			},
			"DataProcessingExtractResponse": {
				"description": "The extracted data in extended JSON format which keeps types like bigint, dates and uint8array intact. Use ObjectHelper.fromExtended to get the object with original types."
			},
			"DataProcessingRuleGroupListResponse": {
				"type": "object",
				"properties": {
					"entities": {
						"type": "array",
						"items": false,
						"description": "The entities, which can be partial if a limited keys list was provided.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/RuleGroup"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"DataProcessingRuleGroupSetRequest": {
				"type": "object",
				"properties": {
					"label": {
						"type": "string",
						"description": "The label for the rule group."
					},
					"rules": {
						"type": "array",
						"items": false,
						"description": "The rules.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/Rule"
							}
						]
					}
				},
				"required": [
					"label",
					"rules"
				],
				"additionalProperties": false,
				"description": "The data to be used in the store."
			},
			"DocumentManagementCreateRequest": {
				"type": "object",
				"properties": {
					"documentId": {
						"type": "string",
						"description": "The document id to create."
					},
					"documentIdFormat": {
						"type": "string",
						"description": "The format of the document identifier."
					},
					"documentCode": {
						"$ref": "#/components/schemas/UneceDocumentCodes"
					},
					"blob": {
						"type": "string",
						"description": "The data to create the document with, in base64."
					},
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"auditableItemGraphEdges": {
						"type": "array",
						"items": false,
						"description": "The auditable item graph vertices to connect the document to.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"addAlias": {
										"type": "boolean"
									},
									"aliasAnnotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					},
					"createAttestation": {
						"type": "boolean",
						"description": "Flag to create an attestation for the document, defaults to false."
					},
					"addAlias": {
						"type": "boolean",
						"description": "Flag to add the document id as an alias to the aig vertex, defaults to true."
					},
					"aliasAnnotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"documentId",
					"documentCode",
					"blob"
				],
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"DocumentManagementUpdateRequest": {
				"type": "object",
				"properties": {
					"blob": {
						"type": "string",
						"description": "The data to create the document with, in base64."
					},
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"auditableItemGraphEdges": {
						"type": "array",
						"items": false,
						"description": "The auditable item graph vertices to connect the document to.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"addAlias": {
										"type": "boolean"
									},
									"aliasAnnotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"HealthInfo": {
				"type": "object",
				"properties": {
					"status": {
						"$ref": "#/components/schemas/HealthStatus"
					},
					"components": {
						"type": "array",
						"items": false,
						"description": "The status of the components.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "The name of the component."
									},
									"status": {
										"$ref": "#/components/schemas/HealthStatus"
									},
									"details": {
										"type": "string",
										"description": "The details for the status."
									}
								},
								"required": [
									"name",
									"status"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"required": [
					"status"
				],
				"additionalProperties": false,
				"description": "The status of the server."
			},
			"HealthStatus": {
				"anyOf": [
					{
						"type": "string",
						"const": "ok",
						"description": "OK."
					},
					{
						"type": "string",
						"const": "warning",
						"description": "Warning."
					},
					{
						"type": "string",
						"const": "error",
						"description": "Error."
					}
				],
				"description": "The health status of the component."
			},
			"IdentityCreateRequest": {
				"type": "object",
				"properties": {
					"namespace": {
						"type": "string",
						"description": "The optional namespace to create the identity in."
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProfileCreateRequest": {
				"type": "object",
				"properties": {
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProfileGetResponse": {
				"type": "object",
				"properties": {
					"identity": {
						"type": "string",
						"description": "The identity of the profile, this is the authenticated user identity."
					},
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"required": [
					"identity"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityProfileListResponse": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"items": false,
						"description": "The identities.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"identity": {
										"type": "string",
										"description": "The identity."
									},
									"publicProfile": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
									}
								},
								"required": [
									"identity"
								],
								"additionalProperties": false
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"items"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityProfileUpdateRequest": {
				"type": "object",
				"properties": {
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofCreateRequest": {
				"type": "object",
				"properties": {
					"proofType": {
						"$ref": "https://schema.twindev.org/w3c-did/ProofTypes"
					},
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"proofType",
					"document"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofVerifyRequest": {
				"type": "object",
				"properties": {
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"proof": {
						"$ref": "https://schema.twindev.org/w3c-did/Proof"
					}
				},
				"required": [
					"document",
					"proof"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofVerifyResponse": {
				"type": "object",
				"properties": {
					"verified": {
						"type": "boolean"
					}
				},
				"required": [
					"verified"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityServiceCreateRequest": {
				"type": "object",
				"properties": {
					"serviceId": {
						"type": "string",
						"description": "The id of the service."
					},
					"type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The type of the service."
					},
					"endpoint": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The endpoint for the service."
					}
				},
				"required": [
					"serviceId",
					"type",
					"endpoint"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiableCredentialCreateRequest": {
				"type": "object",
				"properties": {
					"credentialId": {
						"type": "string",
						"description": "The id of the credential."
					},
					"subject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"revocationIndex": {
						"type": "number",
						"description": "The bitmap revocation index of the credential, if undefined will not have revocation status."
					}
				},
				"required": [
					"subject"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiableCredentialCreateResponse": {
				"type": "object",
				"properties": {
					"verifiableCredential": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiableCredential"
					},
					"jwt": {
						"type": "string",
						"description": "The JWT token for the verifiable credential."
					}
				},
				"required": [
					"verifiableCredential",
					"jwt"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiableCredentialVerifyResponse": {
				"type": "object",
				"properties": {
					"revoked": {
						"type": "boolean",
						"description": "Has the credential been revoked."
					},
					"verifiableCredential": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiableCredential"
					}
				},
				"required": [
					"revoked"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiablePresentationCreateRequest": {
				"type": "object",
				"properties": {
					"presentationId": {
						"type": "string",
						"description": "The id of the presentation."
					},
					"contexts": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionRoot"
					},
					"types": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The types of the presentation."
					},
					"verifiableCredentials": {
						"type": "array",
						"items": false,
						"description": "The verifiable credentials to include in the presentation.",
						"prefixItems": [
							{
								"anyOf": [
									{
										"type": "string"
									},
									{
										"$ref": "https://schema.twindev.org/w3c-did/DidVerifiableCredential"
									}
								]
							}
						]
					},
					"expiresInMinutes": {
						"type": "number",
						"description": "The expiration time for the presentation."
					}
				},
				"required": [
					"verifiableCredentials"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiablePresentationCreateResponse": {
				"type": "object",
				"properties": {
					"verifiablePresentation": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiablePresentation"
					},
					"jwt": {
						"type": "string",
						"description": "The JWT token for the verifiable presentation."
					}
				},
				"required": [
					"verifiablePresentation",
					"jwt"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiablePresentationVerifyResponse": {
				"type": "object",
				"properties": {
					"revoked": {
						"type": "boolean",
						"description": "Has the presentation been revoked."
					},
					"verifiablePresentation": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiablePresentation"
					},
					"issuers": {
						"type": "array",
						"items": false,
						"description": "The issuers of the presentation.",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-did/DidDocument"
							}
						]
					}
				},
				"required": [
					"revoked"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerificationMethodCreateRequest": {
				"type": "object",
				"properties": {
					"verificationMethodType": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerificationMethodType"
					},
					"verificationMethodId": {
						"type": "string",
						"description": "The optional id for the verification method, will be allocated if not supplied."
					}
				},
				"required": [
					"verificationMethodType"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"ImmutableProofCreateRequest": {
				"type": "object",
				"properties": {
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"document"
				],
				"additionalProperties": false,
				"description": "The parameters from the body."
			},
			"LogEntry": {
				"type": "object",
				"properties": {
					"level": {
						"$ref": "#/components/schemas/LogLevel"
					},
					"source": {
						"type": "string",
						"description": "The source of the log entry."
					},
					"ts": {
						"type": "number",
						"description": "The timestamp of the log entry, if left blank will be populated by the connector."
					},
					"message": {
						"type": "string",
						"description": "The message."
					},
					"error": {
						"$ref": "#/components/schemas/Error"
					},
					"data": {
						"type": "object",
						"additionalProperties": {},
						"description": "Optional data for the message."
					}
				},
				"required": [
					"level",
					"source",
					"message"
				],
				"additionalProperties": false,
				"description": "Interface describing a log entry."
			},
			"LogLevel": {
				"type": "string",
				"enum": [
					"info",
					"error",
					"warn",
					"trace",
					"debug"
				],
				"description": "Log level."
			},
			"LoggingListResponse": {
				"type": "object",
				"properties": {
					"entities": {
						"type": "array",
						"items": false,
						"description": "The entities, which can be partial if a limited keys list was provided.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/LogEntry"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"LoginRequest": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"description": "The email address for the user."
					},
					"password": {
						"type": "string",
						"description": "The password for the user."
					}
				},
				"required": [
					"email",
					"password"
				],
				"additionalProperties": false,
				"description": "The login details."
			},
			"LoginResponse": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"description": "The access token, if it uses a mechanism with public access."
					},
					"expiry": {
						"type": "number",
						"description": "The expiry time of the token."
					}
				},
				"required": [
					"expiry"
				],
				"additionalProperties": false,
				"description": "The login response details."
			},
			"MetricType": {
				"anyOf": [
					{
						"type": "number",
						"const": 0,
						"description": "Counter."
					},
					{
						"type": "number",
						"const": 1,
						"description": "Increment Decrement Counter."
					},
					{
						"type": "number",
						"const": 2,
						"description": "Gauge."
					}
				],
				"description": "The types of metrics."
			},
			"NftMintRequest": {
				"type": "object",
				"properties": {
					"tag": {
						"type": "string",
						"description": "The tag for the NFT."
					},
					"immutableMetadata": {
						"description": "The immutable metadata for the NFT."
					},
					"metadata": {
						"description": "The metadata for the NFT."
					},
					"namespace": {
						"type": "string",
						"description": "The namespace of the connector to use for the NFT, defaults to component configured namespace."
					}
				},
				"required": [
					"tag"
				],
				"additionalProperties": false,
				"description": "The data to be used in the minting."
			},
			"NftResolveResponse": {
				"type": "object",
				"properties": {
					"issuer": {
						"type": "string",
						"description": "The issuer of the NFT."
					},
					"owner": {
						"type": "string",
						"description": "The owner of the NFT."
					},
					"tag": {
						"type": "string",
						"description": "The tag data for the NFT."
					},
					"immutableMetadata": {
						"description": "The immutable data for the NFT."
					},
					"metadata": {
						"description": "The metadata for the NFT."
					}
				},
				"required": [
					"issuer",
					"owner",
					"tag"
				],
				"additionalProperties": false,
				"description": "The data that was resolved."
			},
			"NftTransferRequest": {
				"type": "object",
				"properties": {
					"recipientIdentity": {
						"type": "string",
						"description": "The recipient identity for the NFT."
					},
					"recipientAddress": {
						"type": "string",
						"description": "The recipient address for the NFT."
					},
					"metadata": {
						"description": "The metadata for the NFT."
					}
				},
				"required": [
					"recipientIdentity",
					"recipientAddress"
				],
				"additionalProperties": false,
				"description": "The data to be used in the transfer."
			},
			"NftUpdateRequest": {
				"type": "object",
				"properties": {
					"metadata": {
						"description": "The metadata for the NFT."
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the update."
			},
			"NotFoundResponse": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"notFoundId": {
						"type": "string",
						"description": "The id if the item that was not found."
					},
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"message",
					"name"
				],
				"description": "The body which contains the error."
			},
			"RefreshTokenResponse": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"description": "The refreshed token, if it uses a mechanism with public access."
					},
					"expiry": {
						"type": "number",
						"description": "The expiry time of the token."
					}
				},
				"required": [
					"expiry"
				],
				"additionalProperties": false,
				"description": "The refresh token details."
			},
			"Rule": {
				"type": "object",
				"properties": {
					"source": {
						"type": "string",
						"description": "The path to the data in the document to extract. should be in JSONPath format https://www.rfc-editor.org/rfc/rfc9535.html."
					},
					"target": {
						"type": "string",
						"description": "The target path of where to store the extracted data. Supports simple dotted path notation, and numeric index notation."
					},
					"retainPathDepth": {
						"type": "number",
						"description": "When extracting objects, how much of the original path should be maintained in the target object."
					},
					"coerce": {
						"$ref": "#/components/schemas/CoerceType"
					}
				},
				"required": [
					"source",
					"target"
				],
				"additionalProperties": false,
				"description": "Rule defining how to extract data from an object."
			},
			"RuleGroup": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The id for the rule group."
					},
					"label": {
						"type": "string",
						"description": "The label for the rule group."
					},
					"rules": {
						"type": "array",
						"items": false,
						"description": "The rules.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/Rule"
							}
						]
					}
				},
				"required": [
					"id",
					"label",
					"rules"
				],
				"additionalProperties": false,
				"description": "Group of rules for extraction."
			},
			"ServerInfo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The application name."
					},
					"version": {
						"type": "string",
						"description": "The version of the server."
					}
				},
				"required": [
					"name",
					"version"
				],
				"additionalProperties": false,
				"description": "The information about the server."
			},
			"ServerSpecResponse": {
				"description": "The spec for the server."
			},
			"SortDirection": {
				"anyOf": [
					{
						"type": "string",
						"const": "asc",
						"description": "Ascending."
					},
					{
						"type": "string",
						"const": "desc",
						"description": "Descending."
					}
				],
				"description": "The sort directions."
			},
			"TelemetryAddMetricValueRequest": {
				"type": "object",
				"properties": {
					"value": {
						"anyOf": [
							{
								"type": "string",
								"const": "inc"
							},
							{
								"type": "string",
								"const": "dec"
							},
							{
								"type": "number"
							}
						],
						"description": "The value for the update operation."
					},
					"customData": {
						"type": "object",
						"additionalProperties": {},
						"description": "The custom data for the update operation."
					}
				},
				"required": [
					"value"
				],
				"additionalProperties": false,
				"description": "The data to be used in the update."
			},
			"TelemetryGetMetricResponse": {
				"type": "object",
				"properties": {
					"metric": {
						"$ref": "#/components/schemas/TelemetryMetric"
					},
					"value": {
						"$ref": "#/components/schemas/TelemetryMetricValue"
					}
				},
				"required": [
					"metric",
					"value"
				],
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"TelemetryListResponse": {
				"type": "object",
				"properties": {
					"entities": {
						"type": "array",
						"items": false,
						"description": "The metrics.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/TelemetryMetric"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"TelemetryMetric": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the metric."
					},
					"label": {
						"type": "string",
						"description": "The label of the metric."
					},
					"type": {
						"$ref": "#/components/schemas/MetricType"
					},
					"description": {
						"type": "string",
						"description": "Description."
					},
					"unit": {
						"type": "string",
						"description": "The unit the metric describes."
					}
				},
				"required": [
					"id",
					"label",
					"type"
				],
				"additionalProperties": false,
				"description": "Interface describing a telemetry metric."
			},
			"TelemetryMetricValue": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the metric value."
					},
					"ts": {
						"type": "number",
						"description": "The timestamp of the metric."
					},
					"value": {
						"type": "number",
						"description": "The value of the metric."
					},
					"customData": {
						"type": "object",
						"additionalProperties": {},
						"description": "The custom data for the metric value."
					}
				},
				"required": [
					"id",
					"ts",
					"value"
				],
				"additionalProperties": false,
				"description": "Interface describing a telemetry metric value."
			},
			"TelemetryUpdateMetricRequest": {
				"type": "object",
				"properties": {
					"label": {
						"type": "string",
						"description": "The label of the metric."
					},
					"description": {
						"type": "string",
						"description": "The description of the metric."
					},
					"unit": {
						"type": "string",
						"description": "The unit of the metric."
					}
				},
				"required": [
					"label"
				],
				"additionalProperties": false,
				"description": "The data to be used in the update."
			},
			"TelemetryValuesListResponse": {
				"type": "object",
				"properties": {
					"metric": {
						"$ref": "#/components/schemas/TelemetryMetric"
					},
					"entities": {
						"type": "array",
						"items": false,
						"description": "The metric values.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/TelemetryMetricValue"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"metric",
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"UneceDocumentCodes": {
				"anyOf": [
					{
						"type": "string",
						"description": "Certificate of analysis: 1."
					},
					{
						"type": "string",
						"description": "Party information: 10."
					},
					{
						"type": "string",
						"description": "Excise certificate: 100."
					},
					{
						"type": "string",
						"description": "Registration document: 101."
					},
					{
						"type": "string",
						"description": "Tax notification: 102."
					},
					{
						"type": "string",
						"description": "Transport equipment direct interchange report: 103."
					},
					{
						"type": "string",
						"description": "Transport equipment impending arrival advice: 104."
					},
					{
						"type": "string",
						"description": "Purchase order: 105."
					},
					{
						"type": "string",
						"description": "Transport equipment damage report: 106."
					},
					{
						"type": "string",
						"description": "Transport equipment maintenance and repair work estimate advice: 107."
					},
					{
						"type": "string",
						"description": "Transport equipment empty release instruction: 108."
					},
					{
						"type": "string",
						"description": "Transport movement gate in report: 109."
					},
					{
						"type": "string",
						"description": "Federal label approval: 11."
					},
					{
						"type": "string",
						"description": "Manufacturing instructions: 110."
					},
					{
						"type": "string",
						"description": "Transport movement gate out report: 111."
					},
					{
						"type": "string",
						"description": "Transport equipment unpacking instruction: 112."
					},
					{
						"type": "string",
						"description": "Transport equipment unpacking report: 113."
					},
					{
						"type": "string",
						"description": "Transport equipment pick-up availability request: 114."
					},
					{
						"type": "string",
						"description": "Transport equipment pick-up availability confirmation: 115."
					},
					{
						"type": "string",
						"description": "Transport equipment pick-up report: 116."
					},
					{
						"type": "string",
						"description": "Transport equipment shift report: 117."
					},
					{
						"type": "string",
						"description": "Transport discharge instruction: 118."
					},
					{
						"type": "string",
						"description": "Transport discharge report: 119."
					},
					{
						"type": "string",
						"description": "Mill certificate: 12."
					},
					{
						"type": "string",
						"description": "Stores requisition: 120."
					},
					{
						"type": "string",
						"description": "Transport loading instruction: 121."
					},
					{
						"type": "string",
						"description": "Transport loading report: 122."
					},
					{
						"type": "string",
						"description": "Transport equipment maintenance and repair work authorisation: 123."
					},
					{
						"type": "string",
						"description": "Transport departure report: 124."
					},
					{
						"type": "string",
						"description": "Transport empty equipment advice: 125."
					},
					{
						"type": "string",
						"description": "Transport equipment acceptance order: 126."
					},
					{
						"type": "string",
						"description": "Transport equipment special service instruction: 127."
					},
					{
						"type": "string",
						"description": "Transport equipment stock report: 128."
					},
					{
						"type": "string",
						"description": "Transport cargo release order: 129."
					},
					{
						"type": "string",
						"description": "Post receipt: 13."
					},
					{
						"type": "string",
						"description": "Invoicing data sheet: 130."
					},
					{
						"type": "string",
						"description": "Transport equipment packing instruction: 131."
					},
					{
						"type": "string",
						"description": "Customs clearance notice: 132."
					},
					{
						"type": "string",
						"description": "Customs documents expiration notice: 133."
					},
					{
						"type": "string",
						"description": "Transport equipment on-hire request: 134."
					},
					{
						"type": "string",
						"description": "Transport equipment on-hire order: 135."
					},
					{
						"type": "string",
						"description": "Transport equipment off-hire request: 136."
					},
					{
						"type": "string",
						"description": "Transport equipment survey order: 137."
					},
					{
						"type": "string",
						"description": "Transport equipment survey order response: 138."
					},
					{
						"type": "string",
						"description": "Transport equipment survey report: 139."
					},
					{
						"type": "string",
						"description": "Weight certificate: 14."
					},
					{
						"type": "string",
						"description": "Packing instructions: 140."
					},
					{
						"type": "string",
						"description": "Advising items to be booked to a financial account: 141."
					},
					{
						"type": "string",
						"description": "Transport equipment maintenance and repair work estimate order: 142."
					},
					{
						"type": "string",
						"description": "Transport equipment maintenance and repair notice: 143."
					},
					{
						"type": "string",
						"description": "Empty container disposition order: 144."
					},
					{
						"type": "string",
						"description": "Cargo vessel discharge order: 145."
					},
					{
						"type": "string",
						"description": "Cargo vessel loading order: 146."
					},
					{
						"type": "string",
						"description": "Multidrop order: 147."
					},
					{
						"type": "string",
						"description": "Bailment contract: 148."
					},
					{
						"type": "string",
						"description": "Basic agreement: 149."
					},
					{
						"type": "string",
						"description": "Weight list: 15."
					},
					{
						"type": "string",
						"description": "Internal transport order: 150."
					},
					{
						"type": "string",
						"description": "Grant: 151."
					},
					{
						"type": "string",
						"description": "Indefinite delivery indefinite quantity contract: 152."
					},
					{
						"type": "string",
						"description": "Indefinite delivery definite quantity contract: 153."
					},
					{
						"type": "string",
						"description": "Requirements contract: 154."
					},
					{
						"type": "string",
						"description": "Task order: 155."
					},
					{
						"type": "string",
						"description": "Make or buy plan: 156."
					},
					{
						"type": "string",
						"description": "Subcontractor plan: 157."
					},
					{
						"type": "string",
						"description": "Cost data summary: 158."
					},
					{
						"type": "string",
						"description": "Certified cost and price data: 159."
					},
					{
						"type": "string",
						"description": "Certificate: 16."
					},
					{
						"type": "string",
						"description": "Wage determination: 160."
					},
					{
						"type": "string",
						"description": "Contract Funds Status Report (CFSR): 161."
					},
					{
						"type": "string",
						"description": "Certified inspection and test results: 162."
					},
					{
						"type": "string",
						"description": "Material inspection and receiving report: 163."
					},
					{
						"type": "string",
						"description": "Purchasing specification: 164."
					},
					{
						"type": "string",
						"description": "Payment or performance bond: 165."
					},
					{
						"type": "string",
						"description": "Contract security classification specification: 166."
					},
					{
						"type": "string",
						"description": "Manufacturing specification: 167."
					},
					{
						"type": "string",
						"description": "Buy America certificate of compliance: 168."
					},
					{
						"type": "string",
						"description": "Container off-hire notice: 169."
					},
					{
						"type": "string",
						"description": "Combined certificate of value and origin: 17."
					},
					{
						"type": "string",
						"description": "Cargo acceptance order: 170."
					},
					{
						"type": "string",
						"description": "Pick-up notice: 171."
					},
					{
						"type": "string",
						"description": "Authorisation to plan and suggest orders: 172."
					},
					{
						"type": "string",
						"description": "Authorisation to plan and ship orders: 173."
					},
					{
						"type": "string",
						"description": "Drawing: 174."
					},
					{
						"type": "string",
						"description": "Cost Performance Report (CPR) format 2: 175."
					},
					{
						"type": "string",
						"description": "Cost Schedule Status Report (CSSR): 176."
					},
					{
						"type": "string",
						"description": "Cost Performance Report (CPR) format 1: 177."
					},
					{
						"type": "string",
						"description": "Cost Performance Report (CPR) format 3: 178."
					},
					{
						"type": "string",
						"description": "Cost Performance Report (CPR) format 4: 179."
					},
					{
						"type": "string",
						"description": "Movement certificate A.TR.1: 18."
					},
					{
						"type": "string",
						"description": "Cost Performance Report (CPR) format 5: 180."
					},
					{
						"type": "string",
						"description": "Progressive discharge report: 181."
					},
					{
						"type": "string",
						"description": "Balance confirmation: 182."
					},
					{
						"type": "string",
						"description": "Container stripping order: 183."
					},
					{
						"type": "string",
						"description": "Container stuffing order: 184."
					},
					{
						"type": "string",
						"description": "Conveyance declaration (arrival): 185."
					},
					{
						"type": "string",
						"description": "Conveyance declaration (departure): 186."
					},
					{
						"type": "string",
						"description": "Conveyance declaration (combined): 187."
					},
					{
						"type": "string",
						"description": "Project recovery plan: 188."
					},
					{
						"type": "string",
						"description": "Project production plan: 189."
					},
					{
						"type": "string",
						"description": "Certificate of quantity: 19."
					},
					{
						"type": "string",
						"description": "Statistical and other administrative internal documents: 190."
					},
					{
						"type": "string",
						"description": "Project master schedule: 191."
					},
					{
						"type": "string",
						"description": "Priced alternate tender bill of quantity: 192."
					},
					{
						"type": "string",
						"description": "Estimated priced bill of quantity: 193."
					},
					{
						"type": "string",
						"description": "Draft bill of quantity: 194."
					},
					{
						"type": "string",
						"description": "Documentary credit collection instruction: 195."
					},
					{
						"type": "string",
						"description": "Request for an amendment of a documentary credit: 196."
					},
					{
						"type": "string",
						"description": "Documentary credit amendment information: 197."
					},
					{
						"type": "string",
						"description": "Advice of an amendment of a documentary credit: 198."
					},
					{
						"type": "string",
						"description": "Response to an amendment of a documentary credit: 199."
					},
					{
						"type": "string",
						"description": "Certificate of conformity: 2."
					},
					{
						"type": "string",
						"description": "Quality data message: 20."
					},
					{
						"type": "string",
						"description": "Documentary credit issuance information: 200."
					},
					{
						"type": "string",
						"description": "Direct payment valuation request: 201."
					},
					{
						"type": "string",
						"description": "Direct payment valuation: 202."
					},
					{
						"type": "string",
						"description": "Provisional payment valuation: 203."
					},
					{
						"type": "string",
						"description": "Payment valuation: 204."
					},
					{
						"type": "string",
						"description": "Quantity valuation: 205."
					},
					{
						"type": "string",
						"description": "Quantity valuation request: 206."
					},
					{
						"type": "string",
						"description": "Contract bill of quantities - BOQ: 207."
					},
					{
						"type": "string",
						"description": "Unpriced bill of quantity: 208."
					},
					{
						"type": "string",
						"description": "Priced tender BOQ: 209."
					},
					{
						"type": "string",
						"description": "Query: 21."
					},
					{
						"type": "string",
						"description": "Enquiry: 210."
					},
					{
						"type": "string",
						"description": "Interim application for payment: 211."
					},
					{
						"type": "string",
						"description": "Agreement to pay: 212."
					},
					{
						"type": "string",
						"description": "Request for financial cancellation: 213."
					},
					{
						"type": "string",
						"description": "Pre-authorised direct debit(s): 214."
					},
					{
						"type": "string",
						"description": "Letter of intent: 215."
					},
					{
						"type": "string",
						"description": "Approved unpriced bill of quantity: 216."
					},
					{
						"type": "string",
						"description": "Payment valuation for unscheduled items: 217."
					},
					{
						"type": "string",
						"description": "Final payment request based on completion of work: 218."
					},
					{
						"type": "string",
						"description": "Payment request for completed units: 219."
					},
					{
						"type": "string",
						"description": "Response to query: 22."
					},
					{
						"type": "string",
						"description": "Order: 220."
					},
					{
						"type": "string",
						"description": "Blanket order: 221."
					},
					{
						"type": "string",
						"description": "Spot order: 222."
					},
					{
						"type": "string",
						"description": "Lease order: 223."
					},
					{
						"type": "string",
						"description": "Rush order: 224."
					},
					{
						"type": "string",
						"description": "Repair order: 225."
					},
					{
						"type": "string",
						"description": "Call off order: 226."
					},
					{
						"type": "string",
						"description": "Consignment order: 227."
					},
					{
						"type": "string",
						"description": "Sample order: 228."
					},
					{
						"type": "string",
						"description": "Swap order: 229."
					},
					{
						"type": "string",
						"description": "Status information: 23."
					},
					{
						"type": "string",
						"description": "Purchase order change request: 230."
					},
					{
						"type": "string",
						"description": "Purchase order response: 231."
					},
					{
						"type": "string",
						"description": "Hire order: 232."
					},
					{
						"type": "string",
						"description": "Spare parts order: 233."
					},
					{
						"type": "string",
						"description": "Campaign price/sales catalogue: 234."
					},
					{
						"type": "string",
						"description": "Container list: 235."
					},
					{
						"type": "string",
						"description": "Delivery forecast: 236."
					},
					{
						"type": "string",
						"description": "Cross docking services order: 237."
					},
					{
						"type": "string",
						"description": "Non-pre-authorised direct debit(s): 238."
					},
					{
						"type": "string",
						"description": "Rejected direct debit(s): 239."
					},
					{
						"type": "string",
						"description": "Restow: 24."
					},
					{
						"type": "string",
						"description": "Delivery instructions: 240."
					},
					{
						"type": "string",
						"description": "Delivery schedule: 241."
					},
					{
						"type": "string",
						"description": "Delivery just-in-time: 242."
					},
					{
						"type": "string",
						"description": "Pre-authorised direct debit request(s): 243."
					},
					{
						"type": "string",
						"description": "Non-pre-authorised direct debit request(s): 244."
					},
					{
						"type": "string",
						"description": "Delivery release: 245."
					},
					{
						"type": "string",
						"description": "Settlement of a letter of credit: 246."
					},
					{
						"type": "string",
						"description": "Bank to bank funds transfer: 247."
					},
					{
						"type": "string",
						"description": "Customer payment order(s): 248."
					},
					{
						"type": "string",
						"description": "Low value payment order(s): 249."
					},
					{
						"type": "string",
						"description": "Container discharge list: 25."
					},
					{
						"type": "string",
						"description": "Crew list declaration: 250."
					},
					{
						"type": "string",
						"description": "Inquiry: 251."
					},
					{
						"type": "string",
						"description": "Response to previous banking status message: 252."
					},
					{
						"type": "string",
						"description": "Project master plan: 253."
					},
					{
						"type": "string",
						"description": "Project plan: 254."
					},
					{
						"type": "string",
						"description": "Project schedule: 255."
					},
					{
						"type": "string",
						"description": "Project planning available resources: 256."
					},
					{
						"type": "string",
						"description": "Project planning calendar: 257."
					},
					{
						"type": "string",
						"description": "Standing order: 258."
					},
					{
						"type": "string",
						"description": "Cargo movement event log: 259."
					},
					{
						"type": "string",
						"description": "Corporate superannuation contributions advice: 26."
					},
					{
						"type": "string",
						"description": "Cargo analysis voyage report: 260."
					},
					{
						"type": "string",
						"description": "Self billed credit note: 261."
					},
					{
						"type": "string",
						"description": "Consolidated credit note - goods and services: 262."
					},
					{
						"type": "string",
						"description": "Inventory adjustment status report: 263."
					},
					{
						"type": "string",
						"description": "Transport equipment movement instruction: 264."
					},
					{
						"type": "string",
						"description": "Transport equipment movement report: 265."
					},
					{
						"type": "string",
						"description": "Transport equipment status change report: 266."
					},
					{
						"type": "string",
						"description": "Fumigation certificate: 267."
					},
					{
						"type": "string",
						"description": "Wine certificate: 268."
					},
					{
						"type": "string",
						"description": "Wool health certificate: 269."
					},
					{
						"type": "string",
						"description": "Industry superannuation contributions advice: 27."
					},
					{
						"type": "string",
						"description": "Delivery note: 270."
					},
					{
						"type": "string",
						"description": "Packing list: 271."
					},
					{
						"type": "string",
						"description": "New code request: 272."
					},
					{
						"type": "string",
						"description": "Code change request: 273."
					},
					{
						"type": "string",
						"description": "Simple data element request: 274."
					},
					{
						"type": "string",
						"description": "Simple data element change request: 275."
					},
					{
						"type": "string",
						"description": "Composite data element request: 276."
					},
					{
						"type": "string",
						"description": "Composite data element change request: 277."
					},
					{
						"type": "string",
						"description": "Segment request: 278."
					},
					{
						"type": "string",
						"description": "Segment change request: 279."
					},
					{
						"type": "string",
						"description": "Corporate superannuation member maintenance message: 28."
					},
					{
						"type": "string",
						"description": "New message request: 280."
					},
					{
						"type": "string",
						"description": "Message in development request: 281."
					},
					{
						"type": "string",
						"description": "Modification of existing message: 282."
					},
					{
						"type": "string",
						"description": "Tracking number assignment report: 283."
					},
					{
						"type": "string",
						"description": "User directory definition: 284."
					},
					{
						"type": "string",
						"description": "United Nations standard message request: 285."
					},
					{
						"type": "string",
						"description": "Service directory definition: 286."
					},
					{
						"type": "string",
						"description": "Status report: 287."
					},
					{
						"type": "string",
						"description": "Kanban schedule: 288."
					},
					{
						"type": "string",
						"description": "Product data message: 289."
					},
					{
						"type": "string",
						"description": "Industry superannuation member maintenance message: 29."
					},
					{
						"type": "string",
						"description": "A claim for parts and/or labour charges: 290."
					},
					{
						"type": "string",
						"description": "Delivery schedule response: 291."
					},
					{
						"type": "string",
						"description": "Inspection request: 292."
					},
					{
						"type": "string",
						"description": "Inspection report: 293."
					},
					{
						"type": "string",
						"description": "Application acknowledgement and error report: 294."
					},
					{
						"type": "string",
						"description": "Price variation invoice: 295."
					},
					{
						"type": "string",
						"description": "Credit note for price variation: 296."
					},
					{
						"type": "string",
						"description": "Instruction to collect: 297."
					},
					{
						"type": "string",
						"description": "Dangerous goods list: 298."
					},
					{
						"type": "string",
						"description": "Registration renewal: 299."
					},
					{
						"type": "string",
						"description": "Certificate of quality: 3."
					},
					{
						"type": "string",
						"description": "Life insurance payroll deductions advice: 30."
					},
					{
						"type": "string",
						"description": "Registration change: 300."
					},
					{
						"type": "string",
						"description": "Response to registration: 301."
					},
					{
						"type": "string",
						"description": "Implementation guideline: 302."
					},
					{
						"type": "string",
						"description": "Request for transfer: 303."
					},
					{
						"type": "string",
						"description": "Cost performance report: 304."
					},
					{
						"type": "string",
						"description": "Application error and acknowledgement: 305."
					},
					{
						"type": "string",
						"description": "Cash pool financial statement: 306."
					},
					{
						"type": "string",
						"description": "Sequenced delivery schedule: 307."
					},
					{
						"type": "string",
						"description": "Delcredere credit note: 308."
					},
					{
						"type": "string",
						"description": "Healthcare discharge report, final: 309."
					},
					{
						"type": "string",
						"description": "Underbond request: 31."
					},
					{
						"type": "string",
						"description": "Offer / quotation: 310."
					},
					{
						"type": "string",
						"description": "Request for quote: 311."
					},
					{
						"type": "string",
						"description": "Acknowledgement message: 312."
					},
					{
						"type": "string",
						"description": "Application error message: 313."
					},
					{
						"type": "string",
						"description": "Cargo movement voyage summary: 314."
					},
					{
						"type": "string",
						"description": "Contract: 315."
					},
					{
						"type": "string",
						"description": "Application for usage of berth or mooring facilities: 316."
					},
					{
						"type": "string",
						"description": "Application for designation of berthing places: 317."
					},
					{
						"type": "string",
						"description": "Application for shifting from the designated place in port: 318."
					},
					{
						"type": "string",
						"description": "Supplementary document for application for cargo operation of dangerous goods: 319."
					},
					{
						"type": "string",
						"description": "Underbond approval: 32."
					},
					{
						"type": "string",
						"description": "Acknowledgement of order: 320."
					},
					{
						"type": "string",
						"description": "Supplementary document for application for transport of dangerous goods: 321."
					},
					{
						"type": "string",
						"description": "Optical Character Reading (OCR) payment: 322."
					},
					{
						"type": "string",
						"description": "Preliminary sales report: 323."
					},
					{
						"type": "string",
						"description": "Transport emergency card: 324."
					},
					{
						"type": "string",
						"description": "Proforma invoice: 325."
					},
					{
						"type": "string",
						"description": "Partial invoice: 326."
					},
					{
						"type": "string",
						"description": "Operating instructions: 327."
					},
					{
						"type": "string",
						"description": "Name/product plate: 328."
					},
					{
						"type": "string",
						"description": "Co-insurance ceding bordereau: 329."
					},
					{
						"type": "string",
						"description": "Certificate of sealing of export meat lockers: 33."
					},
					{
						"type": "string",
						"description": "Request for delivery instructions: 330."
					},
					{
						"type": "string",
						"description": "Commercial invoice which includes a packing list: 331."
					},
					{
						"type": "string",
						"description": "Trade data: 332."
					},
					{
						"type": "string",
						"description": "Customs declaration for cargo examination: 333."
					},
					{
						"type": "string",
						"description": "Customs declaration for cargo examination, alternate: 334."
					},
					{
						"type": "string",
						"description": "Booking request: 335."
					},
					{
						"type": "string",
						"description": "Customs crew and conveyance: 336."
					},
					{
						"type": "string",
						"description": "Customs summary declaration with commercial detail, alternate: 337."
					},
					{
						"type": "string",
						"description": "Items booked to a financial account report: 338."
					},
					{
						"type": "string",
						"description": "Report of transactions which need further information from the receiver: 339."
					},
					{
						"type": "string",
						"description": "Cargo status: 34."
					},
					{
						"type": "string",
						"description": "Shipping instructions: 340."
					},
					{
						"type": "string",
						"description": "Shipper's letter of instructions (air): 341."
					},
					{
						"type": "string",
						"description": "Report of transactions for information only: 342."
					},
					{
						"type": "string",
						"description": "Cartage order (local transport): 343."
					},
					{
						"type": "string",
						"description": "EDI associated object administration message: 344."
					},
					{
						"type": "string",
						"description": "Ready for despatch advice: 345."
					},
					{
						"type": "string",
						"description": "Summary sales report: 346."
					},
					{
						"type": "string",
						"description": "Order status enquiry: 347."
					},
					{
						"type": "string",
						"description": "Order status report: 348."
					},
					{
						"type": "string",
						"description": "Declaration regarding the inward and outward movement of vessel: 349."
					},
					{
						"type": "string",
						"description": "Inventory report: 35."
					},
					{
						"type": "string",
						"description": "Despatch order: 350."
					},
					{
						"type": "string",
						"description": "Despatch advice: 351."
					},
					{
						"type": "string",
						"description": "Notification of usage of berth or mooring facilities: 352."
					},
					{
						"type": "string",
						"description": "Application for vessel's entering into port area in night- time: 353."
					},
					{
						"type": "string",
						"description": "Notification of emergency shifting from the designated place in port: 354."
					},
					{
						"type": "string",
						"description": "Customs summary declaration without commercial detail, alternate: 355."
					},
					{
						"type": "string",
						"description": "Performance bond: 356."
					},
					{
						"type": "string",
						"description": "Payment bond: 357."
					},
					{
						"type": "string",
						"description": "Healthcare discharge report, preliminary: 358."
					},
					{
						"type": "string",
						"description": "Request for provision of a health service: 359."
					},
					{
						"type": "string",
						"description": "Identity card: 36."
					},
					{
						"type": "string",
						"description": "Request for price quote: 360."
					},
					{
						"type": "string",
						"description": "Price quote: 361."
					},
					{
						"type": "string",
						"description": "Delivery quote: 362."
					},
					{
						"type": "string",
						"description": "Price and delivery quote: 363."
					},
					{
						"type": "string",
						"description": "Contract price quote: 364."
					},
					{
						"type": "string",
						"description": "Contract price and delivery quote: 365."
					},
					{
						"type": "string",
						"description": "Price quote, specified end-customer: 366."
					},
					{
						"type": "string",
						"description": "Price and delivery quote, specified end-customer: 367."
					},
					{
						"type": "string",
						"description": "Price quote, ship and debit: 368."
					},
					{
						"type": "string",
						"description": "Price and delivery quote, ship and debit: 369."
					},
					{
						"type": "string",
						"description": "Response to a trade statistics message: 37."
					},
					{
						"type": "string",
						"description": "Advice of distribution of documents: 370."
					},
					{
						"type": "string",
						"description": "Plan for provision of health service: 371."
					},
					{
						"type": "string",
						"description": "Prescription: 372."
					},
					{
						"type": "string",
						"description": "Prescription request: 373."
					},
					{
						"type": "string",
						"description": "Prescription dispensing report: 374."
					},
					{
						"type": "string",
						"description": "Certificate of shipment: 375."
					},
					{
						"type": "string",
						"description": "Standing inquiry on product information: 376."
					},
					{
						"type": "string",
						"description": "Party credit information: 377."
					},
					{
						"type": "string",
						"description": "Party payment behaviour information: 378."
					},
					{
						"type": "string",
						"description": "Request for metering point information: 379."
					},
					{
						"type": "string",
						"description": "Vaccination certificate: 38."
					},
					{
						"type": "string",
						"description": "Commercial invoice: 380."
					},
					{
						"type": "string",
						"description": "Credit note: 381."
					},
					{
						"type": "string",
						"description": "Commission note: 382."
					},
					{
						"type": "string",
						"description": "Debit note: 383."
					},
					{
						"type": "string",
						"description": "Corrected invoice: 384."
					},
					{
						"type": "string",
						"description": "Consolidated invoice: 385."
					},
					{
						"type": "string",
						"description": "Prepayment invoice: 386."
					},
					{
						"type": "string",
						"description": "Hire invoice: 387."
					},
					{
						"type": "string",
						"description": "Tax invoice: 388."
					},
					{
						"type": "string",
						"description": "Self-billed invoice: 389."
					},
					{
						"type": "string",
						"description": "Passport: 39."
					},
					{
						"type": "string",
						"description": "Delcredere invoice: 390."
					},
					{
						"type": "string",
						"description": "Metering point information response: 391."
					},
					{
						"type": "string",
						"description": "Notification of change of supplier: 392."
					},
					{
						"type": "string",
						"description": "Factored invoice: 393."
					},
					{
						"type": "string",
						"description": "Lease invoice: 394."
					},
					{
						"type": "string",
						"description": "Consignment invoice: 395."
					},
					{
						"type": "string",
						"description": "Factored credit note: 396."
					},
					{
						"type": "string",
						"description": "Commercial account summary response: 397."
					},
					{
						"type": "string",
						"description": "Cross docking despatch advice: 398."
					},
					{
						"type": "string",
						"description": "Transshipment despatch advice: 399."
					},
					{
						"type": "string",
						"description": "Test report: 4."
					},
					{
						"type": "string",
						"description": "Driving licence (national): 40."
					},
					{
						"type": "string",
						"description": "Exceptional order: 400."
					},
					{
						"type": "string",
						"description": "Pre-packed cross docking order: 401."
					},
					{
						"type": "string",
						"description": "Intermediate handling cross docking order: 402."
					},
					{
						"type": "string",
						"description": "Means of transportation availability information: 403."
					},
					{
						"type": "string",
						"description": "Means of transportation schedule information: 404."
					},
					{
						"type": "string",
						"description": "Transport equipment delivery notice: 405."
					},
					{
						"type": "string",
						"description": "Notification to supplier of contract termination: 406."
					},
					{
						"type": "string",
						"description": "Notification to supplier of metering point changes: 407."
					},
					{
						"type": "string",
						"description": "Notification of meter change: 408."
					},
					{
						"type": "string",
						"description": "Instructions for bank transfer: 409."
					},
					{
						"type": "string",
						"description": "Driving licence (international): 41."
					},
					{
						"type": "string",
						"description": "Notification of metering point identification change: 410."
					},
					{
						"type": "string",
						"description": "Utilities time series message: 411."
					},
					{
						"type": "string",
						"description": "Application for banker's draft: 412."
					},
					{
						"type": "string",
						"description": "Infrastructure condition: 413."
					},
					{
						"type": "string",
						"description": "Acknowledgement of change of supplier: 414."
					},
					{
						"type": "string",
						"description": "Data Plot Sheet: 415."
					},
					{
						"type": "string",
						"description": "Soil analysis: 416."
					},
					{
						"type": "string",
						"description": "Farmyard manure analysis: 417."
					},
					{
						"type": "string",
						"description": "WCO Cargo Report Export, Rail or Road: 418."
					},
					{
						"type": "string",
						"description": "WCO Cargo Report Export, Air or Maritime: 419."
					},
					{
						"type": "string",
						"description": "Free pass: 42."
					},
					{
						"type": "string",
						"description": "Optical Character Reading (OCR) payment credit note: 420."
					},
					{
						"type": "string",
						"description": "WCO Cargo Report Import, Rail or Road: 421."
					},
					{
						"type": "string",
						"description": "WCO Cargo Report Import, Air or Maritime: 422."
					},
					{
						"type": "string",
						"description": "WCO one-step export declaration: 423."
					},
					{
						"type": "string",
						"description": "WCO first step of two-step export declaration: 424."
					},
					{
						"type": "string",
						"description": "Collection payment advice: 425."
					},
					{
						"type": "string",
						"description": "Documentary credit payment advice: 426."
					},
					{
						"type": "string",
						"description": "Documentary credit acceptance advice: 427."
					},
					{
						"type": "string",
						"description": "Documentary credit negotiation advice: 428."
					},
					{
						"type": "string",
						"description": "Application for banker's guarantee: 429."
					},
					{
						"type": "string",
						"description": "Season ticket: 43."
					},
					{
						"type": "string",
						"description": "Banker's guarantee: 430."
					},
					{
						"type": "string",
						"description": "Documentary credit letter of indemnity: 431."
					},
					{
						"type": "string",
						"description": "Notification to grid operator of contract termination: 432."
					},
					{
						"type": "string",
						"description": "Notification to grid operator of metering point changes: 433."
					},
					{
						"type": "string",
						"description": "Notification of balance responsible entity change: 434."
					},
					{
						"type": "string",
						"description": "Preadvice of a credit: 435."
					},
					{
						"type": "string",
						"description": "Transport equipment profile report: 436."
					},
					{
						"type": "string",
						"description": "Request for price and delivery quote, specified end-user: 437."
					},
					{
						"type": "string",
						"description": "Request for price quote, ship and debit: 438."
					},
					{
						"type": "string",
						"description": "Request for price and delivery quote, ship and debit: 439."
					},
					{
						"type": "string",
						"description": "Transport status report: 44."
					},
					{
						"type": "string",
						"description": "Delivery point list.: 440."
					},
					{
						"type": "string",
						"description": "Transport routing information: 441."
					},
					{
						"type": "string",
						"description": "Request for delivery quote: 442."
					},
					{
						"type": "string",
						"description": "Request for price and delivery quote: 443."
					},
					{
						"type": "string",
						"description": "Request for contract price quote: 444."
					},
					{
						"type": "string",
						"description": "Request for contract price and delivery quote: 445."
					},
					{
						"type": "string",
						"description": "Request for price quote, specified end-customer: 446."
					},
					{
						"type": "string",
						"description": "Collection order: 447."
					},
					{
						"type": "string",
						"description": "Documents presentation form: 448."
					},
					{
						"type": "string",
						"description": "Identification match: 449."
					},
					{
						"type": "string",
						"description": "Transport status request: 45."
					},
					{
						"type": "string",
						"description": "Payment order: 450."
					},
					{
						"type": "string",
						"description": "Extended payment order: 451."
					},
					{
						"type": "string",
						"description": "Multiple payment order: 452."
					},
					{
						"type": "string",
						"description": "Notice that circumstances prevent payment of delivered goods: 453."
					},
					{
						"type": "string",
						"description": "Credit advice: 454."
					},
					{
						"type": "string",
						"description": "Extended credit advice: 455."
					},
					{
						"type": "string",
						"description": "Debit advice: 456."
					},
					{
						"type": "string",
						"description": "Reversal of debit: 457."
					},
					{
						"type": "string",
						"description": "Reversal of credit: 458."
					},
					{
						"type": "string",
						"description": "Travel ticket: 459."
					},
					{
						"type": "string",
						"description": "Banking status: 46."
					},
					{
						"type": "string",
						"description": "Documentary credit application: 460."
					},
					{
						"type": "string",
						"description": "Payment card: 461."
					},
					{
						"type": "string",
						"description": "Ready for transshipment despatch advice: 462."
					},
					{
						"type": "string",
						"description": "Pre-packed cross docking despatch advice: 463."
					},
					{
						"type": "string",
						"description": "Intermediate handling cross docking despatch advice: 464."
					},
					{
						"type": "string",
						"description": "Documentary credit: 465."
					},
					{
						"type": "string",
						"description": "Documentary credit notification: 466."
					},
					{
						"type": "string",
						"description": "Documentary credit transfer advice: 467."
					},
					{
						"type": "string",
						"description": "Documentary credit amendment notification: 468."
					},
					{
						"type": "string",
						"description": "Documentary credit amendment: 469."
					},
					{
						"type": "string",
						"description": "Extra-Community trade statistical declaration: 47."
					},
					{
						"type": "string",
						"description": "Waste disposal report: 470."
					},
					{
						"type": "string",
						"description": "Written instructions in conformance with ADR article number 10385: 48."
					},
					{
						"type": "string",
						"description": "Remittance advice: 481."
					},
					{
						"type": "string",
						"description": "Port authority waste disposal report: 482."
					},
					{
						"type": "string",
						"description": "Visa: 483."
					},
					{
						"type": "string",
						"description": "Multiple direct debit request: 484."
					},
					{
						"type": "string",
						"description": "Banker's draft: 485."
					},
					{
						"type": "string",
						"description": "Multiple direct debit: 486."
					},
					{
						"type": "string",
						"description": "Certificate of disembarkation permission: 487."
					},
					{
						"type": "string",
						"description": "Deratting exemption certificate: 488."
					},
					{
						"type": "string",
						"description": "Reefer connection order: 489."
					},
					{
						"type": "string",
						"description": "Damage certification: 49."
					},
					{
						"type": "string",
						"description": "Bill of exchange: 490."
					},
					{
						"type": "string",
						"description": "Promissory note: 491."
					},
					{
						"type": "string",
						"description": "Statement of account message: 493."
					},
					{
						"type": "string",
						"description": "Direct delivery (transport): 494."
					},
					{
						"type": "string",
						"description": "WCO second step of two-step export declaration: 495."
					},
					{
						"type": "string",
						"description": "WCO one-step import declaration: 496."
					},
					{
						"type": "string",
						"description": "WCO first step of two-step import declaration: 497."
					},
					{
						"type": "string",
						"description": "WCO second step of two-step import declaration: 498."
					},
					{
						"type": "string",
						"description": "Previous transport document: 499."
					},
					{
						"type": "string",
						"description": "Product performance report: 5."
					},
					{
						"type": "string",
						"description": "Validated priced tender: 50."
					},
					{
						"type": "string",
						"description": "Price/sales catalogue response: 51."
					},
					{
						"type": "string",
						"description": "Price negotiation result: 52."
					},
					{
						"type": "string",
						"description": "Insurance certificate: 520."
					},
					{
						"type": "string",
						"description": "Special requirements permit related to the transport of cargo: 521."
					},
					{
						"type": "string",
						"description": "Dangerous Goods Notification for Tanker vessel: 522."
					},
					{
						"type": "string",
						"description": "Dangerous Goods Notification for non-tanker vessel: 523."
					},
					{
						"type": "string",
						"description": "WCO Conveyance Arrival Report: 524."
					},
					{
						"type": "string",
						"description": "WCO Conveyance Departure Report: 525."
					},
					{
						"type": "string",
						"description": "Accounting voucher: 526."
					},
					{
						"type": "string",
						"description": "Self billed debit note: 527."
					},
					{
						"type": "string",
						"description": "Military Identification Card: 528."
					},
					{
						"type": "string",
						"description": "Re-Entry Permit: 529."
					},
					{
						"type": "string",
						"description": "Safety and hazard data sheet: 53."
					},
					{
						"type": "string",
						"description": "Insurance policy: 530."
					},
					{
						"type": "string",
						"description": "Refugee Permit: 531."
					},
					{
						"type": "string",
						"description": "Forwarder’s credit note: 532."
					},
					{
						"type": "string",
						"description": "Original accounting voucher: 533."
					},
					{
						"type": "string",
						"description": "Copy accounting voucher: 534."
					},
					{
						"type": "string",
						"description": "Pro-forma accounting voucher: 535."
					},
					{
						"type": "string",
						"description": "International Ship Security Certificate: 536."
					},
					{
						"type": "string",
						"description": "Interim International Ship Security Certificate: 537."
					},
					{
						"type": "string",
						"description": "Good Manufacturing Practice (GMP) Certificate: 538."
					},
					{
						"type": "string",
						"description": "Framework Agreement: 539."
					},
					{
						"type": "string",
						"description": "Legal statement of an account: 54."
					},
					{
						"type": "string",
						"description": "Listing statement of an account: 55."
					},
					{
						"type": "string",
						"description": "Insurance declaration sheet (bordereau): 550."
					},
					{
						"type": "string",
						"description": "Transport capacity offer: 551."
					},
					{
						"type": "string",
						"description": "Ship Security Plan: 552."
					},
					{
						"type": "string",
						"description": "Forwarder’s invoice discrepancy report: 553."
					},
					{
						"type": "string",
						"description": "Storage capacity offer: 554."
					},
					{
						"type": "string",
						"description": "Closing statement of an account: 56."
					},
					{
						"type": "string",
						"description": "Transport equipment on-hire report: 57."
					},
					{
						"type": "string",
						"description": "Insurer's invoice: 575."
					},
					{
						"type": "string",
						"description": "Storage capacity request: 576."
					},
					{
						"type": "string",
						"description": "Transport capacity request: 577."
					},
					{
						"type": "string",
						"description": "EU Customs declaration for External Community Transit (T1): 578."
					},
					{
						"type": "string",
						"description": "EU Customs declaration for internal Community Transit (T2): 579."
					},
					{
						"type": "string",
						"description": "Transport equipment off-hire report: 58."
					},
					{
						"type": "string",
						"description": "Cover note: 580."
					},
					{
						"type": "string",
						"description": "EU Customs declaration for non-fiscal area internal Community Transit (T2F): 581."
					},
					{
						"type": "string",
						"description": "EU Customs declaration for internal transit to San Marino (T2SM): 582."
					},
					{
						"type": "string",
						"description": "EU Customs declaration for mixed consignments (T): 583."
					},
					{
						"type": "string",
						"description": "EU Document for establishing the Community status of goods (T2L): 584."
					},
					{
						"type": "string",
						"description": "EU Document for establishing the Community status of goods for certain fiscal purposes (T2LF): 585."
					},
					{
						"type": "string",
						"description": "Document for establishing the Customs Status of goods for San Marino (T2LSM): 586."
					},
					{
						"type": "string",
						"description": "Customs declaration for TIR Carnet goods: 587."
					},
					{
						"type": "string",
						"description": "Transport Means Security Report: 588."
					},
					{
						"type": "string",
						"description": "Halal Slaughtering Certificate: 589."
					},
					{
						"type": "string",
						"description": "Treatment - nil outturn: 59."
					},
					{
						"type": "string",
						"description": "Product specification report: 6."
					},
					{
						"type": "string",
						"description": "Treatment - time-up underbond: 60."
					},
					{
						"type": "string",
						"description": "Treatment - underbond by sea: 61."
					},
					{
						"type": "string",
						"description": "Forwarding instructions: 610."
					},
					{
						"type": "string",
						"description": "Treatment - personal effect: 62."
					},
					{
						"type": "string",
						"description": "Forwarder's advice to import agent: 621."
					},
					{
						"type": "string",
						"description": "Forwarder's advice to exporter: 622."
					},
					{
						"type": "string",
						"description": "Forwarder's invoice: 623."
					},
					{
						"type": "string",
						"description": "Forwarder's certificate of receipt: 624."
					},
					{
						"type": "string",
						"description": "Heat Treatment Certificate: 625."
					},
					{
						"type": "string",
						"description": "Convention on International Trade in Endangered Species of Wild Fauna and Flora (CITES) Certificate: 626."
					},
					{
						"type": "string",
						"description": "Free Sale Certificate in the Country of Origin: 627."
					},
					{
						"type": "string",
						"description": "Transit license: 628."
					},
					{
						"type": "string",
						"description": "Veterinary quarantine certificate: 629."
					},
					{
						"type": "string",
						"description": "Treatment - timber: 63."
					},
					{
						"type": "string",
						"description": "Shipping note: 630."
					},
					{
						"type": "string",
						"description": "Forwarder's warehouse receipt: 631."
					},
					{
						"type": "string",
						"description": "Goods receipt: 632."
					},
					{
						"type": "string",
						"description": "Port charges documents: 633."
					},
					{
						"type": "string",
						"description": "Certified list of ingredients: 634."
					},
					{
						"type": "string",
						"description": "Warehouse warrant: 635."
					},
					{
						"type": "string",
						"description": "Health certificate: 636."
					},
					{
						"type": "string",
						"description": "Food grade certificate: 637."
					},
					{
						"type": "string",
						"description": "Certificate of suitability for transport of grains and legumes: 638."
					},
					{
						"type": "string",
						"description": "Certificate of refrigerated transport equipment inspection: 639."
					},
					{
						"type": "string",
						"description": "Preliminary credit assessment: 64."
					},
					{
						"type": "string",
						"description": "Delivery order: 640."
					},
					{
						"type": "string",
						"description": "Thermographic reading report: 641."
					},
					{
						"type": "string",
						"description": "Certificate of food item transport readiness: 642."
					},
					{
						"type": "string",
						"description": "Food packaging contact certificate: 643."
					},
					{
						"type": "string",
						"description": "Packaging material composition report: 644."
					},
					{
						"type": "string",
						"description": "Export price certificate: 645."
					},
					{
						"type": "string",
						"description": "Public price certificate: 646."
					},
					{
						"type": "string",
						"description": "Drug shelf life study report: 647."
					},
					{
						"type": "string",
						"description": "Certificate of compliance with standards of the World Organization for Animal Health (OIE): 648."
					},
					{
						"type": "string",
						"description": "Production facility license: 649."
					},
					{
						"type": "string",
						"description": "Credit cover: 65."
					},
					{
						"type": "string",
						"description": "Handling order: 650."
					},
					{
						"type": "string",
						"description": "Manufacturing license: 651."
					},
					{
						"type": "string",
						"description": "Low risk country formal letter: 652."
					},
					{
						"type": "string",
						"description": "Previous correspondence: 653."
					},
					{
						"type": "string",
						"description": "Declaration for radioactive material: 654."
					},
					{
						"type": "string",
						"description": "Gate pass: 655."
					},
					{
						"type": "string",
						"description": "Resale information: 656."
					},
					{
						"type": "string",
						"description": "Phytosanitary Re-export Certificate: 657."
					},
					{
						"type": "string",
						"description": "Bayplan/stowage plan, full: 658."
					},
					{
						"type": "string",
						"description": "Bayplan/stowage plan, partial: 659."
					},
					{
						"type": "string",
						"description": "Current account: 66."
					},
					{
						"type": "string",
						"description": "Commercial dispute: 67."
					},
					{
						"type": "string",
						"description": "Chargeback: 68."
					},
					{
						"type": "string",
						"description": "Reassignment: 69."
					},
					{
						"type": "string",
						"description": "Process data report: 7."
					},
					{
						"type": "string",
						"description": "Collateral account: 70."
					},
					{
						"type": "string",
						"description": "Waybill: 700."
					},
					{
						"type": "string",
						"description": "Universal (multipurpose) transport document: 701."
					},
					{
						"type": "string",
						"description": "Goods receipt, carriage: 702."
					},
					{
						"type": "string",
						"description": "House waybill: 703."
					},
					{
						"type": "string",
						"description": "Master bill of lading: 704."
					},
					{
						"type": "string",
						"description": "Bill of lading: 705."
					},
					{
						"type": "string",
						"description": "Bill of lading original: 706."
					},
					{
						"type": "string",
						"description": "Bill of lading copy: 707."
					},
					{
						"type": "string",
						"description": "Empty container bill: 708."
					},
					{
						"type": "string",
						"description": "Tanker bill of lading: 709."
					},
					{
						"type": "string",
						"description": "Request for payment: 71."
					},
					{
						"type": "string",
						"description": "Sea waybill: 710."
					},
					{
						"type": "string",
						"description": "Inland waterway bill of lading: 711."
					},
					{
						"type": "string",
						"description": "Non-negotiable maritime transport document (generic): 712."
					},
					{
						"type": "string",
						"description": "Mate's receipt: 713."
					},
					{
						"type": "string",
						"description": "House bill of lading: 714."
					},
					{
						"type": "string",
						"description": "Letter of indemnity for non-surrender of bill of lading: 715."
					},
					{
						"type": "string",
						"description": "Forwarder's bill of lading: 716."
					},
					{
						"type": "string",
						"description": "Residence permit: 717."
					},
					{
						"type": "string",
						"description": "Seaman’s book: 718."
					},
					{
						"type": "string",
						"description": "General message: 719."
					},
					{
						"type": "string",
						"description": "Unship permit: 72."
					},
					{
						"type": "string",
						"description": "Rail consignment note (generic term): 720."
					},
					{
						"type": "string",
						"description": "Product data response: 721."
					},
					{
						"type": "string",
						"description": "Road list-SMGS: 722."
					},
					{
						"type": "string",
						"description": "Escort official recognition: 723."
					},
					{
						"type": "string",
						"description": "Recharging document: 724."
					},
					{
						"type": "string",
						"description": "Manufacturer raised order: 725."
					},
					{
						"type": "string",
						"description": "Manufacturer raised consignment order: 726."
					},
					{
						"type": "string",
						"description": "Price/sales catalogue not containing commercial information: 727."
					},
					{
						"type": "string",
						"description": "Price/sales catalogue containing commercial information: 728."
					},
					{
						"type": "string",
						"description": "Returns advice: 729."
					},
					{
						"type": "string",
						"description": "Statistical definitions: 73."
					},
					{
						"type": "string",
						"description": "Road consignment note: 730."
					},
					{
						"type": "string",
						"description": "Commercial account summary: 731."
					},
					{
						"type": "string",
						"description": "Announcement for returns: 732."
					},
					{
						"type": "string",
						"description": "Instruction for returns: 733."
					},
					{
						"type": "string",
						"description": "Sales forecast report: 734."
					},
					{
						"type": "string",
						"description": "Sales data report: 735."
					},
					{
						"type": "string",
						"description": "Standing inquiry on complete product information: 736."
					},
					{
						"type": "string",
						"description": "Proof of delivery: 737."
					},
					{
						"type": "string",
						"description": "Cargo/goods handling and movement message: 738."
					},
					{
						"type": "string",
						"description": "Metered services consumption report supporting an invoice: 739."
					},
					{
						"type": "string",
						"description": "Statistical data: 74."
					},
					{
						"type": "string",
						"description": "Air waybill: 740."
					},
					{
						"type": "string",
						"description": "Master air waybill: 741."
					},
					{
						"type": "string",
						"description": "Metered services consumption report: 742."
					},
					{
						"type": "string",
						"description": "Substitute air waybill: 743."
					},
					{
						"type": "string",
						"description": "Crew's effects declaration: 744."
					},
					{
						"type": "string",
						"description": "Passenger list: 745."
					},
					{
						"type": "string",
						"description": "Delivery notice (rail transport): 746."
					},
					{
						"type": "string",
						"description": "Payroll deductions advice: 747."
					},
					{
						"type": "string",
						"description": "Consignment despatch advice: 748."
					},
					{
						"type": "string",
						"description": "Transport equipment gross mass verification message: 749."
					},
					{
						"type": "string",
						"description": "Request for statistical data: 75."
					},
					{
						"type": "string",
						"description": "Despatch note (post parcels): 750."
					},
					{
						"type": "string",
						"description": "Invoice information for accounting purposes: 751."
					},
					{
						"type": "string",
						"description": "Plant Passport: 752."
					},
					{
						"type": "string",
						"description": "Certificate of sustainability: 753."
					},
					{
						"type": "string",
						"description": "Call for tender: 754."
					},
					{
						"type": "string",
						"description": "Invitation to tender: 755."
					},
					{
						"type": "string",
						"description": "European Single Procurement Document request: 756."
					},
					{
						"type": "string",
						"description": "Tendering price/sales catalogue request: 757."
					},
					{
						"type": "string",
						"description": "Tender: 758."
					},
					{
						"type": "string",
						"description": "European Single Procurement Document: 759."
					},
					{
						"type": "string",
						"description": "Call-off delivery: 76."
					},
					{
						"type": "string",
						"description": "Multimodal/combined transport document (generic): 760."
					},
					{
						"type": "string",
						"description": "Through bill of lading: 761."
					},
					{
						"type": "string",
						"description": "Tendering price/sales catalogue: 762."
					},
					{
						"type": "string",
						"description": "Forwarder's certificate of transport: 763."
					},
					{
						"type": "string",
						"description": "Combined transport document (generic): 764."
					},
					{
						"type": "string",
						"description": "Multimodal transport document (generic): 765."
					},
					{
						"type": "string",
						"description": "Combined transport bill of lading/multimodal bill of lading: 766."
					},
					{
						"type": "string",
						"description": "Acknowledgment of receipt: 767."
					},
					{
						"type": "string",
						"description": "Civil status document: 768."
					},
					{
						"type": "string",
						"description": "Advice report: 769."
					},
					{
						"type": "string",
						"description": "Consignment status report: 77."
					},
					{
						"type": "string",
						"description": "Booking confirmation: 770."
					},
					{
						"type": "string",
						"description": "Binding offer: 771."
					},
					{
						"type": "string",
						"description": "Binding customer agreement for contract: 772."
					},
					{
						"type": "string",
						"description": "Coverage confirmation note: 773."
					},
					{
						"type": "string",
						"description": "General terms and conditions: 774."
					},
					{
						"type": "string",
						"description": "Calling forward notice: 775."
					},
					{
						"type": "string",
						"description": "Contract clauses: 776."
					},
					{
						"type": "string",
						"description": "Specific contract conditions: 777."
					},
					{
						"type": "string",
						"description": "Group insurance rules: 778."
					},
					{
						"type": "string",
						"description": "Questionnaire: 779."
					},
					{
						"type": "string",
						"description": "Inventory movement advice: 78."
					},
					{
						"type": "string",
						"description": "Freight invoice: 780."
					},
					{
						"type": "string",
						"description": "Arrival notice (goods): 781."
					},
					{
						"type": "string",
						"description": "Notice of circumstances preventing delivery (goods): 782."
					},
					{
						"type": "string",
						"description": "Notice of circumstances preventing transport (goods): 783."
					},
					{
						"type": "string",
						"description": "Delivery notice (goods): 784."
					},
					{
						"type": "string",
						"description": "Cargo manifest: 785."
					},
					{
						"type": "string",
						"description": "Freight manifest: 786."
					},
					{
						"type": "string",
						"description": "Bordereau: 787."
					},
					{
						"type": "string",
						"description": "Container manifest (unit packing list): 788."
					},
					{
						"type": "string",
						"description": "Charges note: 789."
					},
					{
						"type": "string",
						"description": "Inventory status advice: 79."
					},
					{
						"type": "string",
						"description": "Advice of collection: 790."
					},
					{
						"type": "string",
						"description": "Safety of ship certificate: 791."
					},
					{
						"type": "string",
						"description": "Safety of radio certificate: 792."
					},
					{
						"type": "string",
						"description": "Safety of equipment certificate: 793."
					},
					{
						"type": "string",
						"description": "Civil liability for oil certificate: 794."
					},
					{
						"type": "string",
						"description": "Loadline document: 795."
					},
					{
						"type": "string",
						"description": "Derat document: 796."
					},
					{
						"type": "string",
						"description": "Maritime declaration of health: 797."
					},
					{
						"type": "string",
						"description": "Certificate of registry: 798."
					},
					{
						"type": "string",
						"description": "Ship's stores declaration: 799."
					},
					{
						"type": "string",
						"description": "First sample test report: 8."
					},
					{
						"type": "string",
						"description": "Debit note related to goods or services: 80."
					},
					{
						"type": "string",
						"description": "Credit note related to goods or services: 81."
					},
					{
						"type": "string",
						"description": "Export licence, application for: 810."
					},
					{
						"type": "string",
						"description": "Export licence: 811."
					},
					{
						"type": "string",
						"description": "Exchange control declaration, export: 812."
					},
					{
						"type": "string",
						"description": "Declaration of final beneficiary: 813."
					},
					{
						"type": "string",
						"description": "US, FATCA statement: 814."
					},
					{
						"type": "string",
						"description": "Insured status report: 815."
					},
					{
						"type": "string",
						"description": "Group pension commitment information: 816."
					},
					{
						"type": "string",
						"description": "Claim notification: 817."
					},
					{
						"type": "string",
						"description": "Assessment report: 818."
					},
					{
						"type": "string",
						"description": "Loss statement: 819."
					},
					{
						"type": "string",
						"description": "Metered services invoice: 82."
					},
					{
						"type": "string",
						"description": "Despatch note model T: 820."
					},
					{
						"type": "string",
						"description": "Despatch note model T1: 821."
					},
					{
						"type": "string",
						"description": "Despatch note model T2: 822."
					},
					{
						"type": "string",
						"description": "Control document T5: 823."
					},
					{
						"type": "string",
						"description": "Re-sending consignment note: 824."
					},
					{
						"type": "string",
						"description": "Despatch note model T2L: 825."
					},
					{
						"type": "string",
						"description": "Guarantee of cost acceptance: 826."
					},
					{
						"type": "string",
						"description": "Close of claim: 827."
					},
					{
						"type": "string",
						"description": "Refusal of claim: 828."
					},
					{
						"type": "string",
						"description": "Valuation report: 829."
					},
					{
						"type": "string",
						"description": "Credit note related to financial adjustments: 83."
					},
					{
						"type": "string",
						"description": "Goods declaration for exportation: 830."
					},
					{
						"type": "string",
						"description": "Claim history certificate: 831."
					},
					{
						"type": "string",
						"description": "Accounting statement: 832."
					},
					{
						"type": "string",
						"description": "Cargo declaration (departure): 833."
					},
					{
						"type": "string",
						"description": "Payment receipt confirmation: 834."
					},
					{
						"type": "string",
						"description": "Certificate of paid insurance premium: 835."
					},
					{
						"type": "string",
						"description": "Insured party payment report: 836."
					},
					{
						"type": "string",
						"description": "Third party payment report: 837."
					},
					{
						"type": "string",
						"description": "Direct debit authorisation: 838."
					},
					{
						"type": "string",
						"description": "Physician report: 839."
					},
					{
						"type": "string",
						"description": "Debit note related to financial adjustments: 84."
					},
					{
						"type": "string",
						"description": "Application for goods control certificate: 840."
					},
					{
						"type": "string",
						"description": "Goods control certificate: 841."
					},
					{
						"type": "string",
						"description": "Medical certificate: 842."
					},
					{
						"type": "string",
						"description": "Witness report: 843."
					},
					{
						"type": "string",
						"description": "Calculation note: 844."
					},
					{
						"type": "string",
						"description": "Communication from opposite party: 845."
					},
					{
						"type": "string",
						"description": "Amicable agreement: 846."
					},
					{
						"type": "string",
						"description": "Out of court settlement: 847."
					},
					{
						"type": "string",
						"description": "Legal action: 848."
					},
					{
						"type": "string",
						"description": "Summons: 849."
					},
					{
						"type": "string",
						"description": "Customs manifest: 85."
					},
					{
						"type": "string",
						"description": "Application for phytosanitary certificate: 850."
					},
					{
						"type": "string",
						"description": "Phytosanitary certificate: 851."
					},
					{
						"type": "string",
						"description": "Sanitary certificate: 852."
					},
					{
						"type": "string",
						"description": "Veterinary certificate: 853."
					},
					{
						"type": "string",
						"description": "Court judgment: 854."
					},
					{
						"type": "string",
						"description": "Application for inspection certificate: 855."
					},
					{
						"type": "string",
						"description": "Inspection certificate: 856."
					},
					{
						"type": "string",
						"description": "Vehicle aboard document: 857."
					},
					{
						"type": "string",
						"description": "Image: 858."
					},
					{
						"type": "string",
						"description": "Audio: 859."
					},
					{
						"type": "string",
						"description": "Vessel unpack report: 86."
					},
					{
						"type": "string",
						"description": "Certificate of origin, application for: 860."
					},
					{
						"type": "string",
						"description": "Certificate of origin: 861."
					},
					{
						"type": "string",
						"description": "Declaration of origin: 862."
					},
					{
						"type": "string",
						"description": "Regional appellation certificate: 863."
					},
					{
						"type": "string",
						"description": "Preference certificate of origin: 864."
					},
					{
						"type": "string",
						"description": "Certificate of origin form GSP: 865."
					},
					{
						"type": "string",
						"description": "Video: 866."
					},
					{
						"type": "string",
						"description": "Introductory letter: 867."
					},
					{
						"type": "string",
						"description": "Data protection regulations statement: 868."
					},
					{
						"type": "string",
						"description": "Exclusive brokerage mandate: 869."
					},
					{
						"type": "string",
						"description": "General cargo summary manifest report: 87."
					},
					{
						"type": "string",
						"description": "Consular invoice: 870."
					},
					{
						"type": "string",
						"description": "Inquiry mandate: 871."
					},
					{
						"type": "string",
						"description": "Risk analysis: 872."
					},
					{
						"type": "string",
						"description": "Transport equipment movement report, partial: 873."
					},
					{
						"type": "string",
						"description": "Conveyance declaration: 874."
					},
					{
						"type": "string",
						"description": "Partial construction invoice: 875."
					},
					{
						"type": "string",
						"description": "Partial final construction invoice: 876."
					},
					{
						"type": "string",
						"description": "Final construction invoice: 877."
					},
					{
						"type": "string",
						"description": "AEO Certificate of Security and/or Safety: 878."
					},
					{
						"type": "string",
						"description": "AEO Certificate of Conformity or Compliance: 879."
					},
					{
						"type": "string",
						"description": "Consignment unpack report: 88."
					},
					{
						"type": "string",
						"description": "Meat and meat by-products sanitary certificate: 89."
					},
					{
						"type": "string",
						"description": "Dangerous goods declaration: 890."
					},
					{
						"type": "string",
						"description": "AEO Certificate Full: 891."
					},
					{
						"type": "string",
						"description": "Purchase Order Financing Request: 892."
					},
					{
						"type": "string",
						"description": "Purchase Order Financing Request Status: 893."
					},
					{
						"type": "string",
						"description": "Purchase Order Financing Request Cancellation: 894."
					},
					{
						"type": "string",
						"description": "Statistical document, export: 895."
					},
					{
						"type": "string",
						"description": "INTRASTAT declaration: 896."
					},
					{
						"type": "string",
						"description": "Transit certificate of approval: 897."
					},
					{
						"type": "string",
						"description": "Pre-packed cross docking consignment order: 898."
					},
					{
						"type": "string",
						"description": "Traceability event declaration: 899."
					},
					{
						"type": "string",
						"description": "Price/sales catalogue: 9."
					},
					{
						"type": "string",
						"description": "Meat food products sanitary certificate: 90."
					},
					{
						"type": "string",
						"description": "Sustainability data request: 900."
					},
					{
						"type": "string",
						"description": "Delivery verification certificate: 901."
					},
					{
						"type": "string",
						"description": "Sustainability data response: 902."
					},
					{
						"type": "string",
						"description": "Sustainability Inspection request: 903."
					},
					{
						"type": "string",
						"description": "Sustainability Inspection response: 904."
					},
					{
						"type": "string",
						"description": "Air Consignment Security Declaration: 905."
					},
					{
						"type": "string",
						"description": "Poultry sanitary certificate: 91."
					},
					{
						"type": "string",
						"description": "Import licence, application for: 910."
					},
					{
						"type": "string",
						"description": "Import licence: 911."
					},
					{
						"type": "string",
						"description": "Customs declaration without commercial detail: 913."
					},
					{
						"type": "string",
						"description": "Customs declaration with commercial and item detail: 914."
					},
					{
						"type": "string",
						"description": "Customs declaration without item detail: 915."
					},
					{
						"type": "string",
						"description": "Related document: 916."
					},
					{
						"type": "string",
						"description": "Receipt (Customs): 917."
					},
					{
						"type": "string",
						"description": "Horsemeat sanitary certificate: 92."
					},
					{
						"type": "string",
						"description": "Application for exchange allocation: 925."
					},
					{
						"type": "string",
						"description": "Foreign exchange permit: 926."
					},
					{
						"type": "string",
						"description": "Exchange control declaration (import): 927."
					},
					{
						"type": "string",
						"description": "Goods declaration for importation: 929."
					},
					{
						"type": "string",
						"description": "Casing sanitary certificate: 93."
					},
					{
						"type": "string",
						"description": "Goods declaration for home use: 930."
					},
					{
						"type": "string",
						"description": "Customs immediate release declaration: 931."
					},
					{
						"type": "string",
						"description": "Customs delivery note: 932."
					},
					{
						"type": "string",
						"description": "Cargo declaration (arrival): 933."
					},
					{
						"type": "string",
						"description": "Value declaration: 934."
					},
					{
						"type": "string",
						"description": "Customs invoice: 935."
					},
					{
						"type": "string",
						"description": "Customs declaration (post parcels): 936."
					},
					{
						"type": "string",
						"description": "Tax declaration (value added tax): 937."
					},
					{
						"type": "string",
						"description": "Tax declaration (general): 938."
					},
					{
						"type": "string",
						"description": "Pharmaceutical sanitary certificate: 94."
					},
					{
						"type": "string",
						"description": "Tax demand: 940."
					},
					{
						"type": "string",
						"description": "Embargo permit: 941."
					},
					{
						"type": "string",
						"description": "Inedible sanitary certificate: 95."
					},
					{
						"type": "string",
						"description": "Goods declaration for Customs transit: 950."
					},
					{
						"type": "string",
						"description": "TIF form: 951."
					},
					{
						"type": "string",
						"description": "TIR carnet: 952."
					},
					{
						"type": "string",
						"description": "EC carnet: 953."
					},
					{
						"type": "string",
						"description": "EUR 1 certificate of origin: 954."
					},
					{
						"type": "string",
						"description": "ATA carnet: 955."
					},
					{
						"type": "string",
						"description": "Impending arrival: 96."
					},
					{
						"type": "string",
						"description": "Single administrative document: 960."
					},
					{
						"type": "string",
						"description": "General response (Customs): 961."
					},
					{
						"type": "string",
						"description": "Document response (Customs): 962."
					},
					{
						"type": "string",
						"description": "Error response (Customs): 963."
					},
					{
						"type": "string",
						"description": "Package response (Customs): 964."
					},
					{
						"type": "string",
						"description": "Tax calculation/confirmation response (Customs): 965."
					},
					{
						"type": "string",
						"description": "Quota prior allocation certificate: 966."
					},
					{
						"type": "string",
						"description": "Means of transport advice: 97."
					},
					{
						"type": "string",
						"description": "Wagon report: 970."
					},
					{
						"type": "string",
						"description": "Transit Conveyor Document: 971."
					},
					{
						"type": "string",
						"description": "Rail consignment note forwarder copy: 972."
					},
					{
						"type": "string",
						"description": "Duty suspended goods: 974."
					},
					{
						"type": "string",
						"description": "Proof of transit declaration: 975."
					},
					{
						"type": "string",
						"description": "Container transfer note: 976."
					},
					{
						"type": "string",
						"description": "NATO transit document: 977."
					},
					{
						"type": "string",
						"description": "Transfrontier waste shipment authorization: 978."
					},
					{
						"type": "string",
						"description": "Transfrontier waste shipment movement document: 979."
					},
					{
						"type": "string",
						"description": "Arrival information: 98."
					},
					{
						"type": "string",
						"description": "Cargo release notification: 99."
					},
					{
						"type": "string",
						"description": "End use authorization: 990."
					},
					{
						"type": "string",
						"description": "Government contract: 991."
					},
					{
						"type": "string",
						"description": "Statistical document, import: 995."
					},
					{
						"type": "string",
						"description": "Application for documentary credit: 996."
					},
					{
						"type": "string",
						"description": "Previous Customs document/message: 998."
					}
				],
				"description": "A character string denoting the type of a document. [Reference United Nations Code List (UNCL) 1001] https://vocabulary.uncefact.org/DocumentCodeList https://github.com/uncefact/vocabulary-outputs/blob/main/_data/documentcodelist.json"
			},
			"VerifiableStorageCreateRequest": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data for the verifiable storage item, this is a string serialized as base64."
					},
					"allowList": {
						"type": "array",
						"items": false,
						"description": "The list of identities that are allowed to modify the item.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"maxAllowListSize": {
						"type": "number",
						"description": "The maximum size of the allow list.",
						"default": 100
					},
					"namespace": {
						"type": "string",
						"description": "The namespace of the connector to use for the verifiable storage item, defaults to component configured namespace."
					}
				},
				"required": [
					"data"
				],
				"additionalProperties": false,
				"description": "The data to be stored."
			},
			"VerifiableStorageCreateResponse": {
				"type": "object",
				"properties": {
					"receipt": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"id": {
						"type": "string",
						"description": "The id of the verifiable storage item."
					}
				},
				"required": [
					"receipt",
					"id"
				],
				"additionalProperties": false,
				"description": "The data that was stored."
			},
			"VerifiableStorageGetRequest": {
				"type": "object",
				"properties": {
					"includeData": {
						"type": "boolean",
						"description": "The flag to include the data.",
						"default": true
					},
					"includeAllowList": {
						"type": "boolean",
						"description": "The flag to include the allow list.",
						"default": true
					}
				},
				"additionalProperties": false,
				"description": "The body optional param."
			},
			"VerifiableStorageGetResponse": {
				"type": "object",
				"properties": {
					"receipt": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"data": {
						"type": "string",
						"description": "The data of the verifiable storage item, this is a string serialized as base64."
					},
					"allowList": {
						"type": "array",
						"items": false,
						"description": "The list of identities that are allowed to modify the item.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					}
				},
				"required": [
					"receipt"
				],
				"additionalProperties": false,
				"description": "The data that was obtained."
			},
			"VerifiableStorageUpdateRequest": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data which is a string serialized as base64, leave empty if just updating the allow list."
					},
					"allowList": {
						"type": "array",
						"items": false,
						"description": "An updated list of identities that are allowed to modify the item, send an empty list to remove all entries.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The data to be updated."
			},
			"VerifyDepth": {
				"anyOf": [
					{
						"type": "string",
						"const": "none",
						"description": "Do not verify any signatures."
					},
					{
						"type": "string",
						"const": "current",
						"description": "Verify only the most recent signature."
					},
					{
						"type": "string",
						"const": "all",
						"description": "Verify all the signatures."
					}
				],
				"description": "How deep to verify the signatures."
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
