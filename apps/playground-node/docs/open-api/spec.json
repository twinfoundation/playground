{
	"openapi": "3.1.1",
	"info": {
		"title": "TWIN Playground Node",
		"description": "REST API for TWIN - API Server.",
		"version": "1.0.0",
		"license": {
			"name": "Apache 2.0 License",
			"url": "https://opensource.org/licenses/Apache-2.0"
		}
	},
	"servers": [
		{
			"url": "https://playground-api.twindev.org"
		}
	],
	"tags": [
		{
			"name": "Info",
			"description": "Information endpoints for the REST server."
		},
		{
			"name": "Authentication",
			"description": "Authentication endpoints for the REST server."
		},
		{
			"name": "Identity",
			"description": "Service to provide all features related to digital identity."
		},
		{
			"name": "Identity Profile",
			"description": "Service to provide all features related to digital identity profiles."
		},
		{
			"name": "Blob Storage",
			"description": "Endpoints which are modelled to access a blob storage contract."
		},
		{
			"name": "Telemetry",
			"description": "Endpoints which are modelled to access a telemetry contract."
		},
		{
			"name": "Logging",
			"description": "Endpoints which are modelled to access a logging contract."
		},
		{
			"name": "NFT",
			"description": "Endpoints which are modelled to access an NFT contract."
		},
		{
			"name": "Attestation",
			"description": "Endpoints which are modelled to access an attestation contract."
		},
		{
			"name": "VerifiableStorage",
			"description": "Endpoints which are modelled to access a verifiable storage."
		},
		{
			"name": "Immutable Proof",
			"description": "Endpoints which are modelled to access an immutable proof contract."
		},
		{
			"name": "Data Processing",
			"description": "Endpoints which are modelled to access a data processing contract."
		},
		{
			"name": "Document Management",
			"description": "Endpoints which are modelled to access a document management contract."
		},
		{
			"name": "Auditable Item Graph",
			"description": "Endpoints which are modelled to access an auditable item graph contract."
		},
		{
			"name": "Auditable Item Stream",
			"description": "Endpoints which are modelled to access an auditable item stream contract."
		},
		{
			"name": "Federated Catalogue",
			"description": "Endpoints to access a Federated Catalogue."
		}
	],
	"paths": {
		"/info": {
			"get": {
				"operationId": "serverInformation",
				"summary": "Get the information for the server",
				"tags": [
					"Info"
				],
				"responses": {
					"200": {
						"description": "The information about the server.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServerInfo"
								},
								"examples": {
									"informationResponse": {
										"summary": "The response for the information request.",
										"value": {
											"name": "API Server",
											"version": "1.0.0"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/health": {
			"get": {
				"operationId": "serverHealth",
				"summary": "Get the health for the server",
				"tags": [
					"Info"
				],
				"responses": {
					"200": {
						"description": "The health of the server.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthInfo"
								},
								"examples": {
									"healthResponseOK": {
										"summary": "The response for the health request.",
										"value": {
											"status": "ok",
											"components": [
												{
													"name": "Database",
													"status": "ok"
												},
												{
													"name": "Storage",
													"status": "ok"
												}
											]
										}
									},
									"healthResponseWarning": {
										"summary": "The response for the health request with warnings.",
										"value": {
											"status": "warning",
											"components": [
												{
													"name": "Database",
													"status": "warning",
													"details": "The database is running slow."
												},
												{
													"name": "Storage",
													"status": "ok"
												}
											]
										}
									},
									"healthResponseError": {
										"summary": "The response for the health request with errors.",
										"value": {
											"status": "error",
											"components": [
												{
													"name": "Database",
													"status": "ok"
												},
												{
													"name": "Storage",
													"status": "error",
													"details": "The storage is full."
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/spec": {
			"get": {
				"operationId": "serverSpec",
				"summary": "Get the OpenAPI specification for the endpoints",
				"tags": [
					"Info"
				],
				"responses": {
					"200": {
						"description": "The OpenAPI spec for the endpoints.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ServerSpecResponse"
								},
								"examples": {
									"specResponse": {
										"summary": "The response for the spec request.",
										"value": {
											"openapi": "3.1.0",
											"info": {},
											"paths": {}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/login": {
			"post": {
				"operationId": "authenticationLogin",
				"summary": "Login to the server",
				"tags": [
					"Authentication"
				],
				"requestBody": {
					"description": "Perform a login on the server.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							},
							"examples": {
								"loginRequestExample": {
									"summary": "The request to login to the server.",
									"value": {
										"email": "user@example.com",
										"password": "MyPassword123!"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response from a login on the server.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								},
								"examples": {
									"loginResponseExample": {
										"summary": "The response for the login request.",
										"value": {
											"token": "eyJhbGciOiJIU...sw5c",
											"expiry": 1722514341067
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/logout": {
			"get": {
				"operationId": "authenticationLogout",
				"summary": "Logout from the server",
				"tags": [
					"Authentication"
				],
				"parameters": [
					{
						"name": "token",
						"description": "The token to logout, if it uses a mechanism with public access.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJhbGciOiJIU...sw5c"
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/refresh": {
			"get": {
				"operationId": "authenticationRefreshToken",
				"summary": "Refresh an authentication token",
				"tags": [
					"Authentication"
				],
				"parameters": [
					{
						"name": "token",
						"description": "The token to refresh, if it uses a mechanism with public access.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJhbGciOiJIU...sw5c"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response from a refresh on the auth token.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RefreshTokenResponse"
								},
								"examples": {
									"refreshTokenResponseExample": {
										"summary": "The response for the refresh token request.",
										"value": {
											"token": "eyJhbGciOiJIU...sw5c",
											"expiry": 1722514341067
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/authentication/{email}/password": {
			"put": {
				"operationId": "authenticationUpdatePassword",
				"summary": "Update the user's password",
				"tags": [
					"Authentication"
				],
				"parameters": [
					{
						"name": "email",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "john:example.com"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}": {
			"get": {
				"operationId": "identityResolve",
				"summary": "Resolve an identity",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"responses": {
					"200": {
						"description": "Response to resolving an identity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidDocument"
								},
								"examples": {
									"identityResolveResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/did/v1",
											"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a",
											"service": [
												{
													"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a#revocation",
													"type": "RevocationBitmap2022",
													"serviceEndpoint": "data:application/octet-stream;base64,eJyzMmAAAwABr"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity": {
			"post": {
				"operationId": "identityCreate",
				"summary": "Create an identity",
				"tags": [
					"Identity"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an identity.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityCreateRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating an identity.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidDocument"
								},
								"examples": {
									"identityCreateResponseExample": {
										"value": {
											"@context": "https://www.w3.org/ns/did/v1",
											"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a",
											"service": [
												{
													"id": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a#revocation",
													"type": "RevocationBitmap2022",
													"serviceEndpoint": "data:application/octet-stream;base64,eJyzMmAAAwABr"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verification-method": {
			"post": {
				"operationId": "identityVerificationMethodCreate",
				"summary": "Create an identity verification method",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification method for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verification method.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerificationMethodCreateRequest"
							},
							"examples": {
								"identityVerificationMethodCreateRequestExample": {
									"value": {
										"verificationMethodType": "assertionMethod",
										"verificationMethodId": "my-assertion"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verification method.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidDocumentVerificationMethod"
								},
								"examples": {
									"identityVerificationMethodCreateResponseExample": {
										"value": {
											"id": "did:iota:tst:0x70ce5abe69e7c56dd69684dd6da65812b9758b03a0081331ca560b34d73d5ff0#my-assertion",
											"controller": "did:iota:tst:0x70ce5abe69e7c56dd69684dd6da65812b9758b03a0081331ca560b34d73d5ff0",
											"type": "JsonWebKey2020",
											"publicKeyJwk": {
												"kty": "OKP",
												"alg": "EdDSA",
												"kid": "f_fj3rGsZFSYvnS_xv5MgyIBlExq-lgDciu0YQ--S3s",
												"crv": "Ed25519",
												"x": "SFm32z7y9C17olpaTeocG25WV2CNTUl5MhM679Z4bok"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verification-method/{verificationMethodId}": {
			"delete": {
				"operationId": "identityVerificationMethodRemove",
				"summary": "Remove an identity verification method",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to remove the verification method from.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					},
					{
						"name": "verificationMethodId",
						"description": "The verification method to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-assertion"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/service": {
			"post": {
				"operationId": "identityServiceCreate",
				"summary": "Create an identity service",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the service for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a service.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityServiceCreateRequest"
							},
							"examples": {
								"identityServiceCreateRequestExample": {
									"value": {
										"serviceId": "did:example:123#linked-domain",
										"type": "LinkedDomains",
										"endpoint": "https://bar.example.com"
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a service.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/DidService"
								},
								"examples": {
									"identityServiceCreateResponseExample": {
										"value": {
											"id": "did:example:123#linked-domain",
											"type": "LinkedDomains",
											"serviceEndpoint": "https://bar.example.com"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/service/{serviceId}": {
			"delete": {
				"operationId": "identityServiceRemove",
				"summary": "Remove an identity service",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to remove the service from.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xe3088ba9aa8c28e1d139708a14e8c0fdff11ee8223baac4aa5bcf3321e4bfc6a"
					},
					{
						"name": "serviceId",
						"description": "The service to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:example:123#linked-domain"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential": {
			"post": {
				"operationId": "identityVerifiableCredentialCreate",
				"summary": "Create an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verifiable credential.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerifiableCredentialCreateRequest"
							},
							"examples": {
								"identityVerifiableCredentialCreateRequestExample": {
									"value": {
										"credentialId": "https://example.com/credentials/3732",
										"subject": {
											"@context": "https://schema.org",
											"@type": "Person",
											"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
											"name": "Jane Doe"
										},
										"revocationIndex": 5
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verifiable credential.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiableCredentialCreateResponse"
								},
								"examples": {
									"identityVerifiableCredentialCreateResponseExample": {
										"value": {
											"verifiableCredential": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "https://example.com/credentials/3732",
												"type": [
													"VerifiableCredential",
													"Person"
												],
												"credentialSubject": {
													"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
													"name": "Jane Doe"
												},
												"issuer": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a",
												"issuanceDate": "2025-01-24T09:21:51.500Z",
												"credentialStatus": {
													"id": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a#revocation",
													"type": "BitstringStatusList",
													"revocationBitmapIndex": "5"
												}
											},
											"jwt": "eyJraWQiOi...D1Z3AQ"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/verifiable-credential/verify": {
			"get": {
				"operationId": "identityVerifiableCredentialVerify",
				"summary": "Verify an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "jwt",
						"description": "The jwt to verify.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJraWQiOi...D1Z3AQ"
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying a verifiable credential.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiableCredentialVerifyResponse"
								},
								"examples": {
									"identityVerifiableCredentialVerifyResponseExample": {
										"value": {
											"revoked": false,
											"verifiableCredential": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "https://example.com/credentials/3732",
												"type": [
													"VerifiableCredential",
													"Person"
												],
												"credentialSubject": {
													"id": "did:entity-storage:0x4757993355b921a8229bd780f30921b6a0216a72e6c3f37a09d13b8426a17def",
													"name": "Jane Doe"
												},
												"issuer": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a",
												"issuanceDate": "2025-01-24T09:21:51.500Z",
												"credentialStatus": {
													"id": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a#revocation",
													"type": "BitstringStatusList",
													"revocationBitmapIndex": "5"
												}
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential/revoke/{revocationIndex}": {
			"get": {
				"operationId": "identityVerifiableCredentialRevoke",
				"summary": "Revoke an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to revoke the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					},
					{
						"name": "revocationIndex",
						"description": "The revocation index to revoke.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "number"
						},
						"style": "simple",
						"example": 5
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-credential/unrevoke/{revocationIndex}": {
			"get": {
				"operationId": "identityVerifiableCredentialUnrevoke",
				"summary": "Unrevoke an identity verifiable credential",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to unrevoke the verification credential for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					},
					{
						"name": "revocationIndex",
						"description": "The revocation index to unrevoke.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "number"
						},
						"style": "simple",
						"example": 5
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/verifiable-presentation": {
			"post": {
				"operationId": "identityVerifiablePresentationCreate",
				"summary": "Create an identity verifiable presentation",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the verification presentation for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0x879c31386f992cfa29b77fe31e37256d69f6a57653cee4eb60ad4c4613c5515a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a verifiable presentation.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityVerifiablePresentationCreateRequest"
							},
							"examples": {
								"identityVerifiablePresentationCreateRequestExample": {
									"value": {
										"presentationId": "https://example.com/presentation/3732",
										"verifiableCredentials": [
											"eyJraWQiOi...D1Z3AQ"
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a verifiable presentation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiablePresentationCreateResponse"
								},
								"examples": {
									"IIdentityVerifiablePresentationCreateResponseExample": {
										"value": {
											"verifiablePresentation": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "presentationId",
												"type": [
													"VerifiablePresentation",
													"Person"
												],
												"verifiableCredential": [
													"eyJraWQiOi...D1Z3AQ"
												],
												"holder": "did:entity-storage:0xcea318e06e89f3fb4048160770effd84d0cfa5801fee13dfa6f9413a00429cec"
											},
											"jwt": "eyJraWQiOi...D1Z3AQ"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/verifiable-presentation/verify": {
			"get": {
				"operationId": "identityVerifiablePresentationVerify",
				"summary": "Verify an identity verifiable presentation",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "jwt",
						"description": "The jwt to verify.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "eyJraWQiOi...D1Z3AQ"
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying a verifiable presentation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityVerifiablePresentationVerifyResponse"
								},
								"examples": {
									"identityVerifiablePresentationVerifyResponseExample": {
										"value": {
											"revoked": false,
											"verifiablePresentation": {
												"@context": [
													"https://www.w3.org/ns/credentials/v2",
													"https://schema.org"
												],
												"id": "presentationId",
												"type": [
													"VerifiablePresentation",
													"Person"
												],
												"verifiableCredential": [
													"eyJraWQiOi...D1Z3AQ"
												],
												"holder": "did:entity-storage:0xcea318e06e89f3fb4048160770effd84d0cfa5801fee13dfa6f9413a00429cec"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/{identity}/proof": {
			"post": {
				"operationId": "identityProofCreate",
				"summary": "Create an identity proof",
				"tags": [
					"Identity"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to create the proof for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:entity-storage:0xda2df3ebc91ee0d5229d6532ffd0f4426952a94f34988b0ca906694dfd366a6a"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProofCreateRequest"
							},
							"examples": {
								"identityProofCreateRequestExample": {
									"value": {
										"proofType": "DataIntegrityProof",
										"document": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
											"type": [
												"VerifiableCredential",
												"AlumniCredential"
											],
											"name": "Alumni Credential",
											"description": "A minimum viable example of an Alumni Credential.",
											"issuer": "https://vc.example/issuers/5678",
											"validFrom": "2023-01-01T00:00:00Z",
											"credentialSubject": {
												"id": "did:example:abcdefgh",
												"alumniOf": "The School of Examples"
											}
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to creating a proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/w3c-did/Proof"
								},
								"examples": {
									"identityProofCreateResponseExample": {
										"value": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"type": "DataIntegrityProof",
											"cryptosuite": "eddsa-jcs-2022",
											"created": "2024-01-31T16:00:45.490Z",
											"verificationMethod": "did:entity-storage:0x0101010101010101010101010101010101010101010101010101010101010101#my-verification-id",
											"proofPurpose": "assertionMethod",
											"proofValue": "z2zGoejwpX6HH2T11BZaniEVZrqRKDpwbQSvPcL7eL9M7hV5P9zQQZxs85n6qyDzkkXCL8aFUWfwQD5bxVGqDK1fa"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/proof/verify": {
			"post": {
				"operationId": "identityProofVerify",
				"summary": "Verify an identity proof",
				"tags": [
					"Identity"
				],
				"requestBody": {
					"description": "Request to verify a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProofVerifyRequest"
							},
							"examples": {
								"identityProofVerifyRequestExample": {
									"value": {
										"document": {
											"@context": [
												"https://www.w3.org/ns/credentials/v2",
												"https://www.w3.org/ns/credentials/examples/v2"
											],
											"id": "urn:uuid:58172aac-d8ba-11ed-83dd-0b3aef56cc33",
											"type": [
												"VerifiableCredential",
												"AlumniCredential"
											],
											"name": "Alumni Credential",
											"description": "A minimum viable example of an Alumni Credential.",
											"issuer": "https://vc.example/issuers/5678",
											"validFrom": "2023-01-01T00:00:00Z",
											"credentialSubject": {
												"id": "did:example:abcdefgh",
												"alumniOf": "The School of Examples"
											}
										},
										"proof": {
											"@context": "https://www.w3.org/ns/credentials/v2",
											"type": "DataIntegrityProof",
											"cryptosuite": "eddsa-jcs-2022",
											"created": "2025-01-24T11:32:13.106Z",
											"verificationMethod": "did:entity-storage:0xda2df3ebc91ee0d5229d6532ffd0f4426952a94f34988b0ca906694dfd366a6a#my-verification-id",
											"proofPurpose": "assertionMethod",
											"proofValue": "2fVLgANruCBoRPBCJavi54mZtkQdyMz6T2N4XVyB96asawiriKrVWoktcSQ7dMGrBTiemBBDpcLE2HfiTBCGuBmq"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to verifying a proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProofVerifyResponse"
								},
								"examples": {
									"identityProofVerifyResponseExample": {
										"value": {
											"verified": true
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile": {
			"post": {
				"operationId": "identityProfileCreate",
				"summary": "Create an identity profile",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an identity profile.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProfileCreateRequest"
							},
							"examples": {
								"identityProfileCreateRequestExample": {
									"value": {
										"publicProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										},
										"privateProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"telephone": "(425) 123-4567",
											"url": "http://www.janedoe.com"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "The request resulted in a conflicting operation, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ConflictResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "ConflictError",
											"message": "component.error",
											"properties": {
												"conflicts": [
													"1"
												]
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "identityProfileGet",
				"summary": "Get the identity profile properties",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "publicPropertyNames",
						"description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "name,jobTitle"
					},
					{
						"name": "privatePropertyNames",
						"description": "The private properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an identity details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProfileGetResponse"
								},
								"examples": {
									"identityGetResponseExample": {
										"value": {
											"identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"publicProfile": {
												"@context": "https://schema.org",
												"@type": "Person",
												"jobTitle": "Professor",
												"name": "Jane Doe"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "identityProfileUpdate",
				"summary": "Update an identity profile properties",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update an identity profile.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IdentityProfileUpdateRequest"
							},
							"examples": {
								"identityProfileUpdateRequestExample": {
									"value": {
										"publicProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										},
										"privateProfile": {
											"@context": "https://schema.org",
											"@type": "Person",
											"telephone": "(425) 123-4567",
											"url": "http://www.janedoe.com"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "identityProfileRemove",
				"summary": "Remove an identity profile",
				"tags": [
					"Identity Profile"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile/{identity}/public": {
			"get": {
				"operationId": "identityProfileGetPublic",
				"summary": "Get the identity profile public properties",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "identity",
						"description": "The identity to get the profile for.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					},
					{
						"name": "propertyNames",
						"description": "The properties to get for the public profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "role,email,name"
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an identity public profile.",
						"content": {
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
								},
								"examples": {
									"identityGetPublicResponseExample": {
										"value": {
											"@context": "https://schema.org",
											"@type": "Person",
											"jobTitle": "Professor",
											"name": "Jane Doe"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/identity/profile/query": {
			"get": {
				"operationId": "identitiesProfileList",
				"summary": "Get the list of profile data for identities",
				"tags": [
					"Identity Profile"
				],
				"parameters": [
					{
						"name": "publicFilters",
						"description": "The public filters to apply to the list, comma separated list with color between key and value for each pair e.g. prop1:value1,prop2:value2.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "publicPropertyNames",
						"description": "The public properties to get for the profile, defaults to all, should be a comma separated list.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The cursor for paged requests.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "Number of items to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a list of identities.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IdentityProfileListResponse"
								},
								"examples": {
									"identitiesProfileListResponseExample": {
										"value": {
											"items": [
												{
													"identity": "did:iota:tst:0xc57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"publicProfile": {
														"@context": "https://schema.org",
														"@type": "Person",
														"jobTitle": "Professor",
														"name": "Jane Doe"
													}
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/blob-storage": {
			"post": {
				"operationId": "blobStorageCreate",
				"summary": "Create an entry in blob storage",
				"tags": [
					"Blob Storage"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create an entry in blob storage.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlobStorageCreateRequest"
							},
							"examples": {
								"blobStorageCreateRequestExample": {
									"value": {
										"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw==",
										"metadata": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "blobStorageQuery",
				"summary": "Query the items from blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "conditions",
						"description": "The condition for the query as JSON version of EntityCondition type.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"description": "The order for the results, default to created.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"dateCreated",
								"dateModified"
							]
						}
					},
					{
						"name": "orderByDirection",
						"description": "The direction for the order, defaults to desc.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "pageSize",
						"description": "The number of entries to return per page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The cursor to get next chunk of data, returned in previous response.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting the list of entries from a query.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntryList"
								},
								"examples": {
									"blobStorageListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/blob-storage/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "BlobStorageEntry",
													"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"dateCreated": "2024-01-01T00:00:00Z",
													"encodingFormat": "application/pdf",
													"blobSize": 42,
													"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"fileExtension": "pdf",
													"metadata": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntryList"
								},
								"examples": {
									"blobStorageListResponseJsonLdExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/blob-storage/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "BlobStorageEntry",
													"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"dateCreated": "2024-01-01T00:00:00Z",
													"encodingFormat": "application/pdf",
													"blobSize": 42,
													"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"fileExtension": "pdf",
													"metadata": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/blob-storage/{id}": {
			"get": {
				"operationId": "blobStorageGet",
				"summary": "Get the metadata for an item from blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the blob to get in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					},
					{
						"name": "includeContent",
						"description": "Include the content in the response, otherwise only metadata is returned.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						},
						"example": "true"
					},
					{
						"name": "decompress",
						"description": "If the content should be decompressed, if it was compressed when stored, defaults to true.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "overrideVaultKeyId",
						"description": "Use a different vault key id for decryption, if not provided the default vault key id will be used.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get an entry from blob storage.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntry"
								},
								"examples": {
									"blobStorageGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "BlobStorageEntry",
											"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"dateCreated": "2024-01-01T00:00:00Z",
											"encodingFormat": "application/pdf",
											"blobSize": 42,
											"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"fileExtension": "pdf",
											"metadata": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/blob-storage/BlobStorageEntry"
								},
								"examples": {
									"blobStorageGetResponseJsonLdExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/blob-storage/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "BlobStorageEntry",
											"id": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"dateCreated": "2024-01-01T00:00:00Z",
											"encodingFormat": "application/pdf",
											"blobSize": 42,
											"blobHash": "sha256:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"fileExtension": "pdf",
											"metadata": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"blob": "VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZw=="
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "blobStorageUpdate",
				"summary": "Update the metadata for an item in blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the blob to get in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update a blob entry.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlobStorageUpdateRequest"
							},
							"examples": {
								"blobStorageUpdateRequestExample": {
									"value": {
										"metadata": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "blobStorageRemove",
				"summary": "Remove an item from blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the blob to remove in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/blob-storage/{id}/content": {
			"get": {
				"operationId": "blobStorageGetContent",
				"summary": "Get the content for an item in blob storage",
				"tags": [
					"Blob Storage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The content of the blob, which will be a specific mime type if one can be detected from the content (or set as encodingFormat in the entry), or defaults to application/octet-stream.",
						"content": {
							"application/octet-stream": {
								"schema": {
									"type": "string",
									"format": "binary"
								},
								"examples": {
									"blobStorageGetContentResponseExample": {
										"summary": "Binary Data",
										"value": ""
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/telemetry/metric": {
			"post": {
				"operationId": "telemetryCreateMetric",
				"summary": "Create a telemetry metric",
				"tags": [
					"Telemetry"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create a new telemetry metric.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TelemetryMetric"
							},
							"examples": {
								"telemetryCreateMetricRequestExample": {
									"value": {
										"id": "my-counter",
										"label": "My Counter",
										"description": "This is my counter",
										"type": 0,
										"unit": "KG"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. my-counter"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "telemetryListEntries",
				"summary": "Get a list of the telemetry metrics",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "type",
						"description": "The type of the metric.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/MetricType"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for telemetry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TelemetryListResponse"
								},
								"examples": {
									"telemetryListResponseExample": {
										"value": {
											"entities": [
												{
													"id": "my-counter",
													"label": "My Counter",
													"type": 0,
													"unit": "KG"
												},
												{
													"id": "my-counter-2",
													"label": "My Counter 2",
													"type": 1,
													"unit": "M"
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/telemetry/metric/{id}": {
			"get": {
				"operationId": "telemetryGetMetric",
				"summary": "Get a telemetry metric and it's most recent value",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Get a telemetry metric response.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TelemetryGetMetricResponse"
								},
								"examples": {
									"telemetryGetMetricResponseExample": {
										"value": {
											"metric": {
												"id": "my-counter",
												"label": "My Counter",
												"description": "This is my counter",
												"type": 0,
												"unit": "KG"
											},
											"value": {
												"id": "aabbccdd11223445566",
												"ts": 1715252922273,
												"value": 10
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "telemetryUpdateMetric",
				"summary": "Update a telemetry metric",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update a telemetry metric.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TelemetryUpdateMetricRequest"
							},
							"examples": {
								"telemetryUpdateMetricRequestExample": {
									"value": {
										"label": "My New Label"
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "telemetryRemoveMetric",
				"summary": "Remove a telemetry metric and it's values.",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/telemetry/metric/{id}/value": {
			"post": {
				"operationId": "telemetryAddMetricValue",
				"summary": "Add a telemetry metric value",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Add a telemetry metric value.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TelemetryAddMetricValueRequest"
							},
							"examples": {
								"telemetryAddMetricValueRequestExample": {
									"value": {
										"value": 10
									}
								},
								"telemetryAddMetricValueIncRequestExample": {
									"value": {
										"value": "inc"
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. aabbccdd11223445566"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "telemetryValuesListEntries",
				"summary": "Get a list of the values for a telemetry metric",
				"tags": [
					"Telemetry"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the metric.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-counter"
					},
					{
						"name": "timeStart",
						"description": "The start time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "timeEnd",
						"description": "The end time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for telemetry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TelemetryValuesListResponse"
								},
								"examples": {
									"telemetryValuesListResponseExample": {
										"value": {
											"metric": {
												"id": "my-counter",
												"label": "My Counter",
												"type": 0,
												"unit": "KG"
											},
											"entities": [
												{
													"id": "aabbccdd11223445566",
													"ts": 1715252922273,
													"value": 10
												},
												{
													"id": "aabbccdd11223445566",
													"ts": 1715252922274,
													"value": 11
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/logging": {
			"post": {
				"operationId": "loggingEntryCreate",
				"summary": "Create a log entry",
				"tags": [
					"Logging"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create a new log entry.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogEntry"
							},
							"examples": {
								"loggingEntryCreateInfoExample": {
									"value": {
										"level": "info",
										"message": "This is an information message",
										"source": "source",
										"ts": 1715252922273
									}
								},
								"loggingEntryCreateErrorExample": {
									"value": {
										"level": "info",
										"message": "This is an error message",
										"source": "source",
										"ts": 1715252922273,
										"error": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "loggingListEntries",
				"summary": "Get a list of the log entries",
				"tags": [
					"Logging"
				],
				"parameters": [
					{
						"name": "level",
						"description": "The level of the log entries to retrieve.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/LogLevel"
						},
						"example": "info"
					},
					{
						"name": "source",
						"description": "The source of the log entries to retrieve.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "timeStart",
						"description": "The start time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "timeEnd",
						"description": "The end time of the metrics to retrieve as a timestamp in ms.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for log entry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoggingListResponse"
								},
								"examples": {
									"listResponseExample": {
										"value": {
											"entities": [
												{
													"level": "info",
													"message": "This is an information message",
													"source": "source",
													"ts": 1715252922273
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/nft": {
			"post": {
				"operationId": "nftMint",
				"summary": "Mint an NFT",
				"tags": [
					"NFT"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Mint the data and return the NFT id.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NftMintRequest"
							},
							"examples": {
								"nftMintExample": {
									"value": {
										"tag": "MY-NFT",
										"immutableMetadata": {
											"docName": "bill-of-lading",
											"mimeType": "application/pdf",
											"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
										},
										"metadata": {
											"data": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/nft/{id}": {
			"get": {
				"operationId": "nftResolve",
				"summary": "Resolve an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to resolving the NFT.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NftResolveResponse"
								},
								"examples": {
									"nftResolveResponseExample": {
										"value": {
											"issuer": "did:iota:tst:0x85ef62ea94fc4eeeeeddf6acc3b566e988e613081d0b93cc54ed831ed4c18d44",
											"owner": "did:iota:tst:0x85ef62ea94fc4eeeeeddf6acc3b566e988e613081d0b93cc54ed831ed4c18d44",
											"tag": "MY-NFT",
											"immutableMetadata": {
												"docName": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"metadata": {
												"data": "AAAAA"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "nftBurn",
				"summary": "Burn an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to burn.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "nftUpdate",
				"summary": "Update an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to transfer in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update the mutable data for the NFT.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NftUpdateRequest"
							},
							"examples": {
								"nftUpdateExample": {
									"value": {
										"metadata": {
											"data": "AAAAA"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/nft/{id}/transfer": {
			"post": {
				"operationId": "nftTransfer",
				"summary": "Transfer an NFT",
				"tags": [
					"NFT"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the NFT to transfer in urn format.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "nft:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Transfer the NFT and update the metadata.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NftTransferRequest"
							},
							"examples": {
								"nftTransferExample": {
									"value": {
										"recipientIdentity": "did:iota:tst:0x85ef62ea94fc4eeeeeddf6acc3b566e988e613081d0b93cc54ed831ed4c18d44",
										"recipientAddress": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv",
										"metadata": {
											"data": "AAAAA"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/attestation": {
			"post": {
				"operationId": "attestationCreate",
				"summary": "Attest a JSON-LD object",
				"tags": [
					"Attestation"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Attest the data and return the id of the attestation.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AttestationCreateRequest"
							},
							"examples": {
								"attestationCreateRequestExample": {
									"value": {
										"attestationObject": {
											"@context": "https://schema.org",
											"type": "DigitalDocument",
											"name": "bill-of-lading",
											"mimeType": "application/pdf",
											"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/attestation/{id}": {
			"get": {
				"operationId": "attestationGet",
				"summary": "Get an attestation",
				"tags": [
					"Attestation"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The attestation id to verify.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"responses": {
					"200": {
						"description": "The response to verifying the attestation.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/attestation/AttestationInformation"
								},
								"examples": {
									"attestationGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": true
										}
									},
									"attestationVerifyResponseFailExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": false,
											"verificationFailure": "proofFailed"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/attestation/AttestationInformation"
								},
								"examples": {
									"attestationGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": true
										}
									},
									"attestationVerifyResponseFailExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/attestation/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Information",
											"id": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg==",
											"dateCreated": "2024-06-18T13:34:51Z",
											"ownerIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"holderIdentity": "did:iota:tst:0x8992c426116f21b2a4c7a2854300748d3e94a8ce089d5be62e11f105bd2a0f9e",
											"attestationObject": {
												"@context": "https://schema.org",
												"type": "DigitalDocument",
												"name": "bill-of-lading",
												"mimeType": "application/pdf",
												"fingerprint": "0xf0b95a98b3dbc5ce1c9ce59d70af95a97599f100a7296ecdd1eb108bebfa047f"
											},
											"proof": {
												"type": "JwtProof",
												"value": "eyJraWQiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllI2F0dGVzdGF0aW9uIiwidHlwIjoiSldUIiwiYWxnIjoiRWREU0EifQ.eyJpc3MiOiJkaWQ6aW90YTp0c3Q6MHg4OTkyYzQyNjExNmYyMWIyYTRjN2EyODU0MzAwNzQ4ZDNlOTRhOGNlMDg5ZDViZTYyZTExZjEwNWJkMmEwZjllIiwibmJmIjoxNzE4NzE3NjkxLCJqdGkiOiJ1cm46ZXhhbXBsZToxMjM0NTY3OCIsInZjIjp7IkBjb250ZXh0IjoiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiRG9jRGVzY3JpcHRpb25UeXBlIl0sImNyZWRlbnRpYWxTdWJqZWN0Ijp7ImRvY05hbWUiOiJiaWxsLW9mLWxhZGluZyIsImZpbmdlcnByaW50IjoiMHhmMGI5NWE5OGIzZGJjNWNlMWM5Y2U1OWQ3MGFmOTVhOTc1OTlmMTAwYTcyOTZlY2RkMWViMTA4YmViZmEwNDdmIiwibWltZVR5cGUiOiJhcHBsaWNhdGlvbi9wZGYifSwiY3JlZGVudGlhbFN0YXR1cyI6eyJpZCI6ImRpZDppb3RhOnRzdDoweDg5OTJjNDI2MTE2ZjIxYjJhNGM3YTI4NTQzMDA3NDhkM2U5NGE4Y2UwODlkNWJlNjJlMTFmMTA1YmQyYTBmOWUjcmV2b2NhdGlvbiIsInR5cGUiOiJSZXZvY2F0aW9uQml0bWFwMjAyMiIsInJldm9jYXRpb25CaXRtYXBJbmRleCI6IjAifX19.GC0EnIZgYxuUDmXcnejNb7nwsnRv1e1KW2AL0HgzYv9Ab-FTXqkgRk4agYyCDW2cJoDQXcsM1lbnKWPlw6ZBCw"
											},
											"verified": false,
											"verificationFailure": "proofFailed"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "attestationDestroy",
				"summary": "Destroy an attestation",
				"tags": [
					"Attestation"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The attestation id to destroy.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/attestation/{id}/transfer": {
			"put": {
				"operationId": "attestationTransfer",
				"summary": "Transfer an attestation",
				"tags": [
					"Attestation"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The attestation id to transfer.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "attestation:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Transfer the attestation to a new holder.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AttestationTransferRequest"
							},
							"examples": {
								"attestationTransferRequestExample": {
									"value": {
										"holderIdentity": "did:iota:tst:0x06ae1034f9f4af1b408a0b54e877bb476259666a14f221400d3746aecefa7105",
										"holderAddress": "tst1prctjk5ck0dutnsunnje6u90jk5htx03qznjjmkd6843pzltlgz87srjzzv"
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/verifiable": {
			"post": {
				"operationId": "verifiableStorageCreate",
				"summary": "Create an item in verifiable storage",
				"tags": [
					"VerifiableStorage"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Store the data and return the verifiable storage item id.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifiableStorageCreateRequest"
							},
							"examples": {
								"verifiableStorageCreateRequestExample": {
									"value": {
										"data": "SGVsbG8gd29ybGQ="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to storing the verifiable storage item.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerifiableStorageCreateResponse"
								},
								"examples": {
									"verifiableStorageCreateResponseExample": {
										"value": {
											"receipt": {
												"@context": "https://schema.twindev.org/verifiable-storage/",
												"type": "VerifiableStorageIotaReceipt"
											},
											"id": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
										}
									}
								}
							}
						},
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/verifiable/{id}": {
			"put": {
				"operationId": "verifiableStorageUpdate",
				"summary": "Update an item in verifiable storage",
				"tags": [
					"VerifiableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the verifiable storage item to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update the data and return the receipt.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifiableStorageUpdateRequest"
							},
							"examples": {
								"verifiableStorageUpdateRequestExample": {
									"value": {
										"data": "SGVsbG8gd29ybGQ="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to updating the verifiable storage item.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
								},
								"examples": {
									"verifiableStorageUpdateResponseExample": {
										"value": {
											"@context": "https://schema.twindev.org/verifiable-storage/",
											"type": "VerifiableStorageIotaReceipt"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "verifiableStorageGet",
				"summary": "Get an verifiable storage item",
				"tags": [
					"VerifiableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the verifiable storage item to resolve.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Get the verifiable storage item.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifiableStorageGetRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to getting the verifiable storage item.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerifiableStorageGetResponse"
								},
								"examples": {
									"verifiableStorageGetResponseExample": {
										"value": {
											"data": "SGVsbG8gd29ybGQ=",
											"receipt": {
												"@context": "https://www.w3.org/ns/activitystreams",
												"type": "Create",
												"actor": "https://example.org/actor",
												"object": "https://example.org/object"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "verifiableStorageRemove",
				"summary": "Remove an item from verifiable storage",
				"tags": [
					"VerifiableStorage"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the verifiable storage item to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "verifiable:iota:aW90YS1uZnQ6dHN0OjB4NzYyYjljNDllYTg2OWUwZWJkYTliYmZhNzY5Mzk0NDdhNDI4ZGNmMTc4YzVkMTVhYjQ0N2UyZDRmYmJiNGViMg=="
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/immutable-proof": {
			"post": {
				"operationId": "immutableProofCreate",
				"summary": "Create a proof",
				"tags": [
					"Immutable Proof"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create a proof.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ImmutableProofCreateRequest"
							},
							"examples": {
								"immutableProofCreateRequestExample": {
									"value": {
										"document": {
											"@context": "https://schema.org",
											"type": "Person",
											"name": "John Smith"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. test:1234567890"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/immutable-proof/{id}": {
			"get": {
				"operationId": "immutableProofGet",
				"summary": "Get a proof",
				"tags": [
					"Immutable Proof"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the immutable proof to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "application/json"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an immutable proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/immutable-proof/ImmutableProof"
								},
								"examples": {
									"immutableProofGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/immutable-proof/",
												"https://schema.twindev.org/common/"
											],
											"type": "ImmutableProof",
											"id": "ais:1234567890",
											"nodeIdentity": "node-1",
											"userIdentity": "user-1",
											"proofObjectId": "test:1234567890",
											"proofObjectHash": "EAOKyDN0mYQbBh91eMdVeroxQx1H4GfnRbmt6n/2L/Y=",
											"proof": {
												"@context": "https://www.w3.org/ns/credentials/v2",
												"type": "DataIntegrityProof",
												"cryptosuite": "eddsa-jcs-2022",
												"created": "2024-08-22T11:56:56.272Z",
												"proofPurpose": "assertionMethod",
												"proofValue": "7DdiPPYtxLjCD3wA1po2rv..."
											}
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/immutable-proof/ImmutableProof"
								},
								"examples": {
									"immutableProofJsonLdGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/immutable-proof/",
												"https://schema.twindev.org/common/"
											],
											"type": "ImmutableProof",
											"id": "ais:1234567890",
											"nodeIdentity": "node-1",
											"userIdentity": "user-1",
											"proofObjectId": "test:1234567890",
											"proofObjectHash": "EAOKyDN0mYQbBh91eMdVeroxQx1H4GfnRbmt6n/2L/Y=",
											"proof": {
												"@context": "https://www.w3.org/ns/credentials/v2",
												"type": "DataIntegrityProof",
												"cryptosuite": "eddsa-jcs-2022",
												"created": "2024-08-22T11:56:56.272Z",
												"proofPurpose": "assertionMethod",
												"proofValue": "7DdiPPYtxLjCD3wA1po2rv..."
											}
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/immutable-proof/{id}/verify": {
			"get": {
				"operationId": "immutableProofVerify",
				"summary": "Verify a proof",
				"tags": [
					"Immutable Proof"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the immutable proof to verify.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to verifying an immutable proof.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/immutable-proof/ImmutableProofVerification"
								},
								"examples": {
									"immutableProofVerifyResponseExample": {
										"value": {
											"@context": "https://schema.twindev.org/immutable-proof/",
											"type": "ImmutableProofVerification",
											"verified": true
										}
									},
									"immutableProofVerifyResponseFailExample": {
										"value": {
											"@context": "https://schema.twindev.org/immutable-proof/",
											"type": "ImmutableProofVerification",
											"verified": false,
											"failure": "proofTypeMismatch"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/rule-group/{id}": {
			"put": {
				"operationId": "dataProcessingSetRuleGroup",
				"summary": "Store a rule group for extraction.",
				"tags": [
					"Data Processing"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The rule id to set.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-rule-group"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Set a rule group.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataProcessingRuleGroupSetRequest"
							},
							"examples": {
								"dataProcessingRuleGroupSetRequestExample": {
									"value": {
										"label": "My Rule Group",
										"rules": [
											{
												"source": "$.foo",
												"target": "goo",
												"coerce": "bigint"
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "dataProcessingGetRuleGroup",
				"summary": "Get a rule group for extraction.",
				"tags": [
					"Data Processing"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The rule id to set.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-rule-group"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Get a rule group response.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RuleGroup"
								},
								"examples": {
									"dataProcessingRuleGroupSetResponseExample": {
										"value": {
											"id": "my-rule-group",
											"label": "My Rule Group",
											"rules": [
												{
													"source": "$.foo",
													"target": "goo",
													"coerce": "bigint"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "dataProcessingRemoveRuleGroup",
				"summary": "Remove an extraction rule group.",
				"tags": [
					"Data Processing"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The rule id to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "my-rule-group"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/extract": {
			"post": {
				"operationId": "dataProcessingExtract",
				"summary": "Extract data from a binary source using the specified rule group.",
				"tags": [
					"Data Processing"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Perform an extraction on the data with the specified ruleset.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataProcessingExtractRequest"
							},
							"examples": {
								"dataProcessingExtractRequestExample": {
									"value": {
										"ruleGroupId": "my-rule-group",
										"data": "eyJmb28iOiAiYmFyIn0="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to extracting data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProcessingExtractResponse"
								},
								"examples": {
									"dataProcessingExtractResponseExample": {
										"value": {
											"foo": "bar"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/convert": {
			"post": {
				"operationId": "dataProcessingConvert",
				"summary": "Convert data from a binary source and return structured object.",
				"tags": [
					"Data Processing"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Perform a conversion on the data.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DataProcessingConvertRequest"
							},
							"examples": {
								"dataProcessingConvertRequestExample": {
									"value": {
										"data": "eyJmb28iOiAiYmFyIn0="
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Response to converting data.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProcessingConvertResponse"
								},
								"examples": {
									"dataProcessingConvertResponseExample": {
										"value": {
											"foo": "bar"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/data-processing/rule-group": {
			"get": {
				"operationId": "dataProcessingListRuleGroup",
				"summary": "Get a list with rule groups for extraction.",
				"tags": [
					"Data Processing"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for rule group entry list request.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DataProcessingRuleGroupListResponse"
								},
								"examples": {
									"ruleGroupListResponseExample": {
										"value": {
											"entities": [
												{
													"id": "my-rule-group",
													"label": "My Rule Group",
													"rules": [
														{
															"source": "$.foo",
															"target": "goo",
															"coerce": "bigint"
														}
													]
												}
											],
											"cursor": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management": {
			"post": {
				"operationId": "DocumentManagementSet",
				"summary": "Store a document in an auditable item graph vertex and add its content to blob storage.",
				"tags": [
					"Document Management"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to create a document as an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DocumentManagementCreateRequest"
							},
							"examples": {
								"DocumentManagementCreateRequestExample": {
									"value": {
										"documentId": "2721000",
										"documentIdFormat": "bol",
										"documentCode": "unece:DocumentCodeList#705",
										"blob": "SGVsbG8gV29ybGQ=",
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										},
										"createAttestation": true
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. aig:123456"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "DocumentManagementQuery",
				"summary": "Query the items from an auditable item graph vertex",
				"tags": [
					"Document Management"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to query the documents from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
								},
								"examples": {
									"DocumentManagementQueryResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/aig/"
											],
											"type": [
												"ItemList",
												"AuditableItemGraphVertexList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/"
													],
													"id": "aig:c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7",
													"type": "AuditableItemGraphVertex",
													"dateCreated": "2024-08-22T04:13:20.000Z",
													"aliases": [
														{
															"@context": [
																"https://schema.twindev.org/aig/"
															],
															"id": "test-id-0",
															"type": "AuditableItemGraphAlias",
															"dateCreated": "2024-08-22T04:13:20.000Z"
														}
													],
													"resources": [
														{
															"@context": "https://schema.twindev.org/aig/",
															"type": "AuditableItemGraphResource",
															"dateCreated": "2024-08-22T04:13:20.000Z",
															"resourceObject": {
																"@context": [
																	"https://schema.twindev.org/documents/",
																	"https://schema.twindev.org/common/",
																	"https://schema.org"
																],
																"type": "Document",
																"id": "test-id-0:0",
																"documentId": "test-id-0",
																"documentCode": "unece:DocumentCodeList#705",
																"documentRevision": 0,
																"annotationObject": {
																	"@context": "https://schema.org",
																	"type": "DigitalDocument",
																	"name": "bill-of-lading"
																},
																"blobHash": "sha256:E3Duqrp6bHojSx+CzDttAToAiP1eFkCDAPBbKLABVGM=",
																"blobStorageId": "blob:memory:1370eeaaba7a6c7a234b1f82cc3b6d013a0088fd5e16408300f05b28b0015463",
																"dateCreated": "2024-08-22T04:13:20.000Z",
																"nodeIdentity": "did:entity-storage:0x0101010101010101010101010101010101010101010101010101010101010101",
																"userIdentity": "did:entity-storage:0x0404040404040404040404040404040404040404040404040404040404040404"
															}
														}
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management/{auditableItemGraphDocumentId}": {
			"put": {
				"operationId": "DocumentManagementUpdate",
				"summary": "Update a document in an auditable item graph vertex and add its content to blob storage.",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Request to update a document as an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/DocumentManagementUpdateRequest"
							},
							"examples": {
								"DocumentManagementUpdateRequestExample": {
									"value": {
										"blob": "SGVsbG8gV29ybGQ=",
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "DigitalDocument",
											"name": "myfile.pdf"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "DocumentManagementGet",
				"summary": "Get the data for a document from document management",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a document and optionally revisions from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/DocumentList"
								},
								"examples": {
									"DocumentManagementGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/documents/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "Document",
													"id": "2721000:0",
													"documentId": "2721000",
													"documentIdFormat": "bol",
													"documentCode": "unece:DocumentCodeList#705",
													"documentRevision": 0,
													"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"blobHash": "sha256:123456",
													"dateCreated": "2024-01-01T00:00:00Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
													"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/DocumentList"
								},
								"examples": {
									"DocumentManagementGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/documents/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "Document",
													"id": "2721000:0",
													"documentId": "2721000",
													"documentIdFormat": "bol",
													"documentCode": "unece:DocumentCodeList#705",
													"documentRevision": 0,
													"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
													"blobHash": "sha256:123456",
													"dateCreated": "2024-01-01T00:00:00Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "DigitalDocument",
														"name": "myfile.pdf"
													},
													"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
													"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/document-management/{auditableItemGraphDocumentId}/{revision}": {
			"get": {
				"operationId": "DocumentManagementGetRevision",
				"summary": "Get the data for a document revision from document management",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:123456"
					},
					{
						"name": "revision",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to get a document revision from an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/Document"
								},
								"examples": {
									"DocumentManagementGetRevisionResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Document",
											"id": "2721000:0",
											"documentId": "2721000",
											"documentIdFormat": "bol",
											"documentCode": "unece:DocumentCodeList#705",
											"documentRevision": 1,
											"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"blobHash": "sha256:123456",
											"dateCreated": "2024-01-01T00:00:00Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
											"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/documents/Document"
								},
								"examples": {
									"DocumentManagementGetRevisionResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/documents/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "Document",
											"id": "2721000:0",
											"documentId": "2721000",
											"documentIdFormat": "bol",
											"documentCode": "unece:DocumentCodeList#705",
											"documentRevision": 1,
											"blobStorageId": "blob-memory:c57d94b088f4c6d2cb32ded014813d0c786aa00134c8ee22f84b1e2545602a70",
											"blobHash": "sha256:123456",
											"dateCreated": "2024-01-01T00:00:00Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "DigitalDocument",
												"name": "myfile.pdf"
											},
											"nodeIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363",
											"userIdentity": "did:entity-storage:0x6363636363636363636363636363636363636363636363636363636363636363"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DocumentManagementRemove",
				"summary": "Remove an document from an auditable item graph vertex",
				"tags": [
					"Document Management"
				],
				"parameters": [
					{
						"name": "auditableItemGraphDocumentId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:1234"
					},
					{
						"name": "revision",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/aig": {
			"post": {
				"operationId": "auditableItemGraphCreate",
				"summary": "Create a new graph vertex",
				"tags": [
					"Auditable Item Graph"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemGraphCreateRequest"
							},
							"examples": {
								"auditableItemGraphCreateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										},
										"aliases": [
											{
												"id": "bar456",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "foo321",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"resources": [
											{
												"id": "resource1",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "resource2",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"edges": [
											{
												"id": "edge1",
												"edgeRelationships": [
													"frenemy"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "edge2",
												"edgeRelationships": [
													"end"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. aig:1234567890"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "auditableItemGraphList",
				"summary": "Query graph vertices by id or alias",
				"tags": [
					"Auditable Item Graph"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id or alias to try and find.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "idMode",
						"description": "Which field to look in with the id, defaults to both.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"id",
								"alias",
								"both"
							]
						}
					},
					{
						"name": "resourceTypes",
						"description": "Include vertices with specific resource types, comma separated.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "conditions",
						"description": "The conditions to filter the streams, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"description": "The order for the results, default to dateCreated.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"dateCreated",
								"dateModified"
							]
						}
					},
					{
						"name": "orderByDirection",
						"description": "The direction for the order, defaults to desc.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "properties",
						"description": "The properties to return as a comma separated list, defaults to \"id,dateCreated,aliases,annotationObject\".",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response to getting the a list of the vertices with matching ids or aliases.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
								},
								"examples": {
									"auditableItemGraphListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemGraphVertexList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphVertex",
													"id": "0101010101010101010101010101010101010101010101010101010101010101",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"aliases": [
														{
															"@context": [
																"https://schema.twindev.org/aig/",
																"https://schema.twindev.org/common/",
																"https://schema.org"
															],
															"type": "AuditableItemGraphAlias",
															"id": "foo4",
															"dateCreated": "2024-08-22T11:55:16.271Z"
														}
													]
												}
											],
											"nextItem": "1"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertexList"
								},
								"examples": {
									"auditableItemGraphJsonLdListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemGraphVertexList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphVertex",
													"id": "0101010101010101010101010101010101010101010101010101010101010101",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"aliases": [
														{
															"@context": [
																"https://schema.twindev.org/aig/",
																"https://schema.twindev.org/common/",
																"https://schema.org"
															],
															"type": "AuditableItemGraphAlias",
															"id": "foo4",
															"dateCreated": "2024-08-22T11:55:16.271Z"
														}
													]
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/aig/{id}": {
			"get": {
				"operationId": "auditableItemGraphGet",
				"summary": "Get a graph vertex",
				"tags": [
					"Auditable Item Graph"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the vertex to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:1234567890"
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted aliases, resource, edges, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "includeChangesets",
						"description": "Whether to include the changesets of the vertex, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifySignatureDepth",
						"description": "How many signatures to verify, none, current or all, defaults to \"none\".",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/VerifyDepth"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "application/json"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item graph vertex.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertex"
								},
								"examples": {
									"auditableItemGraphGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "AuditableItemGraphVertex",
											"id": "aig:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"aliases": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphAlias",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z"
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/aig/AuditableItemGraphVertex"
								},
								"examples": {
									"auditableItemGraphJsonLdGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/aig/",
												"https://schema.twindev.org/common/",
												"https://schema.org"
											],
											"type": "AuditableItemGraphVertex",
											"id": "aig:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"aliases": [
												{
													"@context": [
														"https://schema.twindev.org/aig/",
														"https://schema.twindev.org/common/",
														"https://schema.org"
													],
													"type": "AuditableItemGraphAlias",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"id": "tst:1234567890"
												}
											]
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "auditableItemGraphUpdate",
				"summary": "Update a graph vertex",
				"tags": [
					"Auditable Item Graph"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the vertex to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "aig:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update an auditable item graph vertex.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemGraphUpdateRequest"
							},
							"examples": {
								"auditableItemGraphUpdateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										},
										"aliases": [
											{
												"id": "bar456",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "foo321",
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"resources": [
											{
												"id": "resource1",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "resource2",
												"resourceObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										],
										"edges": [
											{
												"id": "edge1",
												"edgeRelationships": [
													"frenemy"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											},
											{
												"id": "edge2",
												"edgeRelationships": [
													"end"
												],
												"annotationObject": {
													"@context": "https://schema.org",
													"@type": "Note",
													"content": "This is a simple note"
												}
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais": {
			"post": {
				"operationId": "auditableItemStreamCreate",
				"summary": "Create a new stream",
				"tags": [
					"Auditable Item Stream"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Create an auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamCreateRequest"
							},
							"examples": {
								"auditableItemStreamCreateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										},
										"entries": [
											{
												"entryObject": {
													"@context": "https://schema.org",
													"@type": "Event",
													"startDate": "2011-04-09T20:00:00Z",
													"description": "A description of the event"
												}
											}
										]
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. ais:1234567890"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"get": {
				"operationId": "auditableItemStreamList",
				"summary": "Query streams",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "conditions",
						"description": "The conditions to filter the streams, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "orderBy",
						"description": "The order for the results, default to created.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"dateCreated",
								"dateModified"
							]
						}
					},
					{
						"name": "orderByDirection",
						"description": "The direction for the order, defaults to desc.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "properties",
						"description": "The properties to return as a comma separated list, defaults to \"id,object\".",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "The response to getting the a list of the streams.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamList"
								},
								"examples": {
									"auditableItemStreamListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStream",
													"id": "ais:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"dateModified": "2024-08-22T11:55:16.271Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "Note",
														"content": "This is a simple note"
													},
													"nodeIdentity": "tst:1234567890",
													"userIdentity": "tst:1234567890",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"immutableInterval": 10
												}
											],
											"nextItem": "1"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamList"
								},
								"examples": {
									"auditableItemStreamJsonLdListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStream",
													"id": "ais:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"dateModified": "2024-08-22T11:55:16.271Z",
													"annotationObject": {
														"@context": "https://schema.org",
														"@type": "Note",
														"content": "This is a simple note"
													},
													"nodeIdentity": "tst:1234567890",
													"userIdentity": "tst:1234567890",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"immutableInterval": 10
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}": {
			"get": {
				"operationId": "auditableItemStreamGet",
				"summary": "Get a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "includeEntries",
						"description": "Whether to include the entries, defaults to false. The entries will be limited to the first page of entries in date descending order. If you want to get more entries you can use the returned cursor with the get entries method.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted entries, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifyStream",
						"description": "Should the stream be verified, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifyEntries",
						"description": "Should the entries be verified, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "application/json"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStream"
								},
								"examples": {
									"auditableItemStreamGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStream",
											"id": "ais:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"nodeIdentity": "tst:1234567890",
											"userIdentity": "tst:1234567890",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"immutableInterval": 10,
											"entries": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											]
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStream"
								},
								"examples": {
									"auditableItemStreamJsonLdGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStream",
											"id": "ais:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"dateModified": "2024-08-22T11:55:16.271Z",
											"annotationObject": {
												"@context": "https://schema.org",
												"@type": "Note",
												"content": "This is a simple note"
											},
											"nodeIdentity": "tst:1234567890",
											"userIdentity": "tst:1234567890",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"immutableInterval": 10,
											"entries": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											]
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "auditableItemStreamUpdate",
				"summary": "Update a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update an auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamUpdateRequest"
							},
							"examples": {
								"auditableItemStreamUpdateRequestExample": {
									"value": {
										"annotationObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "auditableItemStreamDelete",
				"summary": "Delete a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to remove.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"post": {
				"operationId": "auditableItemStreamCreateEntry",
				"summary": "Create a new stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to create the entry in.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Append to an auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamCreateEntryRequest"
							},
							"examples": {
								"auditableItemStreamCreateEntryRequestExample": {
									"value": {
										"entryObject": {
											"@context": "https://schema.org",
											"@type": "Event",
											"startDate": "2011-04-09T20:00:00Z",
											"description": "A description of the event"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response.",
						"headers": {
							"location": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. ais:1234567890:01010101010"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/{entryId}": {
			"get": {
				"operationId": "auditableItemStreamGetEntry",
				"summary": "Get a stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to update the get in.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "The id of the entry to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					},
					{
						"name": "verifyEntry",
						"description": "Verify the entry, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entry.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntry"
								},
								"examples": {
									"auditableItemStreamGetEntryResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStreamEntry",
											"id": "tst:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"index": 0,
											"entryObject": {
												"@context": "https://schema.org",
												"@type": "Event",
												"startDate": "2011-04-09T20:00:00Z",
												"description": "A description of the event"
											}
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntry"
								},
								"examples": {
									"auditableItemStreamJsonLdGetEntryResponseExample": {
										"value": {
											"@context": [
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": "AuditableItemStreamEntry",
											"id": "tst:1234567890",
											"dateCreated": "2024-08-22T11:55:16.271Z",
											"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
											"index": 0,
											"entryObject": {
												"@context": "https://schema.org",
												"@type": "Event",
												"startDate": "2011-04-09T20:00:00Z",
												"description": "A description of the event"
											}
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "auditableItemStreamDeleteEntry",
				"summary": "Delete an entry from the stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			},
			"put": {
				"operationId": "auditableItemStreamUpdateEntry",
				"summary": "Update a stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to update the entry in.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "The id of the entry to update.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Update an entry in the auditable item stream.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AuditableItemStreamUpdateEntryRequest"
							},
							"examples": {
								"auditableItemStreamUpdateRequestExample": {
									"value": {
										"entryObject": {
											"@context": "https://schema.org",
											"@type": "Note",
											"content": "This is a simple note"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"204": {
						"description": "The rest request ended in success with no data."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/{entryId}/object": {
			"get": {
				"operationId": "auditableItemStreamGetEntryObject",
				"summary": "Get a stream entry",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "entryId",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890:01010101010"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entry object.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
								},
								"examples": {
									"auditableItemStreamGetEntryObjectResponseExample": {
										"value": {
											"@context": "https://schema.org",
											"@type": "Event",
											"startDate": "2011-04-09T20:00:00Z",
											"description": "A description of the event"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/entries": {
			"get": {
				"operationId": "auditableItemStreamListEntries",
				"summary": "Get the entry objects in a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "conditions",
						"description": "The conditions to filter the stream, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted entries, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "verifyEntries",
						"description": "Should the entries be verified, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "order",
						"description": "Retrieve the entries in ascending/descending time order, defaults to Ascending.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "pageSize",
						"description": "How many entries to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "Cursor to use for next chunk of data.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entries.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryList"
								},
								"examples": {
									"auditableItemStreamListEntriesResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamEntryList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											],
											"nextItem": "1"
										}
									}
								}
							},
							"application/ld+json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryList"
								},
								"examples": {
									"auditableItemStreamJsonLdListEntriesResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamEntryList"
											],
											"itemListElement": [
												{
													"@context": [
														"https://schema.twindev.org/ais/",
														"https://schema.twindev.org/common/"
													],
													"type": "AuditableItemStreamEntry",
													"id": "tst:1234567890",
													"dateCreated": "2024-08-22T11:55:16.271Z",
													"proofId": "0101010101010101010101010101010101010101010101010101010101010101",
													"index": 0,
													"entryObject": {
														"@context": "https://schema.org",
														"@type": "Event",
														"startDate": "2011-04-09T20:00:00Z",
														"description": "A description of the event"
													}
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						},
						"headers": {
							"content-type": {
								"schema": {
									"type": "string"
								},
								"description": "e.g. application/ld+json"
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/ais/{id}/entries/objects": {
			"get": {
				"operationId": "auditableItemStreamListEntryObjects",
				"summary": "Get the entry objects in a stream",
				"tags": [
					"Auditable Item Stream"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the stream to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "ais:1234567890"
					},
					{
						"name": "conditions",
						"description": "The conditions to filter the stream, JSON stringified IComparator[].",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "includeDeleted",
						"description": "Whether to include deleted entries, defaults to false.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"boolean",
								"string"
							]
						}
					},
					{
						"name": "order",
						"description": "Retrieve the entries in ascending/descending time order, defaults to Ascending.",
						"in": "query",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/SortDirection"
						}
					},
					{
						"name": "pageSize",
						"description": "How many entries to return.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "cursor",
						"description": "Cursor to use for next chunk of data.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response to getting an auditable item stream entries objects.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/ais/AuditableItemStreamEntryObjectList"
								},
								"examples": {
									"auditableItemStreamListEntryObjectsResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://schema.twindev.org/ais/",
												"https://schema.twindev.org/common/"
											],
											"type": [
												"ItemList",
												"AuditableItemStreamEntryObjectList"
											],
											"itemListElement": [
												{
													"@context": "https://schema.org",
													"@type": "Event",
													"startDate": "2011-04-09T20:00:00Z",
													"description": "A description of the event"
												}
											],
											"nextItem": "1"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "The resource you tried to access does not exist, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NotFoundResponse"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "NotFoundError",
											"message": "component.error",
											"properties": {
												"notFoundId": "1"
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participant-credentials": {
			"post": {
				"operationId": "compliancePresentationRequest",
				"summary": "Present a Compliance Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"compliancePresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offering-credentials": {
			"post": {
				"operationId": "serviceOfferingPresentationRequest",
				"summary": "Present a Service Offering Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"serviceOfferingPresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resource-credentials": {
			"post": {
				"operationId": "dataResourcePresentationRequest",
				"summary": "Present a Data Resource Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"dataResourcePresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connector-credentials": {
			"post": {
				"operationId": "dataSpaceConnectorPresentationRequest",
				"summary": "Present a Data Space Connector Credential",
				"tags": [
					"Federated Catalogue"
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"requestBody": {
					"description": "Register a new Compliance Credential.",
					"required": true,
					"content": {
						"application/jwt": {
							"schema": {
								"$ref": "#/components/schemas/CompliancePresentationRequest"
							},
							"examples": {
								"dataSpaceConnectorPresentationRequestExample": {
									"value": "ey..."
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The rest request ended in created response."
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnprocessableError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participants": {
			"get": {
				"operationId": "federatedCatalogueListParticipants",
				"summary": "Get a list of the participant entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The participant Id.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "registrationNumber",
						"description": "The legal registration number.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "abc"
					},
					{
						"name": "lrnType",
						"description": "The legal registration number type.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for participant list query",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ParticipantList"
								},
								"examples": {
									"participantListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "did:iota:xxx",
													"type": "LegalPerson",
													"registrationNumber": {
														"type": "LocalRegistrationNumber",
														"local": "P1234567"
													},
													"legalName": "A Inc.",
													"issuer": "did:iota:zzz",
													"legalAddress": {
														"type": "Address",
														"countryCode": "KE"
													},
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/participants/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetParticipant",
				"summary": "Get a participant",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The ID of the entry (Participant, Service, etc.) to get.",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "did:iota:123456"
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for a Participant Entry.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ParticipantEntry"
								},
								"examples": {
									"participantGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "did:iota:xxx",
											"type": "LegalPerson",
											"registrationNumber": {
												"type": "LocalRegistrationNumber",
												"local": "P1234567"
											},
											"legalName": "A Inc.",
											"issuer": "did:iota:zzz",
											"legalAddress": {
												"type": "Address",
												"countryCode": "KE"
											},
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offerings": {
			"get": {
				"operationId": "federatedCatalogueListServices",
				"summary": "Get a list of the service entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The Service Offering Id.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "providedBy",
						"description": "The service provider.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for Service Offering list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ServiceOfferingList"
								},
								"examples": {
									"serviceOfferingListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "http://example.org/is123456",
													"name": "Service 1",
													"type": "ServiceOffering",
													"servicePolicy": [
														{
															"@context": [
																"https://www.w3.org/ns/odrl/2/",
																{
																	"twin": "https://schema.twindev.org/w3c-odrl/",
																	"jsonPathSelector": "twin:jsonPathSelector"
																}
															],
															"@type": "Agreement",
															"uid": "http://example.com/policy:1010",
															"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
															"assignee": "did:iota:testnet:0x119adb64d01d3b0fa0d308c67db90ab1c6e0df6aebe5b7e0250783f57cd10c21",
															"permission": [
																{
																	"target": {
																		"type": "https://vocabulary.uncefact.org/Document",
																		"refinement": {
																			"leftOperand": {
																				"@id": "https://w3id.org/twin/odrl/propertyValue",
																				"jsonPathSelector": ".documentTypeCode"
																			},
																			"operator": "eq",
																			"rightOperand": "https://vocabulary.uncefact.org/DocumentCodeList#331"
																		}
																	},
																	"action": "extract"
																}
															]
														}
													],
													"endpoint": {
														"type": "Endpoint",
														"endpointURL": "https://endpoint.example.org/api"
													},
													"issuer": "did:iota:7890",
													"providedBy": "did:iota:1234567",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/service-offerings/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetService",
				"summary": "Get a Service Offering entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://my-services.example.org/service1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/ServiceOfferingEntry"
								},
								"examples": {
									"serviceOfferingGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "http://example.org/is123456",
											"name": "Service 1",
											"type": "ServiceOffering",
											"servicePolicy": [
												{
													"@context": [
														"https://www.w3.org/ns/odrl/2/",
														{
															"twin": "https://schema.twindev.org/w3c-odrl/",
															"jsonPathSelector": "twin:jsonPathSelector"
														}
													],
													"@type": "Agreement",
													"uid": "http://example.com/policy:1010",
													"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
													"assignee": "did:iota:testnet:0x119adb64d01d3b0fa0d308c67db90ab1c6e0df6aebe5b7e0250783f57cd10c21",
													"permission": [
														{
															"target": {
																"type": "https://vocabulary.uncefact.org/Document",
																"refinement": {
																	"leftOperand": {
																		"@id": "https://w3id.org/twin/odrl/propertyValue",
																		"jsonPathSelector": ".documentTypeCode"
																	},
																	"operator": "eq",
																	"rightOperand": "https://vocabulary.uncefact.org/DocumentCodeList#331"
																}
															},
															"action": "extract"
														}
													]
												}
											],
											"endpoint": {
												"type": "Endpoint",
												"endpointURL": "https://endpoint.example.org/api"
											},
											"issuer": "did:iota:7890",
											"providedBy": "did:iota:1234567",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resources": {
			"get": {
				"operationId": "federatedCatalogueListResources",
				"summary": "Get a list of the data resource entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The Id of the Data Resource.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "producedBy",
						"description": "The service provider.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response fo data resource list.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataResourceList"
								},
								"examples": {
									"dataResourceListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "http://example.org/is123456",
													"name": "Data Resource 1",
													"type": "DataResource",
													"copyrightOwnedBy": "did:iota:1234",
													"license": "http://licenses.example.org/12345",
													"resourcePolicy": [
														{
															"@context": "https://www.w3.org/ns/odrl/2/",
															"@type": "Offer",
															"uid": "http://example.com/policy:1010",
															"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
															"permission": [
																{
																	"target": {
																		"type": "https://vocabulary.uncefact.org/Document"
																	},
																	"action": "extract"
																}
															]
														}
													],
													"exposedThrough": "https://ds-connectors.example.org/ds1",
													"producedBy": "did:iota:1234567",
													"issuer": "did:iota:987654",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-resources/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetDataResource",
				"summary": "Get a Data Resource entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://data-resources.example.org/drs1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataResourceEntry"
								},
								"examples": {
									"dataResourceGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "http://example.org/is123456",
											"name": "Data Resource 1",
											"type": "DataResource",
											"copyrightOwnedBy": "did:iota:1234",
											"license": "http://licenses.example.org/12345",
											"resourcePolicy": [
												{
													"@context": "https://www.w3.org/ns/odrl/2/",
													"@type": "Offer",
													"uid": "http://example.com/policy:1010",
													"assigner": "did:iota:testnet:0x1a7bded4d22dc54722435d624e4323e10fcbc570cd57462eabbf3a5ab2ced24f",
													"permission": [
														{
															"target": {
																"type": "https://vocabulary.uncefact.org/Document"
															},
															"action": "extract"
														}
													]
												}
											],
											"exposedThrough": "https://ds-connectors.example.org/ds1",
											"producedBy": "did:iota:1234567",
											"issuer": "did:iota:987654",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connectors": {
			"get": {
				"operationId": "federatedCatalogueListDataSpaceConnectors",
				"summary": "Get a list of the Data Space connectors entries",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "The id of the Data Space Connector.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "maintainedBy",
						"description": "The maintainer",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "did:iota:1234"
					},
					{
						"name": "cursor",
						"description": "The optional cursor to get next chunk.",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "pageSize",
						"description": "The maximum number of entities in a page.",
						"in": "query",
						"required": false,
						"schema": {
							"type": [
								"number",
								"string"
							]
						}
					},
					{
						"name": "accept",
						"in": "header",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Response for Data Space Connector list",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataSpaceConnectorList"
								},
								"examples": {
									"dataSpaceConnectorListResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"type": "ItemList",
											"itemListElement": [
												{
													"@context": [
														"https://schema.org",
														"https://w3id.org/gaia-x/development",
														"https://schema.twindev.org/federated-catalogue/"
													],
													"id": "https://my-ds-connectors.example.org/ds-connector-ABCD",
													"type": [
														"DataExchangeComponent",
														"DataSpaceConnector"
													],
													"identity": "did:iota:testnet:123456",
													"defaultEndpoint": {
														"type": "Endpoint",
														"endpointURL": "https://my-twin-node.example.org:9000/twin-ds-connector"
													},
													"subscriptionActivityEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/subscriptions"
													},
													"pushActivityEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/notify"
													},
													"pullDataEndpoint": {
														"type": "Endpoint",
														"endpointURL": "/data"
													},
													"maintainer": "did:iota:99999",
													"offeredResource": [
														"https://my-data-resource.example.org"
													],
													"issuer": "did:iota:987654",
													"validFrom": "2024-08-01T12:00:00Z",
													"validUntil": "2025-08-01T12:00:00Z",
													"dateCreated": "2024-08-02T13:45:00Z",
													"evidence": [
														"https://credentials.example.org/1234567"
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/federated-catalogue/data-space-connectors/{id}": {
			"get": {
				"operationId": "federatedCatalogueGetDataSpaceConnector",
				"summary": "Get a Data Space Connector entry",
				"tags": [
					"Federated Catalogue"
				],
				"parameters": [
					{
						"name": "id",
						"description": "",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"style": "simple",
						"example": "https://ds-connectors.example.org/ds1"
					}
				],
				"security": [
					{
						"jwtBearerAuthScheme": []
					}
				],
				"responses": {
					"200": {
						"description": "Service Offering response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "https://schema.twindev.org/federated-catalogue/DataSpaceConnectorEntry"
								},
								"examples": {
									"dataSpaceConnectorGetResponseExample": {
										"value": {
											"@context": [
												"https://schema.org",
												"https://w3id.org/gaia-x/development",
												"https://schema.twindev.org/federated-catalogue/"
											],
											"id": "https://my-ds-connectors.example.org/ds-connector-ABCD",
											"type": [
												"DataExchangeComponent",
												"DataSpaceConnector"
											],
											"identity": "did:iota:testnet:123456",
											"defaultEndpoint": {
												"type": "Endpoint",
												"endpointURL": "https://my-twin-node.example.org:9000/twin-ds-connector"
											},
											"subscriptionActivityEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/subscriptions"
											},
											"pushActivityEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/notify"
											},
											"pullDataEndpoint": {
												"type": "Endpoint",
												"endpointURL": "/data"
											},
											"maintainer": "did:iota:99999",
											"offeredResource": [
												"https://my-data-resource.example.org"
											],
											"issuer": "did:iota:987654",
											"validFrom": "2024-08-01T12:00:00Z",
											"validUntil": "2025-08-01T12:00:00Z",
											"dateCreated": "2024-08-02T13:45:00Z",
											"evidence": [
												"https://credentials.example.org/1234567"
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The server cannot process the request, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "GeneralError",
											"message": "component.error",
											"properties": {
												"foo": "bar"
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "You are not authorized to use the API or no credentials were supplied, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "UnauthorizedError",
											"message": "component.error"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "The server has encountered a situation it does not know how to handle, see the content for more details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Error"
								},
								"examples": {
									"exampleResponse": {
										"value": {
											"name": "InternalServerError",
											"message": "component.error"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"AttestationCreateRequest": {
				"type": "object",
				"properties": {
					"attestationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"namespace": {
						"type": "string",
						"description": "The namespace of the connector to use for the attestation, defaults to component configured namespace."
					}
				},
				"required": [
					"attestationObject"
				],
				"additionalProperties": false,
				"description": "The data to be used in the signing."
			},
			"AttestationTransferRequest": {
				"type": "object",
				"properties": {
					"holderIdentity": {
						"type": "string",
						"description": "The new holder identity."
					},
					"holderAddress": {
						"type": "string",
						"description": "The new holder address."
					}
				},
				"required": [
					"holderIdentity",
					"holderAddress"
				],
				"additionalProperties": false,
				"description": "The parameters to be used in the transfer."
			},
			"AuditableItemGraphCreateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"aliases": {
						"type": "array",
						"items": false,
						"description": "Alternative aliases that can be used to identify the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"aliasFormat": {
										"type": "string"
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					},
					"resources": {
						"type": "array",
						"items": false,
						"description": "The resources attached to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"resourceObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"additionalProperties": false
							}
						]
					},
					"edges": {
						"type": "array",
						"items": false,
						"description": "The edges connected to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"edgeRelationships": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id",
									"edgeRelationships"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the vertex."
			},
			"AuditableItemGraphUpdateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"aliases": {
						"type": "array",
						"items": false,
						"description": "Alternative aliases that can be used to identify the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"aliasFormat": {
										"type": "string"
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					},
					"resources": {
						"type": "array",
						"items": false,
						"description": "The resources attached to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"resourceObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"additionalProperties": false
							}
						]
					},
					"edges": {
						"type": "array",
						"items": false,
						"description": "The edges connected to the vertex.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"edgeRelationships": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"annotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id",
									"edgeRelationships"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the vertex."
			},
			"AuditableItemStreamCreateEntryRequest": {
				"type": "object",
				"properties": {
					"entryObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"entryObject"
				],
				"additionalProperties": false,
				"description": "The data to be used in the stream."
			},
			"AuditableItemStreamCreateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"entries": {
						"type": "array",
						"items": false,
						"description": "The entries for the stream.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"entryObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"entryObject"
								],
								"additionalProperties": false
							}
						]
					},
					"immutableInterval": {
						"type": "number",
						"description": "After how many entries do we add immutable checks, defaults to service configured value. A value of 0 will disable immutable checks, 1 will be every item, or any other integer for an interval."
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the stream."
			},
			"AuditableItemStreamUpdateEntryRequest": {
				"type": "object",
				"properties": {
					"entryObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"entryObject"
				],
				"additionalProperties": false,
				"description": "The data to be used in the entry."
			},
			"AuditableItemStreamUpdateRequest": {
				"type": "object",
				"properties": {
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the stream."
			},
			"BlobStorageCreateRequest": {
				"type": "object",
				"properties": {
					"blob": {
						"type": "string",
						"description": "The data to store in base64 encoding."
					},
					"encodingFormat": {
						"type": "string",
						"description": "The mime type of the blob, will be detected if left undefined."
					},
					"fileExtension": {
						"type": "string",
						"description": "The extension of the blob, will be detected if left undefined."
					},
					"metadata": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"disableEncryption": {
						"type": "boolean",
						"description": "Disables encryption if enabled by default.",
						"default": false
					},
					"compress": {
						"$ref": "https://schema.twindev.org/blob-storage/BlobStorageCompressionType"
					},
					"overrideVaultKeyId": {
						"type": "string",
						"description": "Use a different vault key id for encryption, if not provided the default vault key id will be used.",
						"default": "undefined"
					},
					"namespace": {
						"type": "string",
						"description": "The namespace to store the data in, defaults to component configured namespace."
					}
				},
				"required": [
					"blob"
				],
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"BlobStorageUpdateRequest": {
				"type": "object",
				"properties": {
					"encodingFormat": {
						"type": "string",
						"description": "The mime type of the blob, will be detected if left undefined."
					},
					"fileExtension": {
						"type": "string",
						"description": "The extension of the blob, will be detected if left undefined."
					},
					"metadata": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"CoerceType": {
				"anyOf": [
					{
						"type": "string",
						"const": "string",
						"description": "String."
					},
					{
						"type": "string",
						"const": "number",
						"description": "Number."
					},
					{
						"type": "string",
						"const": "integer",
						"description": "Integer."
					},
					{
						"type": "string",
						"const": "boolean",
						"description": "Boolean."
					},
					{
						"type": "string",
						"const": "bigint",
						"description": "Big Integer."
					},
					{
						"type": "string",
						"const": "date",
						"description": "Date."
					},
					{
						"type": "string",
						"const": "datetime",
						"description": "Date Time."
					},
					{
						"type": "string",
						"const": "time",
						"description": "Time."
					},
					{
						"type": "string",
						"const": "object",
						"description": "Object."
					},
					{
						"type": "string",
						"const": "uint8array",
						"description": "Uint8Array."
					}
				],
				"description": "The types the extracted data can be coerced to."
			},
			"CompliancePresentationRequest": {
				"type": "string",
				"description": "The data to be used in the create."
			},
			"ConflictResponse": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"conflicts": {
						"type": "array",
						"items": false,
						"description": "The conflicting items.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"conflicts",
					"message",
					"name"
				],
				"description": "The body which contains the error."
			},
			"DataProcessingConvertRequest": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string",
						"description": "The binary data to convert in base64."
					},
					"overrideMimeType": {
						"type": "string",
						"description": "Use the specified mime type for conversion, will auto detect if undefined."
					}
				},
				"required": [
					"data"
				],
				"additionalProperties": false,
				"description": "The params for the convert."
			},
			"DataProcessingConvertResponse": {
				"description": "The converted data as an object."
			},
			"DataProcessingExtractRequest": {
				"type": "object",
				"properties": {
					"ruleGroupId": {
						"type": "string",
						"description": "The rule group id to use for the extraction."
					},
					"data": {
						"type": "string",
						"description": "The binary data to extract from in base64."
					},
					"overrideExtractorType": {
						"type": "string",
						"description": "The default extractor connector will be used if not specified."
					},
					"overrideMimeType": {
						"type": "string",
						"description": "An optional override for the mime type for conversion, will auto detect if not provided."
					}
				},
				"required": [
					"ruleGroupId",
					"data"
				],
				"additionalProperties": false,
				"description": "The params for the extract."
			},
			"DataProcessingExtractResponse": {
				"description": "The extracted data in extended JSON format which keeps types like bigint, dates and uint8array intact. Use ObjectHelper.fromExtended to get the object with original types."
			},
			"DataProcessingRuleGroupListResponse": {
				"type": "object",
				"properties": {
					"entities": {
						"type": "array",
						"items": false,
						"description": "The entities, which can be partial if a limited keys list was provided.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/RuleGroup"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"DataProcessingRuleGroupSetRequest": {
				"type": "object",
				"properties": {
					"label": {
						"type": "string",
						"description": "The label for the rule group."
					},
					"rules": {
						"type": "array",
						"items": false,
						"description": "The rules.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/Rule"
							}
						]
					}
				},
				"required": [
					"label",
					"rules"
				],
				"additionalProperties": false,
				"description": "The data to be used in the store."
			},
			"DocumentManagementCreateRequest": {
				"type": "object",
				"properties": {
					"documentId": {
						"type": "string",
						"description": "The document id to create."
					},
					"documentIdFormat": {
						"type": "string",
						"description": "The format of the document identifier."
					},
					"documentCode": {
						"$ref": "https://schema.twindev.org/unece/UneceDocumentCodes"
					},
					"blob": {
						"type": "string",
						"description": "The data to create the document with, in base64."
					},
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"auditableItemGraphEdges": {
						"type": "array",
						"items": false,
						"description": "The auditable item graph vertices to connect the document to.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"addAlias": {
										"type": "boolean"
									},
									"aliasAnnotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					},
					"createAttestation": {
						"type": "boolean",
						"description": "Flag to create an attestation for the document, defaults to false."
					},
					"addAlias": {
						"type": "boolean",
						"description": "Flag to add the document id as an alias to the aig vertex, defaults to true."
					},
					"aliasAnnotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"documentId",
					"documentCode",
					"blob"
				],
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"DocumentManagementUpdateRequest": {
				"type": "object",
				"properties": {
					"blob": {
						"type": "string",
						"description": "The data to create the document with, in base64."
					},
					"annotationObject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"auditableItemGraphEdges": {
						"type": "array",
						"items": false,
						"description": "The auditable item graph vertices to connect the document to.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"id": {
										"type": "string"
									},
									"addAlias": {
										"type": "boolean"
									},
									"aliasAnnotationObject": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
									}
								},
								"required": [
									"id"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"Error": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"name",
					"message"
				],
				"additionalProperties": false,
				"description": "Model to describe serialized error."
			},
			"HealthInfo": {
				"type": "object",
				"properties": {
					"status": {
						"$ref": "#/components/schemas/HealthStatus"
					},
					"components": {
						"type": "array",
						"items": false,
						"description": "The status of the components.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"description": "The name of the component."
									},
									"status": {
										"$ref": "#/components/schemas/HealthStatus"
									},
									"details": {
										"type": "string",
										"description": "The details for the status."
									}
								},
								"required": [
									"name",
									"status"
								],
								"additionalProperties": false
							}
						]
					}
				},
				"required": [
					"status"
				],
				"additionalProperties": false,
				"description": "The status of the server."
			},
			"HealthStatus": {
				"anyOf": [
					{
						"type": "string",
						"const": "ok",
						"description": "OK."
					},
					{
						"type": "string",
						"const": "warning",
						"description": "Warning."
					},
					{
						"type": "string",
						"const": "error",
						"description": "Error."
					}
				],
				"description": "The health status of the component."
			},
			"IdentityCreateRequest": {
				"type": "object",
				"properties": {
					"namespace": {
						"type": "string",
						"description": "The optional namespace to create the identity in."
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProfileCreateRequest": {
				"type": "object",
				"properties": {
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProfileGetResponse": {
				"type": "object",
				"properties": {
					"identity": {
						"type": "string",
						"description": "The identity of the profile, this is the authenticated user identity."
					},
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"required": [
					"identity"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityProfileListResponse": {
				"type": "object",
				"properties": {
					"items": {
						"type": "array",
						"items": false,
						"description": "The identities.",
						"prefixItems": [
							{
								"type": "object",
								"properties": {
									"identity": {
										"type": "string",
										"description": "The identity."
									},
									"publicProfile": {
										"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
									}
								},
								"required": [
									"identity"
								],
								"additionalProperties": false
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"items"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityProfileUpdateRequest": {
				"type": "object",
				"properties": {
					"publicProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					},
					"privateProfile": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdDocument"
					}
				},
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofCreateRequest": {
				"type": "object",
				"properties": {
					"proofType": {
						"$ref": "https://schema.twindev.org/w3c-did/ProofTypes"
					},
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"proofType",
					"document"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofVerifyRequest": {
				"type": "object",
				"properties": {
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"proof": {
						"$ref": "https://schema.twindev.org/w3c-did/Proof"
					}
				},
				"required": [
					"document",
					"proof"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityProofVerifyResponse": {
				"type": "object",
				"properties": {
					"verified": {
						"type": "boolean"
					}
				},
				"required": [
					"verified"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityServiceCreateRequest": {
				"type": "object",
				"properties": {
					"serviceId": {
						"type": "string",
						"description": "The id of the service."
					},
					"type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The type of the service."
					},
					"endpoint": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The endpoint for the service."
					}
				},
				"required": [
					"serviceId",
					"type",
					"endpoint"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiableCredentialCreateRequest": {
				"type": "object",
				"properties": {
					"credentialId": {
						"type": "string",
						"description": "The id of the credential."
					},
					"subject": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"revocationIndex": {
						"type": "number",
						"description": "The bitmap revocation index of the credential, if undefined will not have revocation status."
					}
				},
				"required": [
					"subject"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiableCredentialCreateResponse": {
				"type": "object",
				"properties": {
					"verifiableCredential": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiableCredential"
					},
					"jwt": {
						"type": "string",
						"description": "The JWT token for the verifiable credential."
					}
				},
				"required": [
					"verifiableCredential",
					"jwt"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiableCredentialVerifyResponse": {
				"type": "object",
				"properties": {
					"revoked": {
						"type": "boolean",
						"description": "Has the credential been revoked."
					},
					"verifiableCredential": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiableCredential"
					}
				},
				"required": [
					"revoked"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiablePresentationCreateRequest": {
				"type": "object",
				"properties": {
					"presentationId": {
						"type": "string",
						"description": "The id of the presentation."
					},
					"contexts": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdContextDefinitionRoot"
					},
					"types": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": false,
								"prefixItems": [
									{
										"type": "string"
									}
								]
							}
						],
						"description": "The types of the presentation."
					},
					"verifiableCredentials": {
						"type": "array",
						"items": false,
						"description": "The verifiable credentials to include in the presentation.",
						"prefixItems": [
							{
								"anyOf": [
									{
										"type": "string"
									},
									{
										"$ref": "https://schema.twindev.org/w3c-did/DidVerifiableCredential"
									}
								]
							}
						]
					},
					"expiresInMinutes": {
						"type": "number",
						"description": "The expiration time for the presentation."
					}
				},
				"required": [
					"verifiableCredentials"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"IdentityVerifiablePresentationCreateResponse": {
				"type": "object",
				"properties": {
					"verifiablePresentation": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiablePresentation"
					},
					"jwt": {
						"type": "string",
						"description": "The JWT token for the verifiable presentation."
					}
				},
				"required": [
					"verifiablePresentation",
					"jwt"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerifiablePresentationVerifyResponse": {
				"type": "object",
				"properties": {
					"revoked": {
						"type": "boolean",
						"description": "Has the presentation been revoked."
					},
					"verifiablePresentation": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerifiablePresentation"
					},
					"issuers": {
						"type": "array",
						"items": false,
						"description": "The issuers of the presentation.",
						"prefixItems": [
							{
								"$ref": "https://schema.twindev.org/w3c-did/DidDocument"
							}
						]
					}
				},
				"required": [
					"revoked"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"IdentityVerificationMethodCreateRequest": {
				"type": "object",
				"properties": {
					"verificationMethodType": {
						"$ref": "https://schema.twindev.org/w3c-did/DidVerificationMethodType"
					},
					"verificationMethodId": {
						"type": "string",
						"description": "The optional id for the verification method, will be allocated if not supplied."
					}
				},
				"required": [
					"verificationMethodType"
				],
				"additionalProperties": false,
				"description": "The data for the request."
			},
			"ImmutableProofCreateRequest": {
				"type": "object",
				"properties": {
					"document": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					}
				},
				"required": [
					"document"
				],
				"additionalProperties": false,
				"description": "The parameters from the body."
			},
			"LogEntry": {
				"type": "object",
				"properties": {
					"level": {
						"$ref": "#/components/schemas/LogLevel"
					},
					"source": {
						"type": "string",
						"description": "The source of the log entry."
					},
					"ts": {
						"type": "number",
						"description": "The timestamp of the log entry, if left blank will be populated by the connector."
					},
					"message": {
						"type": "string",
						"description": "The message."
					},
					"error": {
						"$ref": "#/components/schemas/Error"
					},
					"data": {
						"type": "object",
						"additionalProperties": {},
						"description": "Optional data for the message."
					}
				},
				"required": [
					"level",
					"source",
					"message"
				],
				"additionalProperties": false,
				"description": "Interface describing a log entry."
			},
			"LogLevel": {
				"type": "string",
				"enum": [
					"info",
					"error",
					"warn",
					"trace",
					"debug"
				],
				"description": "Log level."
			},
			"LoggingListResponse": {
				"type": "object",
				"properties": {
					"entities": {
						"type": "array",
						"items": false,
						"description": "The entities, which can be partial if a limited keys list was provided.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/LogEntry"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"LoginRequest": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"description": "The email address for the user."
					},
					"password": {
						"type": "string",
						"description": "The password for the user."
					}
				},
				"required": [
					"email",
					"password"
				],
				"additionalProperties": false,
				"description": "The login details."
			},
			"LoginResponse": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"description": "The access token, if it uses a mechanism with public access."
					},
					"expiry": {
						"type": "number",
						"description": "The expiry time of the token."
					}
				},
				"required": [
					"expiry"
				],
				"additionalProperties": false,
				"description": "The login response details."
			},
			"MetricType": {
				"anyOf": [
					{
						"type": "number",
						"const": 0,
						"description": "Counter."
					},
					{
						"type": "number",
						"const": 1,
						"description": "Increment Decrement Counter."
					},
					{
						"type": "number",
						"const": 2,
						"description": "Gauge."
					}
				],
				"description": "The types of metrics."
			},
			"NftMintRequest": {
				"type": "object",
				"properties": {
					"tag": {
						"type": "string",
						"description": "The tag for the NFT."
					},
					"immutableMetadata": {
						"description": "The immutable metadata for the NFT."
					},
					"metadata": {
						"description": "The metadata for the NFT."
					},
					"namespace": {
						"type": "string",
						"description": "The namespace of the connector to use for the NFT, defaults to component configured namespace."
					}
				},
				"required": [
					"tag"
				],
				"additionalProperties": false,
				"description": "The data to be used in the minting."
			},
			"NftResolveResponse": {
				"type": "object",
				"properties": {
					"issuer": {
						"type": "string",
						"description": "The issuer of the NFT."
					},
					"owner": {
						"type": "string",
						"description": "The owner of the NFT."
					},
					"tag": {
						"type": "string",
						"description": "The tag data for the NFT."
					},
					"immutableMetadata": {
						"description": "The immutable data for the NFT."
					},
					"metadata": {
						"description": "The metadata for the NFT."
					}
				},
				"required": [
					"issuer",
					"owner",
					"tag"
				],
				"additionalProperties": false,
				"description": "The data that was resolved."
			},
			"NftTransferRequest": {
				"type": "object",
				"properties": {
					"recipientIdentity": {
						"type": "string",
						"description": "The recipient identity for the NFT."
					},
					"recipientAddress": {
						"type": "string",
						"description": "The recipient address for the NFT."
					},
					"metadata": {
						"description": "The metadata for the NFT."
					}
				},
				"required": [
					"recipientIdentity",
					"recipientAddress"
				],
				"additionalProperties": false,
				"description": "The data to be used in the transfer."
			},
			"NftUpdateRequest": {
				"type": "object",
				"properties": {
					"metadata": {
						"description": "The metadata for the NFT."
					}
				},
				"additionalProperties": false,
				"description": "The data to be used in the update."
			},
			"NotFoundResponse": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"notFoundId": {
						"type": "string",
						"description": "The id if the item that was not found."
					},
					"name": {
						"type": "string",
						"description": "The name for the error."
					},
					"message": {
						"type": "string",
						"description": "The message for the error."
					},
					"source": {
						"type": "string",
						"description": "The source of the error."
					},
					"properties": {
						"type": "object",
						"additionalProperties": {},
						"description": "Any additional information for the error."
					},
					"stack": {
						"type": "string",
						"description": "The stack trace for the error."
					},
					"inner": {
						"$ref": "#/components/schemas/Error"
					}
				},
				"required": [
					"message",
					"name"
				],
				"description": "The body which contains the error."
			},
			"RefreshTokenResponse": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"description": "The refreshed token, if it uses a mechanism with public access."
					},
					"expiry": {
						"type": "number",
						"description": "The expiry time of the token."
					}
				},
				"required": [
					"expiry"
				],
				"additionalProperties": false,
				"description": "The refresh token details."
			},
			"Rule": {
				"type": "object",
				"properties": {
					"source": {
						"type": "string",
						"description": "The path to the data in the document to extract. should be in JSONPath format https://www.rfc-editor.org/rfc/rfc9535.html."
					},
					"target": {
						"type": "string",
						"description": "The target path of where to store the extracted data. Supports simple dotted path notation, and numeric index notation."
					},
					"retainPathDepth": {
						"type": "number",
						"description": "When extracting objects, how much of the original path should be maintained in the target object."
					},
					"coerce": {
						"$ref": "#/components/schemas/CoerceType"
					}
				},
				"required": [
					"source",
					"target"
				],
				"additionalProperties": false,
				"description": "Rule defining how to extract data from an object."
			},
			"RuleGroup": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The id for the rule group."
					},
					"label": {
						"type": "string",
						"description": "The label for the rule group."
					},
					"rules": {
						"type": "array",
						"items": false,
						"description": "The rules.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/Rule"
							}
						]
					}
				},
				"required": [
					"id",
					"label",
					"rules"
				],
				"additionalProperties": false,
				"description": "Group of rules for extraction."
			},
			"ServerInfo": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The application name."
					},
					"version": {
						"type": "string",
						"description": "The version of the server."
					}
				},
				"required": [
					"name",
					"version"
				],
				"additionalProperties": false,
				"description": "The information about the server."
			},
			"ServerSpecResponse": {
				"description": "The spec for the server."
			},
			"SortDirection": {
				"anyOf": [
					{
						"type": "string",
						"const": "asc",
						"description": "Ascending."
					},
					{
						"type": "string",
						"const": "desc",
						"description": "Descending."
					}
				],
				"description": "The sort directions."
			},
			"TelemetryAddMetricValueRequest": {
				"type": "object",
				"properties": {
					"value": {
						"anyOf": [
							{
								"type": "string",
								"const": "inc"
							},
							{
								"type": "string",
								"const": "dec"
							},
							{
								"type": "number"
							}
						],
						"description": "The value for the update operation."
					},
					"customData": {
						"type": "object",
						"additionalProperties": {},
						"description": "The custom data for the update operation."
					}
				},
				"required": [
					"value"
				],
				"additionalProperties": false,
				"description": "The data to be used in the update."
			},
			"TelemetryGetMetricResponse": {
				"type": "object",
				"properties": {
					"metric": {
						"$ref": "#/components/schemas/TelemetryMetric"
					},
					"value": {
						"$ref": "#/components/schemas/TelemetryMetricValue"
					}
				},
				"required": [
					"metric",
					"value"
				],
				"additionalProperties": false,
				"description": "The body parameters."
			},
			"TelemetryListResponse": {
				"type": "object",
				"properties": {
					"entities": {
						"type": "array",
						"items": false,
						"description": "The metrics.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/TelemetryMetric"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"TelemetryMetric": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the metric."
					},
					"label": {
						"type": "string",
						"description": "The label of the metric."
					},
					"type": {
						"$ref": "#/components/schemas/MetricType"
					},
					"description": {
						"type": "string",
						"description": "Description."
					},
					"unit": {
						"type": "string",
						"description": "The unit the metric describes."
					}
				},
				"required": [
					"id",
					"label",
					"type"
				],
				"additionalProperties": false,
				"description": "Interface describing a telemetry metric."
			},
			"TelemetryMetricValue": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "The id of the metric value."
					},
					"ts": {
						"type": "number",
						"description": "The timestamp of the metric."
					},
					"value": {
						"type": "number",
						"description": "The value of the metric."
					},
					"customData": {
						"type": "object",
						"additionalProperties": {},
						"description": "The custom data for the metric value."
					}
				},
				"required": [
					"id",
					"ts",
					"value"
				],
				"additionalProperties": false,
				"description": "Interface describing a telemetry metric value."
			},
			"TelemetryUpdateMetricRequest": {
				"type": "object",
				"properties": {
					"label": {
						"type": "string",
						"description": "The label of the metric."
					},
					"description": {
						"type": "string",
						"description": "The description of the metric."
					},
					"unit": {
						"type": "string",
						"description": "The unit of the metric."
					}
				},
				"required": [
					"label"
				],
				"additionalProperties": false,
				"description": "The data to be used in the update."
			},
			"TelemetryValuesListResponse": {
				"type": "object",
				"properties": {
					"metric": {
						"$ref": "#/components/schemas/TelemetryMetric"
					},
					"entities": {
						"type": "array",
						"items": false,
						"description": "The metric values.",
						"prefixItems": [
							{
								"$ref": "#/components/schemas/TelemetryMetricValue"
							}
						]
					},
					"cursor": {
						"type": "string",
						"description": "An optional cursor, when defined can be used to call find to get more entities."
					}
				},
				"required": [
					"metric",
					"entities"
				],
				"additionalProperties": false,
				"description": "The response payload."
			},
			"VerifiableStorageCreateRequest": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data for the verifiable storage item, this is a string serialized as base64."
					},
					"allowList": {
						"type": "array",
						"items": false,
						"description": "The list of identities that are allowed to modify the item.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					},
					"maxAllowListSize": {
						"type": "number",
						"description": "The maximum size of the allow list.",
						"default": 100
					},
					"namespace": {
						"type": "string",
						"description": "The namespace of the connector to use for the verifiable storage item, defaults to component configured namespace."
					}
				},
				"required": [
					"data"
				],
				"additionalProperties": false,
				"description": "The data to be stored."
			},
			"VerifiableStorageCreateResponse": {
				"type": "object",
				"properties": {
					"receipt": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"id": {
						"type": "string",
						"description": "The id of the verifiable storage item."
					}
				},
				"required": [
					"receipt",
					"id"
				],
				"additionalProperties": false,
				"description": "The data that was stored."
			},
			"VerifiableStorageGetRequest": {
				"type": "object",
				"properties": {
					"includeData": {
						"type": "boolean",
						"description": "The flag to include the data.",
						"default": true
					},
					"includeAllowList": {
						"type": "boolean",
						"description": "The flag to include the allow list.",
						"default": true
					}
				},
				"additionalProperties": false,
				"description": "The body optional param."
			},
			"VerifiableStorageGetResponse": {
				"type": "object",
				"properties": {
					"receipt": {
						"$ref": "https://schema.twindev.org/json-ld/JsonLdNodeObject"
					},
					"data": {
						"type": "string",
						"description": "The data of the verifiable storage item, this is a string serialized as base64."
					},
					"allowList": {
						"type": "array",
						"items": false,
						"description": "The list of identities that are allowed to modify the item.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					}
				},
				"required": [
					"receipt"
				],
				"additionalProperties": false,
				"description": "The data that was obtained."
			},
			"VerifiableStorageUpdateRequest": {
				"type": "object",
				"properties": {
					"data": {
						"type": "string",
						"description": "The data which is a string serialized as base64, leave empty if just updating the allow list."
					},
					"allowList": {
						"type": "array",
						"items": false,
						"description": "An updated list of identities that are allowed to modify the item, send an empty list to remove all entries.",
						"prefixItems": [
							{
								"type": "string"
							}
						]
					}
				},
				"additionalProperties": false,
				"description": "The data to be updated."
			},
			"VerifyDepth": {
				"anyOf": [
					{
						"type": "string",
						"const": "none",
						"description": "Do not verify any signatures."
					},
					{
						"type": "string",
						"const": "current",
						"description": "Verify only the most recent signature."
					},
					{
						"type": "string",
						"const": "all",
						"description": "Verify all the signatures."
					}
				],
				"description": "How deep to verify the signatures."
			}
		},
		"securitySchemes": {
			"jwtBearerAuthScheme": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
